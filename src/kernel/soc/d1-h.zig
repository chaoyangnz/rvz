const mmio = @import("./mmio.zig");

pub const devices = struct {
    /// Allwinner's D1-H chip unofficial SVD file maintained by community
    pub const D1H = struct {
        pub const vendor = "Allwinner";
        pub const series = "";
        pub const width = 32;
        pub const peripherals = struct {
            /// Clock Controller Unit
            pub const CCU = struct {
                /// PLL_CPU Control Register
                pub const PLL_CPU_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PLL M
                    PLL_M: u2 = 0,

                    /// [2:4]
                    res0: u3 = 0,

                    /// [5:5] PLL Lock Level
                    PLL_LOCK_MDSEL: enum(u1) {
                        ///
                        CC_24_26 = 0,

                        ///
                        CC_23_27 = 1,
                    } = .CC_24_26,

                    /// [6:7] PLL Unlock Level
                    PLL_UNLOCK_MDSEL: enum(u2) {
                        ///
                        CC_21_29 = 0b00,

                        ///
                        CC_22_28 = 0b01,

                        ///
                        CC_20_30 = 0b10,
                    } = .CC_21_29,

                    /// [8:15] PLL N
                    PLL_N: u8 = 0,

                    /// [16:23]
                    res1: u8 = 0,

                    /// [24:26] PLL Lock Time
                    PLL_LOCK_TIME: u3 = 0,

                    /// [27:27] PLL Output Gating Enable
                    PLL_OUTPUT_GATE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [28:28] PLL Lock Status
                    LOCK: enum(u1) {
                        ///
                        unlocked = 0,

                        ///
                        locked = 1,
                    } = .unlocked,

                    /// [29:29] Lock Enable
                    LOCK_ENABLE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [30:30] LDO Enable
                    PLL_LDO_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [31:31] PLL Enable
                    PLL_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,
                }), @ptrFromInt(0x2001000));

                /// PLL_DDR Control Register
                pub const PLL_DDR_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PLL Output Div M0
                    PLL_OUTPUT_DIV2: u1 = 0,

                    /// [1:1] PLL Input Div M1
                    PLL_INPUT_DIV2: u1 = 0,

                    /// [2:4]
                    res0: u3 = 0,

                    /// [5:5] PLL Lock Level
                    PLL_LOCK_MDSEL: enum(u1) {
                        ///
                        CC_24_26 = 0,

                        ///
                        CC_23_27 = 1,
                    } = .CC_24_26,

                    /// [6:7] PLL Unlock Level
                    PLL_UNLOCK_MDSEL: enum(u2) {
                        ///
                        CC_21_29 = 0b00,

                        ///
                        CC_22_28 = 0b01,

                        ///
                        CC_20_30 = 0b10,
                    } = .CC_21_29,

                    /// [8:15] PLL N
                    PLL_N: u8 = 0,

                    /// [16:23]
                    res1: u8 = 0,

                    /// [24:24] PLL SDM Enable
                    PLL_SDM_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:26]
                    res2: u2 = 0,

                    /// [27:27] PLL Output Gating Enable
                    PLL_OUTPUT_GATE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [28:28] PLL Lock Status
                    LOCK: enum(u1) {
                        ///
                        unlocked = 0,

                        ///
                        locked = 1,
                    } = .unlocked,

                    /// [29:29] Lock Enable
                    LOCK_ENABLE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [30:30] LDO Enable
                    PLL_LDO_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [31:31] PLL Enable
                    PLL_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,
                }), @ptrFromInt(0x2001010));

                /// PLL_PERI Control Register
                pub const PLL_PERI_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] PLL Input Div M
                    PLL_INPUT_DIV2: u1 = 0,

                    /// [2:4]
                    res1: u3 = 0,

                    /// [5:5] PLL Lock Level
                    PLL_LOCK_MDSEL: enum(u1) {
                        ///
                        CC_24_26 = 0,

                        ///
                        CC_23_27 = 1,
                    } = .CC_24_26,

                    /// [6:7] PLL Unlock Level
                    PLL_UNLOCK_MDSEL: enum(u2) {
                        ///
                        CC_21_29 = 0b00,

                        ///
                        CC_22_28 = 0b01,

                        ///
                        CC_20_30 = 0b10,
                    } = .CC_21_29,

                    /// [8:15] PLL N
                    PLL_N: u8 = 0,

                    /// [16:18] PLL Output Div P0
                    PLL_P0: u3 = 0,

                    /// [19:19]
                    res2: u1 = 0,

                    /// [20:22] PLL Output Div P1
                    PLL_P1: u3 = 0,

                    /// [23:23]
                    res3: u1 = 0,

                    /// [24:24] PLL SDM Enable
                    PLL_SDM_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:26]
                    res4: u2 = 0,

                    /// [27:27] PLL Output Gating Enable
                    PLL_OUTPUT_GATE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [28:28] PLL Lock Status
                    LOCK: enum(u1) {
                        ///
                        unlocked = 0,

                        ///
                        locked = 1,
                    } = .unlocked,

                    /// [29:29] Lock Enable
                    LOCK_ENABLE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [30:30] LDO Enable
                    PLL_LDO_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [31:31] PLL Enable
                    PLL_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,
                }), @ptrFromInt(0x2001020));

                /// PLL_VIDEO0 Control Register
                pub const PLL_VIDEO0_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PLL Output Div D
                    PLL_OUTPUT_DIV2: u1 = 0,

                    /// [1:1] PLL Input Div M
                    PLL_INPUT_DIV2: u1 = 0,

                    /// [2:4]
                    res0: u3 = 0,

                    /// [5:5] PLL Lock Level
                    PLL_LOCK_MDSEL: enum(u1) {
                        ///
                        CC_24_26 = 0,

                        ///
                        CC_23_27 = 1,
                    } = .CC_24_26,

                    /// [6:7] PLL Unlock Level
                    PLL_UNLOCK_MDSEL: enum(u2) {
                        ///
                        CC_21_29 = 0b00,

                        ///
                        CC_22_28 = 0b01,

                        ///
                        CC_20_30 = 0b10,
                    } = .CC_21_29,

                    /// [8:15] PLL N
                    PLL_N: u8 = 0,

                    /// [16:23]
                    res1: u8 = 0,

                    /// [24:24] PLL SDM Enable
                    PLL_SDM_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:26]
                    res2: u2 = 0,

                    /// [27:27] PLL Output Gating Enable
                    PLL_OUTPUT_GATE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [28:28] PLL Lock Status
                    LOCK: enum(u1) {
                        ///
                        unlocked = 0,

                        ///
                        locked = 1,
                    } = .unlocked,

                    /// [29:29] Lock Enable
                    LOCK_ENABLE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [30:30] LDO Enable
                    PLL_LDO_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [31:31] PLL Enable
                    PLL_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,
                }), @ptrFromInt(0x2001040));

                /// PLL_VIDEO1 Control Register
                pub const PLL_VIDEO1_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PLL Output Div D
                    PLL_OUTPUT_DIV2: u1 = 0,

                    /// [1:1] PLL Input Div M
                    PLL_INPUT_DIV2: u1 = 0,

                    /// [2:4]
                    res0: u3 = 0,

                    /// [5:5] PLL Lock Level
                    PLL_LOCK_MDSEL: enum(u1) {
                        ///
                        CC_24_26 = 0,

                        ///
                        CC_23_27 = 1,
                    } = .CC_24_26,

                    /// [6:7] PLL Unlock Level
                    PLL_UNLOCK_MDSEL: enum(u2) {
                        ///
                        CC_21_29 = 0b00,

                        ///
                        CC_22_28 = 0b01,

                        ///
                        CC_20_30 = 0b10,
                    } = .CC_21_29,

                    /// [8:15] PLL N
                    PLL_N: u8 = 0,

                    /// [16:23]
                    res1: u8 = 0,

                    /// [24:24] PLL SDM Enable
                    PLL_SDM_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:26]
                    res2: u2 = 0,

                    /// [27:27] PLL Output Gating Enable
                    PLL_OUTPUT_GATE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [28:28] PLL Lock Status
                    LOCK: enum(u1) {
                        ///
                        unlocked = 0,

                        ///
                        locked = 1,
                    } = .unlocked,

                    /// [29:29] Lock Enable
                    LOCK_ENABLE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [30:30] LDO Enable
                    PLL_LDO_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [31:31] PLL Enable
                    PLL_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,
                }), @ptrFromInt(0x2001048));

                /// PLL_VE Control Register
                pub const PLL_VE_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PLL Output Div M0
                    PLL_OUTPUT_DIV2: u1 = 0,

                    /// [1:1] PLL Input Div M1
                    PLL_INPUT_DIV2: u1 = 0,

                    /// [2:4]
                    res0: u3 = 0,

                    /// [5:5] PLL Lock Level
                    PLL_LOCK_MDSEL: enum(u1) {
                        ///
                        CC_24_26 = 0,

                        ///
                        CC_23_27 = 1,
                    } = .CC_24_26,

                    /// [6:7] PLL Unlock Level
                    PLL_UNLOCK_MDSEL: enum(u2) {
                        ///
                        CC_21_29 = 0b00,

                        ///
                        CC_22_28 = 0b01,

                        ///
                        CC_20_30 = 0b10,
                    } = .CC_21_29,

                    /// [8:15] PLL N
                    PLL_N: u8 = 0,

                    /// [16:23]
                    res1: u8 = 0,

                    /// [24:24] PLL SDM Enable
                    PLL_SDM_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:26]
                    res2: u2 = 0,

                    /// [27:27] PLL Output Gating Enable
                    PLL_OUTPUT_GATE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [28:28] PLL Lock Status
                    LOCK: enum(u1) {
                        ///
                        unlocked = 0,

                        ///
                        locked = 1,
                    } = .unlocked,

                    /// [29:29] Lock Enable
                    LOCK_ENABLE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [30:30] LDO Enable
                    PLL_LDO_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [31:31] PLL Enable
                    PLL_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,
                }), @ptrFromInt(0x2001058));

                /// PLL_AUDIO0 Control Register
                pub const PLL_AUDIO0_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PLL Output Div M0
                    PLL_OUTPUT_DIV2: u1 = 0,

                    /// [1:1] PLL Input Div M1
                    PLL_INPUT_DIV2: u1 = 0,

                    /// [2:4]
                    res0: u3 = 0,

                    /// [5:5] PLL Lock Level
                    PLL_LOCK_MDSEL: enum(u1) {
                        ///
                        CC_24_26 = 0,

                        ///
                        CC_23_27 = 1,
                    } = .CC_24_26,

                    /// [6:7] PLL Unlock Level
                    PLL_UNLOCK_MDSEL: enum(u2) {
                        ///
                        CC_21_29 = 0b00,

                        ///
                        CC_22_28 = 0b01,

                        ///
                        CC_20_30 = 0b10,
                    } = .CC_21_29,

                    /// [8:15] PLL N
                    PLL_N: u8 = 0,

                    /// [16:21] PLL Post-div P
                    PLL_P: u6 = 0,

                    /// [22:23]
                    res1: u2 = 0,

                    /// [24:24] PLL SDM Enable
                    PLL_SDM_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:26]
                    res2: u2 = 0,

                    /// [27:27] PLL Output Gating Enable
                    PLL_OUTPUT_GATE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [28:28] PLL Lock Status
                    LOCK: enum(u1) {
                        ///
                        unlocked = 0,

                        ///
                        locked = 1,
                    } = .unlocked,

                    /// [29:29] Lock Enable
                    LOCK_ENABLE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [30:30] LDO Enable
                    PLL_LDO_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [31:31] PLL Enable
                    PLL_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,
                }), @ptrFromInt(0x2001078));

                /// PLL_AUDIO1 Control Register
                pub const PLL_AUDIO1_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] PLL Input Div M
                    PLL_INPUT_DIV2: u1 = 0,

                    /// [2:4]
                    res1: u3 = 0,

                    /// [5:5] PLL Lock Level
                    PLL_LOCK_MDSEL: enum(u1) {
                        ///
                        CC_24_26 = 0,

                        ///
                        CC_23_27 = 1,
                    } = .CC_24_26,

                    /// [6:7] PLL Unlock Level
                    PLL_UNLOCK_MDSEL: enum(u2) {
                        ///
                        CC_21_29 = 0b00,

                        ///
                        CC_22_28 = 0b01,

                        ///
                        CC_20_30 = 0b10,
                    } = .CC_21_29,

                    /// [8:15] PLL N
                    PLL_N: u8 = 0,

                    /// [16:18] PLL Output Div P0
                    PLL_P0: u3 = 0,

                    /// [19:19]
                    res2: u1 = 0,

                    /// [20:22] PLL Output Div P1
                    PLL_P1: u3 = 0,

                    /// [23:23]
                    res3: u1 = 0,

                    /// [24:24] PLL SDM Enable
                    PLL_SDM_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:26]
                    res4: u2 = 0,

                    /// [27:27] PLL Output Gating Enable
                    PLL_OUTPUT_GATE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [28:28] PLL Lock Status
                    LOCK: enum(u1) {
                        ///
                        unlocked = 0,

                        ///
                        locked = 1,
                    } = .unlocked,

                    /// [29:29] Lock Enable
                    LOCK_ENABLE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [30:30] LDO Enable
                    PLL_LDO_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [31:31] PLL Enable
                    PLL_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,
                }), @ptrFromInt(0x2001080));

                /// PLL_DDR Pattern0 Control Register
                pub const PLL_DDR_PAT0_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Wave Bottom
                    WAVE_BOT: u17 = 0,

                    /// [17:18] Frequency
                    FREQ: enum(u2) {
                        ///
                        F_31_5_k = 0b00,

                        ///
                        F_32_k = 0b01,

                        ///
                        F_32_5_k = 0b10,

                        ///
                        F_33_k = 0b11,
                    } = .F_31_5_k,

                    /// [19:19] SDM Clock Select
                    SDM_CLK_SEL: enum(u1) {
                        ///
                        F_24_M = 0,

                        ///
                        F_12_M = 1,
                    } = .F_24_M,

                    /// [20:28] Wave Step
                    WAVE_STEP: u9 = 0,

                    /// [29:30] Spread Frequency Mode
                    SPR_FREQ_MODE: enum(u2) {
                        ///
                        DC0 = 0b00,

                        ///
                        DC1 = 0b01,

                        ///
                        Triangular_1 = 0b10,

                        ///
                        Triangular_n = 0b11,
                    } = .DC0,

                    /// [31:31] Sigma-Delta Pattern Enable
                    SIG_DELT_PAT_EN: u1 = 0,
                }), @ptrFromInt(0x2001110));

                /// PLL_DDR Pattern1 Control Register
                pub const PLL_DDR_PAT1_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Fraction In
                    FRAC_IN: u17 = 0,

                    /// [17:19]
                    res0: u3 = 0,

                    /// [20:20] Fraction Enable
                    FRAC_EN: u1 = 0,

                    /// [21:23]
                    res1: u3 = 0,

                    /// [24:24] Dither Enable
                    DITHER_EN: u1 = 0,

                    /// [25:31]
                    res2: u7 = 0,
                }), @ptrFromInt(0x2001114));

                /// PLL_PERI Pattern0 Control Register
                pub const PLL_PERI_PAT0_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Wave Bottom
                    WAVE_BOT: u17 = 0,

                    /// [17:18] Frequency
                    FREQ: enum(u2) {
                        ///
                        F_31_5_k = 0b00,

                        ///
                        F_32_k = 0b01,

                        ///
                        F_32_5_k = 0b10,

                        ///
                        F_33_k = 0b11,
                    } = .F_31_5_k,

                    /// [19:19] SDM Clock Select
                    SDM_CLK_SEL: enum(u1) {
                        ///
                        F_24_M = 0,

                        ///
                        F_12_M = 1,
                    } = .F_24_M,

                    /// [20:28] Wave Step
                    WAVE_STEP: u9 = 0,

                    /// [29:30] Spread Frequency Mode
                    SPR_FREQ_MODE: enum(u2) {
                        ///
                        DC0 = 0b00,

                        ///
                        DC1 = 0b01,

                        ///
                        Triangular_1 = 0b10,

                        ///
                        Triangular_n = 0b11,
                    } = .DC0,

                    /// [31:31] Sigma-Delta Pattern Enable
                    SIG_DELT_PAT_EN: u1 = 0,
                }), @ptrFromInt(0x2001120));

                /// PLL_PERI Pattern1 Control Register
                pub const PLL_PERI_PAT1_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Fraction In
                    FRAC_IN: u17 = 0,

                    /// [17:19]
                    res0: u3 = 0,

                    /// [20:20] Fraction Enable
                    FRAC_EN: u1 = 0,

                    /// [21:23]
                    res1: u3 = 0,

                    /// [24:24] Dither Enable
                    DITHER_EN: u1 = 0,

                    /// [25:31]
                    res2: u7 = 0,
                }), @ptrFromInt(0x2001124));

                /// PLL_VIDEO0 Pattern0 Control Register
                pub const PLL_VIDEO0_PAT0_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Wave Bottom
                    WAVE_BOT: u17 = 0,

                    /// [17:18] Frequency
                    FREQ: enum(u2) {
                        ///
                        F_31_5_k = 0b00,

                        ///
                        F_32_k = 0b01,

                        ///
                        F_32_5_k = 0b10,

                        ///
                        F_33_k = 0b11,
                    } = .F_31_5_k,

                    /// [19:19] SDM Clock Select
                    SDM_CLK_SEL: enum(u1) {
                        ///
                        F_24_M = 0,

                        ///
                        F_12_M = 1,
                    } = .F_24_M,

                    /// [20:28] Wave Step
                    WAVE_STEP: u9 = 0,

                    /// [29:30] Spread Frequency Mode
                    SPR_FREQ_MODE: enum(u2) {
                        ///
                        DC0 = 0b00,

                        ///
                        DC1 = 0b01,

                        ///
                        Triangular_1 = 0b10,

                        ///
                        Triangular_n = 0b11,
                    } = .DC0,

                    /// [31:31] Sigma-Delta Pattern Enable
                    SIG_DELT_PAT_EN: u1 = 0,
                }), @ptrFromInt(0x2001140));

                /// PLL_VIDEO0 Pattern1 Control Register
                pub const PLL_VIDEO0_PAT1_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Fraction In
                    FRAC_IN: u17 = 0,

                    /// [17:19]
                    res0: u3 = 0,

                    /// [20:20] Fraction Enable
                    FRAC_EN: u1 = 0,

                    /// [21:23]
                    res1: u3 = 0,

                    /// [24:24] Dither Enable
                    DITHER_EN: u1 = 0,

                    /// [25:31]
                    res2: u7 = 0,
                }), @ptrFromInt(0x2001144));

                /// PLL_VIDEO1 Pattern0 Control Register
                pub const PLL_VIDEO1_PAT0_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Wave Bottom
                    WAVE_BOT: u17 = 0,

                    /// [17:18] Frequency
                    FREQ: enum(u2) {
                        ///
                        F_31_5_k = 0b00,

                        ///
                        F_32_k = 0b01,

                        ///
                        F_32_5_k = 0b10,

                        ///
                        F_33_k = 0b11,
                    } = .F_31_5_k,

                    /// [19:19] SDM Clock Select
                    SDM_CLK_SEL: enum(u1) {
                        ///
                        F_24_M = 0,

                        ///
                        F_12_M = 1,
                    } = .F_24_M,

                    /// [20:28] Wave Step
                    WAVE_STEP: u9 = 0,

                    /// [29:30] Spread Frequency Mode
                    SPR_FREQ_MODE: enum(u2) {
                        ///
                        DC0 = 0b00,

                        ///
                        DC1 = 0b01,

                        ///
                        Triangular_1 = 0b10,

                        ///
                        Triangular_n = 0b11,
                    } = .DC0,

                    /// [31:31] Sigma-Delta Pattern Enable
                    SIG_DELT_PAT_EN: u1 = 0,
                }), @ptrFromInt(0x2001148));

                /// PLL_VIDEO1 Pattern1 Control Register
                pub const PLL_VIDEO1_PAT1_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Fraction In
                    FRAC_IN: u17 = 0,

                    /// [17:19]
                    res0: u3 = 0,

                    /// [20:20] Fraction Enable
                    FRAC_EN: u1 = 0,

                    /// [21:23]
                    res1: u3 = 0,

                    /// [24:24] Dither Enable
                    DITHER_EN: u1 = 0,

                    /// [25:31]
                    res2: u7 = 0,
                }), @ptrFromInt(0x200114c));

                /// PLL_VE Pattern0 Control Register
                pub const PLL_VE_PAT0_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Wave Bottom
                    WAVE_BOT: u17 = 0,

                    /// [17:18] Frequency
                    FREQ: enum(u2) {
                        ///
                        F_31_5_k = 0b00,

                        ///
                        F_32_k = 0b01,

                        ///
                        F_32_5_k = 0b10,

                        ///
                        F_33_k = 0b11,
                    } = .F_31_5_k,

                    /// [19:19] SDM Clock Select
                    SDM_CLK_SEL: enum(u1) {
                        ///
                        F_24_M = 0,

                        ///
                        F_12_M = 1,
                    } = .F_24_M,

                    /// [20:28] Wave Step
                    WAVE_STEP: u9 = 0,

                    /// [29:30] Spread Frequency Mode
                    SPR_FREQ_MODE: enum(u2) {
                        ///
                        DC0 = 0b00,

                        ///
                        DC1 = 0b01,

                        ///
                        Triangular_1 = 0b10,

                        ///
                        Triangular_n = 0b11,
                    } = .DC0,

                    /// [31:31] Sigma-Delta Pattern Enable
                    SIG_DELT_PAT_EN: u1 = 0,
                }), @ptrFromInt(0x2001158));

                /// PLL_VE Pattern1 Control Register
                pub const PLL_VE_PAT1_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Fraction In
                    FRAC_IN: u17 = 0,

                    /// [17:19]
                    res0: u3 = 0,

                    /// [20:20] Fraction Enable
                    FRAC_EN: u1 = 0,

                    /// [21:23]
                    res1: u3 = 0,

                    /// [24:24] Dither Enable
                    DITHER_EN: u1 = 0,

                    /// [25:31]
                    res2: u7 = 0,
                }), @ptrFromInt(0x200115c));

                /// PLL_AUDIO0 Pattern0 Control Register
                pub const PLL_AUDIO0_PAT0_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Wave Bottom
                    WAVE_BOT: u17 = 0,

                    /// [17:18] Frequency
                    FREQ: enum(u2) {
                        ///
                        F_31_5_k = 0b00,

                        ///
                        F_32_k = 0b01,

                        ///
                        F_32_5_k = 0b10,

                        ///
                        F_33_k = 0b11,
                    } = .F_31_5_k,

                    /// [19:19] SDM Clock Select
                    SDM_CLK_SEL: enum(u1) {
                        ///
                        F_24_M = 0,

                        ///
                        F_12_M = 1,
                    } = .F_24_M,

                    /// [20:28] Wave Step
                    WAVE_STEP: u9 = 0,

                    /// [29:30] Spread Frequency Mode
                    SPR_FREQ_MODE: enum(u2) {
                        ///
                        DC0 = 0b00,

                        ///
                        DC1 = 0b01,

                        ///
                        Triangular_1 = 0b10,

                        ///
                        Triangular_n = 0b11,
                    } = .DC0,

                    /// [31:31] Sigma-Delta Pattern Enable
                    SIG_DELT_PAT_EN: u1 = 0,
                }), @ptrFromInt(0x2001178));

                /// PLL_AUDIO0 Pattern1 Control Register
                pub const PLL_AUDIO0_PAT1_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Fraction In
                    FRAC_IN: u17 = 0,

                    /// [17:19]
                    res0: u3 = 0,

                    /// [20:20] Fraction Enable
                    FRAC_EN: u1 = 0,

                    /// [21:23]
                    res1: u3 = 0,

                    /// [24:24] Dither Enable
                    DITHER_EN: u1 = 0,

                    /// [25:31]
                    res2: u7 = 0,
                }), @ptrFromInt(0x200117c));

                /// PLL_AUDIO1 Pattern0 Control Register
                pub const PLL_AUDIO1_PAT0_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Wave Bottom
                    WAVE_BOT: u17 = 0,

                    /// [17:18] Frequency
                    FREQ: enum(u2) {
                        ///
                        F_31_5_k = 0b00,

                        ///
                        F_32_k = 0b01,

                        ///
                        F_32_5_k = 0b10,

                        ///
                        F_33_k = 0b11,
                    } = .F_31_5_k,

                    /// [19:19] SDM Clock Select
                    SDM_CLK_SEL: enum(u1) {
                        ///
                        F_24_M = 0,

                        ///
                        F_12_M = 1,
                    } = .F_24_M,

                    /// [20:28] Wave Step
                    WAVE_STEP: u9 = 0,

                    /// [29:30] Spread Frequency Mode
                    SPR_FREQ_MODE: enum(u2) {
                        ///
                        DC0 = 0b00,

                        ///
                        DC1 = 0b01,

                        ///
                        Triangular_1 = 0b10,

                        ///
                        Triangular_n = 0b11,
                    } = .DC0,

                    /// [31:31] Sigma-Delta Pattern Enable
                    SIG_DELT_PAT_EN: u1 = 0,
                }), @ptrFromInt(0x2001180));

                /// PLL_AUDIO1 Pattern1 Control Register
                pub const PLL_AUDIO1_PAT1_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:16] Fraction In
                    FRAC_IN: u17 = 0,

                    /// [17:19]
                    res0: u3 = 0,

                    /// [20:20] Fraction Enable
                    FRAC_EN: u1 = 0,

                    /// [21:23]
                    res1: u3 = 0,

                    /// [24:24] Dither Enable
                    DITHER_EN: u1 = 0,

                    /// [25:31]
                    res2: u7 = 0,
                }), @ptrFromInt(0x2001184));

                /// PLL_CPU Bias Register
                pub const PLL_CPU_BIAS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:20] PLL current bias control
                    PLL_CP: u5 = 0,

                    /// [21:30]
                    res1: u10 = 0,

                    /// [31:31] VCO reset in
                    PLL_VCO_RST_IN: u1 = 0,
                }), @ptrFromInt(0x2001300));

                /// PLL_DDR Bias Register
                pub const PLL_DDR_BIAS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:20] PLL current bias control
                    PLL_CP: u5 = 0,

                    /// [21:31]
                    res1: u11 = 0,
                }), @ptrFromInt(0x2001310));

                /// PLL_PERI Bias Register
                pub const PLL_PERI_BIAS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:20] PLL current bias control
                    PLL_CP: u5 = 0,

                    /// [21:31]
                    res1: u11 = 0,
                }), @ptrFromInt(0x2001320));

                /// PLL_VIDEO0 Bias Register
                pub const PLL_VIDEO0_BIAS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:20] PLL current bias control
                    PLL_CP: u5 = 0,

                    /// [21:31]
                    res1: u11 = 0,
                }), @ptrFromInt(0x2001340));

                /// PLL_VIDEO1 Bias Register
                pub const PLL_VIDEO1_BIAS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:20] PLL current bias control
                    PLL_CP: u5 = 0,

                    /// [21:31]
                    res1: u11 = 0,
                }), @ptrFromInt(0x2001348));

                /// PLL_VE Bias Register
                pub const PLL_VE_BIAS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:20] PLL current bias control
                    PLL_CP: u5 = 0,

                    /// [21:31]
                    res1: u11 = 0,
                }), @ptrFromInt(0x2001358));

                /// PLL_AUDIO0 Bias Register
                pub const PLL_AUDIO0_BIAS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:20] PLL current bias control
                    PLL_CP: u5 = 0,

                    /// [21:31]
                    res1: u11 = 0,
                }), @ptrFromInt(0x2001378));

                /// PLL_AUDIO1 Bias Register
                pub const PLL_AUDIO1_BIAS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:20] PLL current bias control
                    PLL_CP: u5 = 0,

                    /// [21:31]
                    res1: u11 = 0,
                }), @ptrFromInt(0x2001380));

                /// PLL_CPU Tuning Register
                pub const PLL_CPU_TUN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:6] PLL-B-OUT [6:0] for verify
                    PLL_B_OUT: u7 = 0,

                    /// [7:7] PLL-REG-OD1 for verify
                    PLL_REG_OD1: u1 = 0,

                    /// [8:14] PLL-B-IN [6:0] for verify
                    PLL_B_IN: u7 = 0,

                    /// [15:15] PLL-REG-OD0 for verify
                    PLL_REG_OD: u1 = 0,

                    /// [16:22] Counter initial control
                    PLL_CNT_INT: u7 = 0,

                    /// [23:23]
                    res0: u1 = 0,

                    /// [24:26] KVCO gain control
                    PLL_VCO_GAIN: u3 = 0,

                    /// [27:27]
                    res1: u1 = 0,

                    /// [28:30] VCO range control
                    PLL_VCO: u3 = 0,

                    /// [31:31]
                    res2: u1 = 0,
                }), @ptrFromInt(0x2001400));

                /// CPU_AXI Configuration Register
                pub const CPU_AXI_CFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Factor M
                    CPU_DIV1: u2 = 0,

                    /// [2:7]
                    res0: u6 = 0,

                    /// [8:9] Factor N
                    CPU_DIV2: u2 = 0,

                    /// [10:15]
                    res1: u6 = 0,

                    /// [16:17] PLL Output External Divider P
                    PLL_CPU_OUT_EXT_DIVP: enum(u2) {
                        ///
                        P1 = 0b00,

                        ///
                        P2 = 0b01,

                        ///
                        P4 = 0b10,
                    } = .P1,

                    /// [18:23]
                    res2: u6 = 0,

                    /// [24:26] Clock Source Select
                    CPU_CLK_SEL: enum(u3) {
                        ///
                        HOSC = 0b000,

                        ///
                        CLK32K = 0b001,

                        ///
                        CLK16M_RC = 0b010,

                        ///
                        PLL_CPU_P = 0b011,

                        ///
                        PLL_PERI_1X = 0b100,

                        ///
                        PLL_PERI_2X = 0b101,

                        ///
                        PLL_PERI_800M = 0b110,
                    } = .HOSC,

                    /// [27:31]
                    res3: u5 = 0,
                }), @ptrFromInt(0x2001500));

                /// CPU_GATING Configuration Register
                pub const CPU_GATING = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15] CPU Gating Field
                    CPU_GATING_FIELD: u16 = 0,

                    /// [16:30]
                    res0: u15 = 0,

                    /// [31:31] Gating Special Clock
                    CPU_GATING: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,
                }), @ptrFromInt(0x2001504));

                /// PSI Clock Register
                pub const PSI_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Factor M
                    FACTOR_M: u2 = 0,

                    /// [2:7]
                    res0: u6 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:25] Clock Source Select
                    CLK_SRC_SEL: enum(u2) {
                        ///
                        HOSC = 0b00,

                        ///
                        CLK32K = 0b01,

                        ///
                        CLK16M_RC = 0b10,

                        ///
                        PLL_PERI_1X = 0b11,
                    } = .HOSC,

                    /// [26:31]
                    res2: u6 = 0,
                }), @ptrFromInt(0x2001510));

                /// APB Clock Register
                pub const APB0_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:25] Clock Source Select
                    CLK_SRC_SEL: enum(u2) {
                        ///
                        HOSC = 0b00,

                        ///
                        CLK32K = 0b01,

                        ///
                        PSI_CLK = 0b10,

                        ///
                        PLL_PERI_1X = 0b11,
                    } = .HOSC,

                    /// [26:31]
                    res2: u6 = 0,
                }), @ptrFromInt(0x2001520));

                /// APB Clock Register
                pub const APB1_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:25] Clock Source Select
                    CLK_SRC_SEL: enum(u2) {
                        ///
                        HOSC = 0b00,

                        ///
                        CLK32K = 0b01,

                        ///
                        PSI_CLK = 0b10,

                        ///
                        PLL_PERI_1X = 0b11,
                    } = .HOSC,

                    /// [26:31]
                    res2: u6 = 0,
                }), @ptrFromInt(0x2001524));

                /// APB_CLK group: APB Clock Register
                pub const APB_CLK = .{ APB0_CLK, APB1_CLK };

                /// MBUS Clock Register
                pub const MBUS_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:29]
                    res0: u30 = 0,

                    /// [30:30] MBUS Reset
                    MBUS_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [31:31]
                    res1: u1 = 0,
                }), @ptrFromInt(0x2001540));

                /// DE Clock Register
                pub const DE_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:23]
                    res0: u19 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_PERI_2X = 0b000,

                        ///
                        PLL_VIDEO0_4X = 0b001,

                        ///
                        PLL_VIDEO1_4X = 0b010,

                        ///
                        PLL_AUDIO1_DIV2 = 0b011,
                    } = .PLL_PERI_2X,

                    /// [27:30]
                    res1: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,
                }), @ptrFromInt(0x2001600));

                /// DE Bus Gating Reset Register
                pub const DE_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x200160c));

                /// DI Clock Register
                pub const DI_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:23]
                    res0: u19 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_PERI_2X = 0b000,

                        ///
                        PLL_VIDEO0_4X = 0b001,

                        ///
                        PLL_VIDEO1_4X = 0b010,

                        ///
                        PLL_AUDIO1_DIV2 = 0b011,
                    } = .PLL_PERI_2X,

                    /// [27:30]
                    res1: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,
                }), @ptrFromInt(0x2001620));

                /// DI Bus Gating Reset Register
                pub const DI_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x200162c));

                /// G2D Clock Register
                pub const G2D_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:23]
                    res0: u19 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_PERI_2X = 0b000,

                        ///
                        PLL_VIDEO0_4X = 0b001,

                        ///
                        PLL_VIDEO1_4X = 0b010,

                        ///
                        PLL_AUDIO1_DIV2 = 0b011,
                    } = .PLL_PERI_2X,

                    /// [27:30]
                    res1: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,
                }), @ptrFromInt(0x2001630));

                /// G2D Bus Gating Reset Register
                pub const G2D_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x200163c));

                /// CE Clock Register
                pub const CE_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:7]
                    res0: u4 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0b00,

                        ///
                        PLL_PERI_2X = 0b01,

                        ///
                        PLL_PERI_1X = 0b10,
                    } = .HOSC,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,
                }), @ptrFromInt(0x2001680));

                /// CE Bus Gating Reset Register
                pub const CE_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x200168c));

                /// VE Clock Register
                pub const VE_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:23]
                    res0: u19 = 0,

                    /// [24:24] Clock Source Select
                    CLK_SRC_SEL: enum(u1) {
                        ///
                        VEPLL = 0,

                        ///
                        PLL_PERI_2X = 1,
                    } = .VEPLL,

                    /// [25:30]
                    res1: u6 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,
                }), @ptrFromInt(0x2001690));

                /// VE Bus Gating Reset Register
                pub const VE_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x200169c));

                /// DMA Bus Gating Reset Register
                pub const DMA_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x200170c));

                /// MSGBOX Bus Gating Reset Register
                pub const MSGBOX_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock for CPU, DSP, RISC-V MSGBOX
                    MSGBOX0_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:1] Gating Clock for CPU, DSP, RISC-V MSGBOX
                    MSGBOX1_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [2:2] Gating Clock for CPU, DSP, RISC-V MSGBOX
                    MSGBOX2_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [3:15]
                    res0: u13 = 0,

                    /// [16:16] CPU, DSP, RISC-V MSGBOX Reset
                    MSGBOX0_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:17] CPU, DSP, RISC-V MSGBOX Reset
                    MSGBOX1_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [18:18] CPU, DSP, RISC-V MSGBOX Reset
                    MSGBOX2_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [19:31]
                    res1: u13 = 0,
                }), @ptrFromInt(0x200171c));

                /// SPINLOCK Bus Gating Reset Register
                pub const SPINLOCK_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x200172c));

                /// HSTIMER Bus Gating Reset Register
                pub const HSTIMER_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x200173c));

                /// AVS Clock Register
                pub const AVS_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:30]
                    res0: u31 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,
                }), @ptrFromInt(0x2001740));

                /// DBGSYS Bus Gating Reset Register
                pub const DBGSYS_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x200178c));

                /// PWM Bus Gating Reset Register
                pub const PWM_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x20017ac));

                /// IOMMU Bus Gating Reset Register
                pub const IOMMU_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x20017bc));

                /// DRAM Clock Register
                pub const DRAM_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Factor M
                    DRAM_DIV1: u2 = 0,

                    /// [2:7]
                    res0: u6 = 0,

                    /// [8:9] Factor N
                    DRAM_DIV2: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_DDR = 0b00,

                        ///
                        PLL_AUDIO1_DIV2 = 0b01,

                        ///
                        PLL_PERI_2X = 0b10,

                        ///
                        PLL_PERI_800M = 0b11,
                    } = .PLL_DDR,

                    /// [27:27] SDRCLK Configuration 0 Update
                    SDRCLK_UPD: enum(u1) {
                        ///
                        invalid = 0,

                        ///
                        valid = 1,
                    } = .invalid,

                    /// [28:30]
                    res2: u3 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,
                }), @ptrFromInt(0x2001800));

                /// MBUS Master Clock Gating Register
                pub const MBUS_MAT_CLK_GATING = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating MBUS Clock
                    DMA_MCLK_EN: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:1] Gating MBUS Clock
                    VE_MCLK_EN: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [2:2] Gating MBUS Clock
                    CE_MCLK_EN: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [3:6]
                    res0: u4 = 0,

                    /// [7:7] Gating MBUS Clock
                    TVIN_MCLK_EN: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [8:8] Gating MBUS Clock
                    CSI_MCLK_EN: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [9:9]
                    res1: u1 = 0,

                    /// [10:10] Gating MBUS Clock
                    G2D_MCLK_EN: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [11:11] Gating MBUS Clock
                    RISCV_MCLK_EN: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [12:31]
                    res2: u20 = 0,
                }), @ptrFromInt(0x2001804));

                /// DRAM Bus Gating Reset Register
                pub const DRAM_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x200180c));

                /// SMHC0 Clock Register
                pub const SMHC0_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:7]
                    res0: u4 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0b000,

                        ///
                        PLL_PERI_1X = 0b001,

                        ///
                        PLL_PERI_2X = 0b010,

                        ///
                        PLL_AUDIO1_DIV2 = 0b011,
                    } = .HOSC,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001830));

                /// SMHC1 Clock Register
                pub const SMHC1_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:7]
                    res0: u4 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0b000,

                        ///
                        PLL_PERI_1X = 0b001,

                        ///
                        PLL_PERI_2X = 0b010,

                        ///
                        PLL_AUDIO1_DIV2 = 0b011,
                    } = .HOSC,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001834));

                /// SMHC2 Clock Register
                pub const SMHC2_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:7]
                    res0: u4 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0b000,

                        ///
                        PLL_PERI_1X = 0b001,

                        ///
                        PLL_PERI_2X = 0b010,

                        ///
                        PLL_PERI_800M = 0b011,

                        ///
                        PLL_AUDIO1_DIV2 = 0b100,
                    } = .HOSC,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001838));

                /// SMHC Bus Gating Reset Register
                pub const SMHC_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    SMHC0_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:1] Gating Clock
                    SMHC1_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [2:2] Gating Clock
                    SMHC2_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [3:15]
                    res0: u13 = 0,

                    /// [16:16] Reset
                    SMHC0_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:17] Reset
                    SMHC1_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [18:18] Reset
                    SMHC2_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [19:31]
                    res1: u13 = 0,
                }), @ptrFromInt(0x200184c));

                /// UART Bus Gating Reset Register
                pub const UART_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    UART0_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:1] Gating Clock
                    UART1_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [2:2] Gating Clock
                    UART2_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [3:3] Gating Clock
                    UART3_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [4:4] Gating Clock
                    UART4_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [5:5] Gating Clock
                    UART5_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [6:15]
                    res0: u10 = 0,

                    /// [16:16] Reset
                    UART0_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:17] Reset
                    UART1_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [18:18] Reset
                    UART2_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [19:19] Reset
                    UART3_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [20:20] Reset
                    UART4_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [21:21] Reset
                    UART5_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [22:31]
                    res1: u10 = 0,
                }), @ptrFromInt(0x200190c));

                /// TWI Bus Gating Reset Register
                pub const TWI_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    TWI0_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:1] Gating Clock
                    TWI1_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [2:2] Gating Clock
                    TWI2_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [3:3] Gating Clock
                    TWI3_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [4:15]
                    res0: u12 = 0,

                    /// [16:16] Reset
                    TWI0_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:17] Reset
                    TWI1_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [18:18] Reset
                    TWI2_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [19:19] Reset
                    TWI3_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [20:31]
                    res1: u12 = 0,
                }), @ptrFromInt(0x200191c));

                /// SPI0 Clock Register
                pub const SPI0_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:7]
                    res0: u4 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0b000,

                        ///
                        PLL_PERI_1X = 0b001,

                        ///
                        PLL_PERI_2X = 0b010,

                        ///
                        PLL_AUDIO1_DIV2 = 0b011,

                        ///
                        PLL_AUDIO1_DIV5 = 0b100,
                    } = .HOSC,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001940));

                /// SPI1 Clock Register
                pub const SPI1_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:7]
                    res0: u4 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0b000,

                        ///
                        PLL_PERI_1X = 0b001,

                        ///
                        PLL_PERI_2X = 0b010,

                        ///
                        PLL_AUDIO1_DIV2 = 0b011,

                        ///
                        PLL_AUDIO1_DIV5 = 0b100,
                    } = .HOSC,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001944));

                /// SPI Bus Gating Reset Register
                pub const SPI_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    SPI0_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:1] Gating Clock
                    SPI1_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [2:15]
                    res0: u14 = 0,

                    /// [16:16] Reset
                    SPI0_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:17] Reset
                    SPI1_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [18:31]
                    res1: u14 = 0,
                }), @ptrFromInt(0x200196c));

                /// EMAC_25M Clock Register
                pub const EMAC_25M_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:30]
                    res0: u31 = 0,

                    /// [31:31] Gating Special Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,

                    /// [31:31] Gating the Source Clock of Special Clock
                    CLK_SRC_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001970));

                /// EMAC Bus Gating Reset Register
                pub const EMAC_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x200197c));

                /// IRTX Clock Register
                pub const IRTX_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:7]
                    res0: u4 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0,

                        ///
                        PLL_PERI_1X = 1,
                    } = .HOSC,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x20019c0));

                /// IRTX Bus Gating Reset Register
                pub const IRTX_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x20019cc));

                /// GPADC Bus Gating Reset Register
                pub const GPADC_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x20019ec));

                /// THS Bus Gating Reset Register
                pub const THS_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x20019fc));

                /// I2S Clock Register
                pub const I2S0_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_AUDIO0_1X = 0b00,

                        ///
                        PLL_AUDIO0_4X = 0b01,

                        ///
                        PLL_AUDIO1_DIV2 = 0b10,

                        ///
                        PLL_AUDIO1_DIV5 = 0b11,
                    } = .PLL_AUDIO0_1X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001a10));

                /// I2S Clock Register
                pub const I2S1_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_AUDIO0_1X = 0b00,

                        ///
                        PLL_AUDIO0_4X = 0b01,

                        ///
                        PLL_AUDIO1_DIV2 = 0b10,

                        ///
                        PLL_AUDIO1_DIV5 = 0b11,
                    } = .PLL_AUDIO0_1X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001a14));

                /// I2S Clock Register
                pub const I2S2_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_AUDIO0_1X = 0b00,

                        ///
                        PLL_AUDIO0_4X = 0b01,

                        ///
                        PLL_AUDIO1_DIV2 = 0b10,

                        ///
                        PLL_AUDIO1_DIV5 = 0b11,
                    } = .PLL_AUDIO0_1X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001a18));

                /// I2S_CLK group: I2S Clock Register
                pub const I2S_CLK = .{ I2S0_CLK, I2S1_CLK, I2S2_CLK };

                /// I2S2_ASRC Clock Register
                pub const I2S2_ASRC_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_AUDIO0_4X = 0b00,

                        ///
                        PLL_PERI_1X = 0b01,

                        ///
                        PLL_AUDIO1_DIV2 = 0b10,

                        ///
                        PLL_AUDIO1_DIV5 = 0b11,
                    } = .PLL_AUDIO0_4X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001a1c));

                /// I2S Bus Gating Reset Register
                pub const I2S_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    I2S0_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:1] Gating Clock
                    I2S1_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [2:2] Gating Clock
                    I2S2_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [3:15]
                    res0: u13 = 0,

                    /// [16:16] Reset
                    I2S0_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:17] Reset
                    I2S1_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [18:18] Reset
                    I2S2_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [19:31]
                    res1: u13 = 0,
                }), @ptrFromInt(0x2001a20));

                /// OWA_TX Clock Register
                pub const OWA_TX_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_AUDIO0_1X = 0b00,

                        ///
                        PLL_AUDIO0_4X = 0b01,

                        ///
                        PLL_AUDIO1_DIV2 = 0b10,

                        ///
                        PLL_AUDIO1_DIV5 = 0b11,
                    } = .PLL_AUDIO0_1X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001a24));

                /// OWA_RX Clock Register
                pub const OWA_RX_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_PERI_1X = 0b00,

                        ///
                        PLL_AUDIO1_DIV2 = 0b01,

                        ///
                        PLL_AUDIO1_DIV5 = 0b10,
                    } = .PLL_PERI_1X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001a28));

                /// OWA Bus Gating Reset Register
                pub const OWA_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001a2c));

                /// DMIC Clock Register
                pub const DMIC_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_PERI_1X = 0b00,

                        ///
                        PLL_AUDIO1_DIV2 = 0b01,

                        ///
                        PLL_AUDIO1_DIV5 = 0b10,
                    } = .PLL_PERI_1X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001a40));

                /// DMIC Bus Gating Reset Register
                pub const DMIC_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001a4c));

                /// AUDIO_CODEC_DAC Clock Register
                pub const AUDIO_CODEC_DAC_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_AUDIO0_1X = 0b00,

                        ///
                        PLL_AUDIO1_DIV2 = 0b01,

                        ///
                        PLL_AUDIO1_DIV5 = 0b10,
                    } = .PLL_AUDIO0_1X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001a50));

                /// AUDIO_CODEC_ADC Clock Register
                pub const AUDIO_CODEC_ADC_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_AUDIO0_1X = 0b00,

                        ///
                        PLL_AUDIO1_DIV2 = 0b01,

                        ///
                        PLL_AUDIO1_DIV5 = 0b10,
                    } = .PLL_AUDIO0_1X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001a54));

                /// AUDIO_CODEC Bus Gating Reset Register
                pub const AUDIO_CODEC_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001a5c));

                /// USB0 Clock Register
                pub const USB0_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23]
                    res0: u24 = 0,

                    /// [24:25] OHCI 12M Source Select
                    CLK12M_SEL: enum(u2) {
                        ///
                        DIV_48M = 0b00,

                        ///
                        DIV_24M = 0b01,

                        ///
                        RTC_32K = 0b10,
                    } = .DIV_48M,

                    /// [26:29]
                    res1: u4 = 0,

                    /// [30:30] PHY Reset
                    RSTN: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [31:31] Gating Special Clock
                    CLKEN: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001a70));

                /// USB1 Clock Register
                pub const USB1_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23]
                    res0: u24 = 0,

                    /// [24:25] OHCI 12M Source Select
                    CLK12M_SEL: enum(u2) {
                        ///
                        DIV_48M = 0b00,

                        ///
                        DIV_24M = 0b01,

                        ///
                        RTC_32K = 0b10,
                    } = .DIV_48M,

                    /// [26:29]
                    res1: u4 = 0,

                    /// [30:30] PHY Reset
                    RSTN: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [31:31] Gating Special Clock
                    CLKEN: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001a74));

                /// USB Bus Gating Reset Register
                pub const USB_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] USBOHCI Gating Clock
                    USBOHCI0_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:1] USBOHCI Gating Clock
                    USBOHCI1_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:4] USBEHCI Gating Clock
                    USBEHCI0_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [5:5] USBEHCI Gating Clock
                    USBEHCI1_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [6:7]
                    res1: u2 = 0,

                    /// [8:8] USBOTG0 Gating Clock
                    USBOTG0_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [9:15]
                    res2: u7 = 0,

                    /// [16:16] USBOHCI Reset
                    USBOHCI0_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:17] USBOHCI Reset
                    USBOHCI1_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [18:19]
                    res3: u2 = 0,

                    /// [20:20] USBEHCI Reset
                    USBEHCI0_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [21:21] USBEHCI Reset
                    USBEHCI1_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [22:23]
                    res4: u2 = 0,

                    /// [24:24] USBOTG0 Reset
                    USBOTG0_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [25:31]
                    res5: u7 = 0,
                }), @ptrFromInt(0x2001a8c));

                /// LRADC Bus Gating Reset Register
                pub const LRADC_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001a9c));

                /// DPSS_TOP Bus Gating Reset Register
                pub const DPSS_TOP_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001abc));

                /// DSI Clock Register
                pub const DSI_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:23]
                    res0: u20 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0b000,

                        ///
                        PLL_PERI_1X = 0b001,

                        ///
                        PLL_VIDEO0_2X = 0b010,

                        ///
                        PLL_VIDEO1_2X = 0b011,

                        ///
                        PLL_AUDIO1_DIV2 = 0b100,
                    } = .HOSC,

                    /// [27:30]
                    res1: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001b24));

                /// DSI Bus Gating Reset Register
                pub const DSI_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001b4c));

                /// TCONLCD Clock Register
                pub const TCONLCD_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:7]
                    res0: u4 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_VIDEO0_1X = 0b000,

                        ///
                        PLL_VIDEO0_4X = 0b001,

                        ///
                        PLL_VIDEO1_1X = 0b010,

                        ///
                        PLL_VIDEO1_4X = 0b011,

                        ///
                        PLL_PERI_2X = 0b100,

                        ///
                        PLL_AUDIO1_DIV2 = 0b101,
                    } = .PLL_VIDEO0_1X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001b60));

                /// TCONLCD Bus Gating Reset Register
                pub const TCONLCD_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001b7c));

                /// TCONTV Clock Register
                pub const TCONTV_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:7]
                    res0: u4 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_VIDEO0_1X = 0b000,

                        ///
                        PLL_VIDEO0_4X = 0b001,

                        ///
                        PLL_VIDEO1_1X = 0b010,

                        ///
                        PLL_VIDEO1_4X = 0b011,

                        ///
                        PLL_PERI_2X = 0b100,

                        ///
                        PLL_AUDIO1_DIV2 = 0b101,
                    } = .PLL_VIDEO0_1X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001b80));

                /// TCONTV Bus Gating Reset Register
                pub const TCONTV_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001b9c));

                /// LVDS Bus Gating Reset Register
                pub const LVDS_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001bac));

                /// TVE Clock Register
                pub const TVE_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:7]
                    res0: u4 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_VIDEO0_1X = 0b000,

                        ///
                        PLL_VIDEO0_4X = 0b001,

                        ///
                        PLL_VIDEO1_1X = 0b010,

                        ///
                        PLL_VIDEO1_4X = 0b011,

                        ///
                        PLL_PERI_2X = 0b100,

                        ///
                        PLL_AUDIO1_DIV2 = 0b101,
                    } = .PLL_VIDEO0_1X,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001bb0));

                /// TVE Bus Gating Reset Register
                pub const TVE_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    TOP_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:1] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [2:15]
                    res0: u14 = 0,

                    /// [16:16] Reset
                    TOP_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:17] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [18:31]
                    res1: u14 = 0,
                }), @ptrFromInt(0x2001bbc));

                /// TVD Clock Register
                pub const TVD_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:23]
                    res0: u19 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0b000,

                        ///
                        PLL_VIDEO0_1X = 0b001,

                        ///
                        PLL_VIDEO1_1X = 0b010,

                        ///
                        PLL_PERI_1X = 0b011,
                    } = .HOSC,

                    /// [27:30]
                    res1: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001bc0));

                /// TVD Bus Gating Reset Register
                pub const TVD_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    TOP_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:1] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [2:15]
                    res0: u14 = 0,

                    /// [16:16] Reset
                    TOP_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:17] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [18:31]
                    res1: u14 = 0,
                }), @ptrFromInt(0x2001bdc));

                /// LEDC Clock Register
                pub const LEDC_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:7]
                    res0: u4 = 0,

                    /// [8:9] Factor N
                    FACTOR_N: enum(u2) {
                        ///
                        N1 = 0b00,

                        ///
                        N2 = 0b01,

                        ///
                        N4 = 0b10,

                        ///
                        N8 = 0b11,
                    } = .N1,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0,

                        ///
                        PLL_PERI_1X = 1,
                    } = .HOSC,

                    /// [27:30]
                    res2: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001bf0));

                /// LEDC Bus Gating Reset Register
                pub const LEDC_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001bfc));

                /// CSI Clock Register
                pub const CSI_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Factor M
                    FACTOR_M: u4 = 0,

                    /// [4:23]
                    res0: u20 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_PERI_2X = 0b000,

                        ///
                        PLL_VIDEO0_2X = 0b001,

                        ///
                        PLL_VIDEO1_2X = 0b010,
                    } = .PLL_PERI_2X,

                    /// [27:30]
                    res1: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001c04));

                /// CSI Master Clock Register
                pub const CSI_MASTER_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:23]
                    res0: u19 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0b000,

                        ///
                        PLL_PERI_1X = 0b001,

                        ///
                        PLL_VIDEO0_1X = 0b010,

                        ///
                        PLL_VIDEO1_1X = 0b011,

                        ///
                        PLL_AUDIO1_DIV2 = 0b100,

                        ///
                        PLL_AUDIO1_DIV5 = 0b101,
                    } = .HOSC,

                    /// [27:30]
                    res1: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001c08));

                /// CSI Bus Gating Reset Register
                pub const CSI_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001c1c));

                /// TPADC Clock Register
                pub const TPADC_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23]
                    res0: u24 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0,

                        ///
                        PLL_AUDIO0_1X = 1,
                    } = .HOSC,

                    /// [27:30]
                    res1: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001c50));

                /// TPADC Bus Gating Reset Register
                pub const TPADC_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001c5c));

                /// DSP Clock Register
                pub const DSP_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    FACTOR_M: u5 = 0,

                    /// [5:23]
                    res0: u19 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0b000,

                        ///
                        CLK32K = 0b001,

                        ///
                        CLK16M_RC = 0b010,

                        ///
                        PLL_PERI_2X = 0b011,

                        ///
                        PLL_AUDIO1_DIV2 = 0b100,
                    } = .HOSC,

                    /// [27:30]
                    res1: u4 = 0,

                    /// [31:31] Gating Clock
                    CLK_GATING: enum(u1) {
                        ///
                        Off = 0,

                        ///
                        On = 1,
                    } = .Off,
                }), @ptrFromInt(0x2001c70));

                /// DSP Bus Gating Reset Register
                pub const DSP_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] Gating Clock
                    CFG_GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [2:15]
                    res1: u14 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:17] Reset
                    CFG_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [18:18] Reset
                    DBG_RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [19:31]
                    res2: u13 = 0,
                }), @ptrFromInt(0x2001c7c));

                /// RISC-V Clock Register
                pub const RISCV_CLK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    DIV_CFG: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    AXI_DIV_CFG: u2 = 0,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:26] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        HOSC = 0b000,

                        ///
                        CLK32K = 0b001,

                        ///
                        CLK16M_RC = 0b010,

                        ///
                        PLL_PERI_800M = 0b011,

                        ///
                        PLL_PERI_1X = 0b100,

                        ///
                        PLL_CPU = 0b101,

                        ///
                        PLL_AUDIO1_DIV2 = 0b110,
                    } = .HOSC,

                    /// [27:31]
                    res2: u5 = 0,
                }), @ptrFromInt(0x2001d00));

                /// RISC-V GATING Configuration Register
                pub const RISCV_GATING = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    GATING_FIELD: u16 = 0,

                    /// [16:30]
                    res0: u15 = 0,

                    /// [31:31] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,
                }), @ptrFromInt(0x2001d04));

                /// RISC-V_CFG Bus Gating Reset Register
                pub const RISCV_CFG_BGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating Clock
                    GATING: enum(u1) {
                        ///
                        Mask = 0,

                        ///
                        Pass = 1,
                    } = .Mask,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:16] Reset
                    RST: enum(u1) {
                        ///
                        Assert = 0,

                        ///
                        Deassert = 1,
                    } = .Assert,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2001d0c));

                /// PLL Lock Debug Control Register
                pub const PLL_LOCK_DBG_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:19]
                    res0: u20 = 0,

                    /// [20:22] Clock Source Select
                    CLK_SRC_SEL: enum(u3) {
                        ///
                        PLL_CPUX = 0b000,

                        ///
                        PLL_DDR = 0b001,

                        ///
                        PLL_PERI_2X = 0b010,

                        ///
                        PLL_VIDEO0_4X = 0b011,

                        ///
                        PLL_VIDEO1_4X = 0b100,

                        ///
                        PLL_VE = 0b101,

                        ///
                        PLL_AUDIO0 = 0b110,

                        ///
                        PLL_AUDIO1 = 0b111,
                    } = .PLL_CPUX,

                    /// [23:30]
                    res1: u8 = 0,

                    /// [31:31] Debug Enable
                    PLL_LOCK_FLAG_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,
                }), @ptrFromInt(0x2001f04));

                /// Frequency Detect Control Register
                pub const FRE_DET_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Frequence Detect Function Enable
                    FRE_DET_FUN_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [1:1] Frequence Detect IRQ Enable
                    FRE_DET_IRQ_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:8] Detect Time
                    DET_TIME: u5 = 0,

                    /// [9:30]
                    res1: u22 = 0,

                    /// [31:31] Error Flag
                    ERROR_FLAG: enum(u1) {
                        ///
                        W0C = 0,

                        ///
                        Error = 1,
                    } = .W0C,
                }), @ptrFromInt(0x2001f08));

                /// Frequency Up Limit Register
                pub const FRE_UP_LIM = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2001f0c));

                /// Frequency Down Limit Register
                pub const FRE_DOWN_LIM = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2001f10));

                /// CCU FANOUT CLOCK GATE Register
                pub const CCU_FAN_GATE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Gating for CLK24M
                    CLK24M_EN: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,

                    /// [1:1] Gating for CLK12M
                    CLK12M_EN: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,

                    /// [2:2] Gating for CLK16M
                    CLK16M_EN: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,

                    /// [3:3] Gating for CLK25M
                    CLK25M_EN: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,

                    /// [4:4] Gating for CLK32K
                    CLK32K_EN: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x2001f30));

                /// CLK27M FANOUT Register
                pub const CLK27M_FAN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    DIV0: u5 = 0,

                    /// [5:7]
                    res0: u3 = 0,

                    /// [8:9] Factor N
                    DIV1: u2 = 0,

                    /// [10:23]
                    res1: u14 = 0,

                    /// [24:25] Clock Source Select
                    CLK_SRC_SEL: enum(u2) {
                        ///
                        PLL_VIDEO0_1X = 0,

                        ///
                        PLL_VIDEO1_1X = 1,
                    } = .PLL_VIDEO0_1X,

                    /// [26:30]
                    res2: u5 = 0,

                    /// [31:31] Gating for CLK27M
                    GATING: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,
                }), @ptrFromInt(0x2001f34));

                /// PCLK FANOUT Register
                pub const PCLK_FAN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4] Factor M
                    DIV: u5 = 0,

                    /// [5:30]
                    res0: u26 = 0,

                    /// [31:31] Gating for PCLK
                    GATING: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,
                }), @ptrFromInt(0x2001f38));

                /// CCU FANOUT Register
                pub const CCU_FAN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:2]
                    CLK_FANOUT0_SEL: enum(u3) {
                        ///
                        CLK32K = 0b000,

                        ///
                        CLK12M = 0b001,

                        ///
                        CLK16M = 0b010,

                        ///
                        CLK24M = 0b011,

                        ///
                        CLK25M = 0b100,

                        ///
                        CLK27M = 0b101,

                        ///
                        PCLK = 0b110,
                    } = .CLK32K,

                    /// [3:5]
                    CLK_FANOUT1_SEL: enum(u3) {
                        ///
                        CLK32K = 0b000,

                        ///
                        CLK12M = 0b001,

                        ///
                        CLK16M = 0b010,

                        ///
                        CLK24M = 0b011,

                        ///
                        CLK25M = 0b100,

                        ///
                        CLK27M = 0b101,

                        ///
                        PCLK = 0b110,
                    } = .CLK32K,

                    /// [6:8]
                    CLK_FANOUT2_SEL: enum(u3) {
                        ///
                        CLK32K = 0b000,

                        ///
                        CLK12M = 0b001,

                        ///
                        CLK16M = 0b010,

                        ///
                        CLK24M = 0b011,

                        ///
                        CLK25M = 0b100,

                        ///
                        CLK27M = 0b101,

                        ///
                        PCLK = 0b110,
                    } = .CLK32K,

                    /// [9:20]
                    res0: u12 = 0,

                    /// [21:21] Gating for CLK_FANOUT
                    CLK_FANOUT0_EN: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,

                    /// [22:22] Gating for CLK_FANOUT
                    CLK_FANOUT1_EN: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,

                    /// [23:23] Gating for CLK_FANOUT
                    CLK_FANOUT2_EN: enum(u1) {
                        ///
                        OFF = 0,

                        ///
                        ON = 1,
                    } = .OFF,

                    /// [24:31]
                    res1: u8 = 0,
                }), @ptrFromInt(0x2001f3c));
            };

            /// System Configuration
            pub const SYS_CFG = struct {
                /// DSP Boot SRAM Remap Control Register
                pub const DSP_BOOT_RAMMAP = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    DSP_BOOT_SRAM_REMAP_ENABLE: enum(u1) {
                        ///
                        DSP_SYS = 0,

                        ///
                        SYS_BOOT = 1,
                    } = .DSP_SYS,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x3000008));

                /// Version Register
                pub const VER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    res0: u8 = 0,

                    /// [8:8] Fel Select Pin Status
                    FEL_SEL_PAD_STA: enum(u1) {
                        ///
                        RUN_FEL = 0,

                        ///
                        TRY_MEDIA_BOOT = 1,
                    } = .RUN_FEL,

                    /// [9:10]
                    res1: u2 = 0,

                    /// [11:12]
                    BOOT_SEL_PAD_STA: u2 = 0,

                    /// [13:31]
                    res2: u19 = 0,
                }), @ptrFromInt(0x3000024));

                /// EMAC-EPHY Clock Register 0
                pub const EMAC_EPHY_CLK0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1]
                    ETCS: enum(u2) {
                        ///
                        MII = 0b00,

                        ///
                        External_GMII_RGMII = 0b01,

                        ///
                        Internal_GMII_RGMII = 0b10,
                    } = .MII,

                    /// [2:2]
                    EPIT: enum(u1) {
                        ///
                        MII = 0,

                        ///
                        RGMII = 1,
                    } = .MII,

                    /// [3:3]
                    ETXIE: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [4:4]
                    ERXIE: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [5:9]
                    ERXDC: u5 = 0,

                    /// [10:12]
                    ETXDC: u3 = 0,

                    /// [13:13]
                    RMII_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [14:14]
                    res0: u1 = 0,

                    /// [15:15]
                    PHY_SELECT: enum(u1) {
                        ///
                        External = 0,

                        ///
                        Internal = 1,
                    } = .External,

                    /// [16:16]
                    SHUTDOWN: enum(u1) {
                        ///
                        Power_up = 0,

                        ///
                        Shut_down = 1,
                    } = .Power_up,

                    /// [17:17]
                    LED_POL: enum(u1) {
                        ///
                        High = 0,

                        ///
                        Low = 1,
                    } = .High,

                    /// [18:18]
                    CLK_SEL: enum(u1) {
                        ///
                        F25M = 0,

                        ///
                        F24M = 1,
                    } = .F25M,

                    /// [19:19]
                    res1: u1 = 0,

                    /// [20:24]
                    PHY_ADDR: u5 = 0,

                    /// [25:26]
                    EPHY_MODE: enum(u2) {
                        ///
                        Normal = 0b00,

                        ///
                        Simulation = 0b01,

                        ///
                        AFE_Test = 0b10,
                    } = .Normal,

                    /// [27:27]
                    XMII_SEL: enum(u1) {
                        ///
                        Internal = 0,

                        ///
                        External = 1,
                    } = .Internal,

                    /// [28:31]
                    BPS_EFUSE: u4 = 0,
                }), @ptrFromInt(0x3000030));

                /// System LDO Control Register
                pub const SYS_LDO_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    LDOA_TRIM: enum(u8) {
                        ///
                        O1_593 = 0b00000,

                        ///
                        O1_607 = 0b00001,

                        ///
                        O1_627 = 0b00010,

                        ///
                        O1_64 = 0b00011,

                        ///
                        O1_653 = 0b00100,

                        ///
                        O1_667 = 0b00101,

                        ///
                        O1_680 = 0b00110,

                        ///
                        O1_693 = 0b00111,

                        ///
                        O1_707 = 0b01000,

                        ///
                        O1_720 = 0b01001,

                        ///
                        O1_733 = 0b01010,

                        ///
                        O1_747 = 0b01011,

                        ///
                        O1_76 = 0b01100,

                        ///
                        O1_773 = 0b01101,

                        ///
                        O1_787 = 0b01110,

                        ///
                        O1_8 = 0b01111,

                        ///
                        O1_813 = 0b10000,

                        ///
                        O1_827 = 0b10001,

                        ///
                        O1_84 = 0b10010,

                        ///
                        O1_853 = 0b10011,

                        ///
                        O1_867 = 0b10100,

                        ///
                        O1_88 = 0b10101,

                        ///
                        O1_893 = 0b10110,

                        ///
                        O1_907 = 0b10111,

                        ///
                        O1_92 = 0b11000,

                        ///
                        O1_933 = 0b11001,

                        ///
                        O1_947 = 0b11010,

                        ///
                        O1_96 = 0b11011,

                        ///
                        O1_973 = 0b11100,

                        ///
                        O1_987 = 0b11101,

                        ///
                        O2 = 0b11110,

                        ///
                        O2_013 = 0b11111,
                    } = .O1_593,

                    /// [8:15]
                    LDOB_TRIM: enum(u8) {
                        ///
                        O1_167 = 0b000000,

                        ///
                        O1_18 = 0b000001,

                        ///
                        O1_193 = 0b000010,

                        ///
                        O1_207 = 0b000011,

                        ///
                        O1_22 = 0b000100,

                        ///
                        O1_233 = 0b000101,

                        ///
                        O1_247 = 0b000110,

                        ///
                        O1_260 = 0b000111,

                        ///
                        O1_273 = 0b001000,

                        ///
                        O1_287 = 0b001001,

                        ///
                        O1_3 = 0b001010,

                        ///
                        O1_313 = 0b001011,

                        ///
                        O1_327 = 0b001100,

                        ///
                        O1_340 = 0b001101,

                        ///
                        O1_353 = 0b001110,

                        ///
                        O1_367 = 0b001111,

                        ///
                        O1_38 = 0b010000,

                        ///
                        O1_393 = 0b010001,

                        ///
                        O1_407 = 0b010010,

                        ///
                        O1_42 = 0b010011,

                        ///
                        O1_433 = 0b010100,

                        ///
                        O1_447 = 0b010101,

                        ///
                        O1_46 = 0b010110,

                        ///
                        O1_473 = 0b010111,

                        ///
                        O1_487 = 0b011000,

                        ///
                        O1_5 = 0b011001,

                        ///
                        O1_513 = 0b011010,

                        ///
                        O1_527 = 0b011011,

                        ///
                        O1_54 = 0b011100,

                        ///
                        O1_553 = 0b011101,

                        ///
                        O1_567 = 0b011110,

                        ///
                        O1_58 = 0b011111,

                        ///
                        O1_593 = 0b100000,

                        ///
                        O1_607 = 0b100001,

                        ///
                        O1_627 = 0b100010,

                        ///
                        O1_64 = 0b100011,

                        ///
                        O1_653 = 0b100100,

                        ///
                        O1_667 = 0b100101,

                        ///
                        O1_680 = 0b100110,

                        ///
                        O1_693 = 0b100111,

                        ///
                        O1_707 = 0b101000,

                        ///
                        O1_720 = 0b101001,

                        ///
                        O1_733 = 0b101010,

                        ///
                        O1_747 = 0b101011,

                        ///
                        O1_76 = 0b101100,

                        ///
                        O1_773 = 0b101101,

                        ///
                        O1_787 = 0b101110,

                        ///
                        O1_8 = 0b101111,

                        ///
                        O1_813 = 0b110000,

                        ///
                        O1_827 = 0b110001,

                        ///
                        O1_84 = 0b110010,

                        ///
                        O1_853 = 0b110011,

                        ///
                        O1_867 = 0b110100,

                        ///
                        O1_88 = 0b110101,

                        ///
                        O1_893 = 0b110110,

                        ///
                        O1_907 = 0b110111,

                        ///
                        O1_92 = 0b111000,

                        ///
                        O1_933 = 0b111001,

                        ///
                        O1_947 = 0b111010,

                        ///
                        O1_96 = 0b111011,

                        ///
                        O1_973 = 0b111100,

                        ///
                        O1_987 = 0b111101,

                        ///
                        O2 = 0b111110,

                        ///
                        O2_013 = 0b111111,
                    } = .O1_167,

                    /// [16:23]
                    res0: u8 = 0,

                    /// [24:31]
                    SPARE: u8 = 0,
                }), @ptrFromInt(0x3000150));

                /// Resistor Calibration Control Register
                pub const RESCAL_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Auto Calibration Enable
                    CAL_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [1:1] Calibration Circuits Analog Enable
                    CAL_ANA_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [2:2] RESCAL Calibration Mode Select
                    RESCAL_MODE: enum(u1) {
                        ///
                        Auto_Calibration = 0,
                    } = .Auto_Calibration,

                    /// [3:7]
                    res0: u5 = 0,

                    /// [8:8] 240ohms Resistor Trimming Source Select
                    DDR_RES240_Trimming_SEL: enum(u1) {
                        ///
                        RESCAL = 0,

                        ///
                        RES240_TRIM = 1,
                    } = .RESCAL,

                    /// [9:31]
                    res1: u23 = 0,
                }), @ptrFromInt(0x3000160));

                /// 240ohms Resistor Manual Control Register
                pub const RES240_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] 240ohms Resistor trimming bit
                    DDR_RES240_TRIM: u6 = 0,

                    /// [6:31]
                    res0: u26 = 0,
                }), @ptrFromInt(0x3000168));

                /// Resistor Calibration Status Register
                pub const RESCAL_STATUS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] RESCAL Calibration Results Output
                    RES_CAL_DO: u6 = 0,

                    /// [6:7]
                    res0: u2 = 0,

                    /// [8:8] Calibration Circuits Analog COmpare Output
                    COUT: u1 = 0,

                    /// [9:31]
                    res1: u23 = 0,
                }), @ptrFromInt(0x300016c));
            };

            /// RISC-V System Configuration
            pub const RISCV_CFG = struct {
                /// RISCV Start Address0 Register
                pub const RISCV_STA_ADD0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010004));

                /// RISCV Start Address1 Register
                pub const RISCV_STA_ADD1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Start Address High 8-bit
                    STA_ADD_H: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x6010008));

                /// RF1P Configuration Register
                pub const RF1P_CFG_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] RF1P Configuration
                    RF1P_CFG: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x6010010));

                /// ROM Configuration Register
                pub const ROM_CFG_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] ROM Configuration
                    ROM_CFG: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x601001c));

                /// Wakeup Enable Register
                pub const WAKEUP_EN_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Wakeup Enable
                    WP_EN: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x6010020));

                /// Wakeup Mask Register
                pub const WAKEUP_MASK0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010024));

                /// Wakeup Mask Register
                pub const WAKEUP_MASK1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010028));

                /// Wakeup Mask Register
                pub const WAKEUP_MASK2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601002c));

                /// Wakeup Mask Register
                pub const WAKEUP_MASK3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010030));

                /// Wakeup Mask Register
                pub const WAKEUP_MASK4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010034));

                /// WAKEUP_MASK_REG group: Wakeup Mask Register
                pub const WAKEUP_MASK_REG = .{ WAKEUP_MASK0_REG, WAKEUP_MASK1_REG, WAKEUP_MASK2_REG, WAKEUP_MASK3_REG, WAKEUP_MASK4_REG };

                /// Timestamp Test Mode Select Register
                pub const TS_TMODE_SEL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Timestamp Test Mode Enable
                    TS_TEST_MODE_EN: enum(u1) {
                        ///
                        Normal = 0,

                        ///
                        Test = 1,
                    } = .Normal,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x6010040));

                /// SRAM Address Twist Register
                pub const SRAM_ADDR_TWIST_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] SRAM Address Twist Flag
                    SRAM_ADDR_TS_FG: u1 = 0,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:31] SRAM Twist Keyfield
                    SRAM_TS_KF: u16 = 0,
                }), @ptrFromInt(0x6010044));

                /// Work Mode Register
                pub const WORK_MODE_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Work Mode Status
                    WM_STA: enum(u2) {
                        ///
                        Normal = 0b00,

                        ///
                        Low_Power = 0b01,

                        ///
                        Debug = 0b10,
                    } = .Normal,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x6010048));

                /// Retire PC0 Register
                pub const RETITE_PC0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010050));

                /// Retire PC1 Register
                pub const RETITE_PC1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Retire PC[39:32]
                    RT_PC_H: u8 = 0,

                    /// [8:30]
                    res0: u23 = 0,

                    /// [31:31] Retire Signal
                    RT_SIG: enum(u1) {
                        ///
                        not_have = 0,

                        ///
                        have = 1,
                    } = .not_have,
                }), @ptrFromInt(0x6010054));

                /// IRQ Mode Register
                pub const IRQ_MODE0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010060));

                /// IRQ Mode Register
                pub const IRQ_MODE1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010064));

                /// IRQ Mode Register
                pub const IRQ_MODE2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010068));

                /// IRQ Mode Register
                pub const IRQ_MODE3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601006c));

                /// IRQ Mode Register
                pub const IRQ_MODE4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010070));

                /// IRQ_MODE_REG group: IRQ Mode Register
                pub const IRQ_MODE_REG = .{ IRQ_MODE0_REG, IRQ_MODE1_REG, IRQ_MODE2_REG, IRQ_MODE3_REG, IRQ_MODE4_REG };

                /// RISCV AXI PMU Control Register
                pub const RISCV_AXI_PMU_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PMU Enable
                    PMU_EN: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [1:1] PMU Clear
                    PMU_CLR: enum(u1) {
                        ///
                        no_operation = 0,

                        ///
                        cleared = 1,
                    } = .no_operation,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x6010104));

                /// RISCV AXI PMU Period Register
                pub const RISCV_AXI_PMU_PRD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010108));

                /// RISCV AXI PMU Read Latency Register
                pub const RISCV_AXI_PMU_LAT_RD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601010c));

                /// RISCV AXI PMU Write Latency Register
                pub const RISCV_AXI_PMU_LAT_WR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010110));

                /// RISCV AXI PMU Read Request Register
                pub const RISCV_AXI_PMU_REQ_RD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010114));

                /// RISCV AXI PMU Write Request Register
                pub const RISCV_AXI_PMU_REQ_WR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010118));

                /// RISCV AXI PMU Read Bandwidth Register
                pub const RISCV_AXI_PMU_BW_RD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601011c));

                /// RISCV AXI PMU Write Bandwidth Register
                pub const RISCV_AXI_PMU_BW_WR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x6010120));
            };

            /// Core-Local Interruptor
            pub const CLINT = struct {
                /// MSIP Register for hart 0
                pub const msip = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x14000000));

                /// MTIMECMPL Register for hart 0
                pub const mtimecmpl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x14004000));

                /// MTIMECMPH Register for hart 0
                pub const mtimecmph = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x14004004));

                /// MTIME\n\nREF: opensbi
                pub const mtime = @as(*volatile mmio.Mmio(packed struct(u64) {
                    /// [0:63]
                    raw: u64 = 0,
                }), @ptrFromInt(0x1400bff8));

                /// SSIP Register for hart 0
                pub const ssip = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1400c000));

                /// STIMECMPL Register for hart 0
                pub const stimecmpl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1400d000));

                /// STIMECMPH Register for hart 0
                pub const stimecmph = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1400d004));
            };

            /// Timer Module, includes timer0, timer1, watchdog and audio video synchronization
            pub const TIMER = struct {
                /// Timer IRQ Enable Register
                pub const tmr_irq_en = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    tmr0_irq_en: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [1:1]
                    tmr1_irq_en: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2050000));

                /// Timer Status Register
                pub const tmr_irq_sta = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    tmr0_irq_pend: enum(u1) {
                        ///
                        no_effect = 0,

                        /// Indicates that the interval value of the timer 0 is reached. Write 1 to clear the pending status.
                        pending = 1,
                    } = .no_effect,

                    /// [1:1]
                    tmr1_irq_pend: enum(u1) {
                        ///
                        no_effect = 0,

                        /// Indicates that the interval value of the timer 1 is reached. Write 1 to clear the pending status.
                        pending = 1,
                    } = .no_effect,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2050004));

                /// Timer IRQ Enable Register
                pub const tmr0_ctrl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    tmr_en: enum(u1) {
                        ///
                        stop_pause = 0,

                        ///
                        start = 1,
                    } = .stop_pause,

                    /// [1:1]
                    tmr_reload: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        reload = 1,
                    } = .no_effect,

                    /// [2:3]
                    tmr_clk_src: enum(u2) {
                        ///
                        losc = 0,

                        ///
                        osc24_m = 1,
                    } = .losc,

                    /// [4:6]
                    tmr_clk_pres: enum(u3) {
                        ///
                        P1 = 0b000,

                        ///
                        P2 = 0b001,

                        ///
                        P4 = 0b010,

                        ///
                        P8 = 0b011,

                        ///
                        P16 = 0b100,

                        ///
                        P32 = 0b101,

                        ///
                        P64 = 0b110,

                        ///
                        P128 = 0b111,
                    } = .P1,

                    /// [7:7]
                    tmr_mode: enum(u1) {
                        ///
                        periodic = 0,

                        ///
                        single_counting = 1,
                    } = .periodic,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2050010));

                /// Timer IRQ Enable Register
                pub const tmr1_ctrl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    tmr_en: enum(u1) {
                        ///
                        stop_pause = 0,

                        ///
                        start = 1,
                    } = .stop_pause,

                    /// [1:1]
                    tmr_reload: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        reload = 1,
                    } = .no_effect,

                    /// [2:3]
                    tmr_clk_src: enum(u2) {
                        ///
                        losc = 0,

                        ///
                        osc24_m = 1,
                    } = .losc,

                    /// [4:6]
                    tmr_clk_pres: enum(u3) {
                        ///
                        P1 = 0b000,

                        ///
                        P2 = 0b001,

                        ///
                        P4 = 0b010,

                        ///
                        P8 = 0b011,

                        ///
                        P16 = 0b100,

                        ///
                        P32 = 0b101,

                        ///
                        P64 = 0b110,

                        ///
                        P128 = 0b111,
                    } = .P1,

                    /// [7:7]
                    tmr_mode: enum(u1) {
                        ///
                        periodic = 0,

                        ///
                        single_counting = 1,
                    } = .periodic,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2050014));

                /// tmr_ctrl group: Timer IRQ Enable Register
                pub const tmr_ctrl = .{ tmr0_ctrl, tmr1_ctrl };

                /// Timer Interval Value Register
                pub const tmr0_intv_value = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2050014));

                /// Timer Interval Value Register
                pub const tmr1_intv_value = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2050018));

                /// tmr_intv_value group: Timer Interval Value Register
                pub const tmr_intv_value = .{ tmr0_intv_value, tmr1_intv_value };

                /// Timer Current Value Register
                pub const tmr0_cur_value = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2050018));

                /// Timer Current Value Register
                pub const tmr1_cur_value = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x205001c));

                /// tmr_cur_value group: Timer Current Value Register
                pub const tmr_cur_value = .{ tmr0_cur_value, tmr1_cur_value };

                /// Watchdog IRQ Enable Register
                pub const wdog_irq_en = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    wdog_irq_en: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x20500a0));

                /// Watchdog Status Register
                pub const wdog_irq_sta = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    wdog_irq_pend: enum(u1) {
                        ///
                        no_effect = 0,

                        /// Indicates that the interval value of the watchdog is reached.
                        pending = 1,
                    } = .no_effect,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x20500a4));

                /// Watchdog Software Reset Register
                pub const wdog_soft_rst = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Soft Reset Enable
                    SOFT_RST_EN: enum(u1) {
                        ///
                        Deassert = 0,

                        ///
                        Reset = 1,
                    } = .Deassert,

                    /// [1:15]
                    res0: u15 = 0,

                    /// [16:31] Key Field
                    KEY_FIELD: u16 = 0,
                }), @ptrFromInt(0x20500a8));

                /// Watchdog Control Register
                pub const wdog_ctrl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Watchdog Restart
                    WDOG_RESTART: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        restart = 1,
                    } = .no_effect,

                    /// [1:12] Watchdog Key Field
                    WDOG_KEY_FIELD: u12 = 0,

                    /// [13:31]
                    res0: u19 = 0,
                }), @ptrFromInt(0x20500b0));

                /// Watchdog Configuration Register
                pub const wdog_cfg = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Configure the operating mode for the watchdog
                    WDOG_MODE: enum(u2) {
                        ///
                        whold_system = 0b01,

                        ///
                        only_interrupt = 0b10,
                    } = .whold_system,

                    /// [2:7]
                    res0: u6 = 0,

                    /// [8:8] Select the clock source for the watchdog.
                    WDOG_CLK_SRC: enum(u1) {
                        ///
                        HOSC_32K = 0,

                        ///
                        LOSC_32K = 1,
                    } = .HOSC_32K,

                    /// [9:15]
                    res1: u7 = 0,

                    /// [16:31] Key Field
                    KEY_FIELD: u16 = 0,
                }), @ptrFromInt(0x20500b4));

                /// Watchdog Mode Register
                pub const wdog_mode = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Watchdog Enable
                    WDOG_EN: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        enable = 1,
                    } = .no_effect,

                    /// [1:3]
                    res0: u3 = 0,

                    /// [4:7] Watchdog Interval Value
                    WDOG_INTV_VALUE: enum(u4) {
                        ///
                        C16000 = 0b0000,

                        ///
                        C32000 = 0b0001,

                        ///
                        C64000 = 0b0010,

                        ///
                        C96000 = 0b0011,

                        ///
                        C128000 = 0b0100,

                        ///
                        C160000 = 0b0101,

                        ///
                        C192000 = 0b0110,

                        ///
                        C256000 = 0b0111,

                        ///
                        C320000 = 0b1000,

                        ///
                        C384000 = 0b1001,

                        ///
                        C448000 = 0b1010,

                        ///
                        C512000 = 0b1011,
                    } = .C16000,

                    /// [8:15]
                    res1: u8 = 0,

                    /// [16:31] Key Field
                    KEY_FIELD: u16 = 0,
                }), @ptrFromInt(0x20500b8));

                /// Watchdog Output Configuration Register
                pub const wdog_output_cfg = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:11] Configure the valid time for the watchdog reset signal.
                    WDOG_OUTPUT_CONFIG: u12 = 0,

                    /// [12:31]
                    res0: u20 = 0,
                }), @ptrFromInt(0x20500bc));

                /// AVS Counter Control Register
                pub const avs_cnt_ctl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Audio Video Sync Counter Enable
                    AVS_CNT0_EN: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [1:1] Audio Video Sync Counter Enable
                    AVS_CNT1_EN: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [2:7]
                    res0: u6 = 0,

                    /// [8:8] Audio Video Sync Counter Pause Control
                    AVS_CNT0_PS: enum(u1) {
                        ///
                        not_pause = 0,

                        ///
                        pause = 1,
                    } = .not_pause,

                    /// [9:9] Audio Video Sync Counter Pause Control
                    AVS_CNT1_PS: enum(u1) {
                        ///
                        not_pause = 0,

                        ///
                        pause = 1,
                    } = .not_pause,

                    /// [10:31]
                    res1: u22 = 0,
                }), @ptrFromInt(0x20500c0));

                /// AVS Counter 0 Register
                pub const avs_cnt0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20500c4));

                /// AVS Counter 1 Register
                pub const avs_cnt1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20500c8));

                /// AVS Counter Divisor Register
                pub const avs_cnt_div = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:11] The divisor factor of AVS
                    AVS_CNT0_D: u12 = 0,

                    /// [12:23] The divisor factor of AVS
                    AVS_CNT1_D: u12 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x20500cc));
            };

            /// High Speed Timer
            pub const HSTimer = struct {
                /// HS Timer IRQ Enable Register
                pub const HS_TMR_IRQ_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] HSTimer Interrupt Enable
                    HS_TMR0_INT_EN: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [1:1] HSTimer Interrupt Enable
                    HS_TMR1_INT_EN: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x3008000));

                /// HS Timer Status Register
                pub const HS_TMR_IRQ_STAS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] HSTimer IRQ Pending
                    HS_TMR0_IRQ_PEND: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        pending = 1,
                    } = .no_effect,

                    /// [1:1] HSTimer IRQ Pending
                    HS_TMR1_IRQ_PEND: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        pending = 1,
                    } = .no_effect,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x3008004));

                /// HS Timer Control Register
                pub const HS_TMR0_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] HSTimer Enable
                    HS_TMR_EN: enum(u1) {
                        ///
                        stop_pause = 0,

                        ///
                        start = 1,
                    } = .stop_pause,

                    /// [1:1] HSTimer Reload
                    HS_TMR_RELOAD: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        reload = 1,
                    } = .no_effect,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:6] Select the pre-scale for the HSTimer clock sources
                    HS_TMR_CLK: enum(u3) {
                        ///
                        P1 = 0b000,

                        ///
                        P2 = 0b001,

                        ///
                        P4 = 0b010,

                        ///
                        P8 = 0b011,

                        ///
                        P16 = 0b100,
                    } = .P1,

                    /// [7:7] Select the timing mode for HSTimer
                    HS_TMR_MODE: enum(u1) {
                        ///
                        periodic = 0,

                        ///
                        one_shot = 1,
                    } = .periodic,

                    /// [8:30]
                    res1: u23 = 0,

                    /// [31:31] Select the operating mode for HSTimer
                    HS_TMR_TEST: enum(u1) {
                        ///
                        Normal = 0,

                        ///
                        Test = 1,
                    } = .Normal,
                }), @ptrFromInt(0x3008020));

                /// HS Timer Control Register
                pub const HS_TMR1_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] HSTimer Enable
                    HS_TMR_EN: enum(u1) {
                        ///
                        stop_pause = 0,

                        ///
                        start = 1,
                    } = .stop_pause,

                    /// [1:1] HSTimer Reload
                    HS_TMR_RELOAD: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        reload = 1,
                    } = .no_effect,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:6] Select the pre-scale for the HSTimer clock sources
                    HS_TMR_CLK: enum(u3) {
                        ///
                        P1 = 0b000,

                        ///
                        P2 = 0b001,

                        ///
                        P4 = 0b010,

                        ///
                        P8 = 0b011,

                        ///
                        P16 = 0b100,
                    } = .P1,

                    /// [7:7] Select the timing mode for HSTimer
                    HS_TMR_MODE: enum(u1) {
                        ///
                        periodic = 0,

                        ///
                        one_shot = 1,
                    } = .periodic,

                    /// [8:30]
                    res1: u23 = 0,

                    /// [31:31] Select the operating mode for HSTimer
                    HS_TMR_TEST: enum(u1) {
                        ///
                        Normal = 0,

                        ///
                        Test = 1,
                    } = .Normal,
                }), @ptrFromInt(0x3008024));

                /// HS_TMR_CTRL group: HS Timer Control Register
                pub const HS_TMR_CTRL = .{ HS_TMR0_CTRL, HS_TMR1_CTRL };

                /// HS Timer Interval Value Low Register
                pub const HS_TMR0_INTV_LO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3008024));

                /// HS Timer Interval Value Low Register
                pub const HS_TMR1_INTV_LO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3008028));

                /// HS_TMR_INTV_LO group: HS Timer Interval Value Low Register
                pub const HS_TMR_INTV_LO = .{ HS_TMR0_INTV_LO, HS_TMR1_INTV_LO };

                /// HS Timer Interval Value High Register
                pub const HS_TMR0_INTV_HI = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23]
                    HS_TMR_INTV_VALUE_HI: u24 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x3008028));

                /// HS Timer Interval Value High Register
                pub const HS_TMR1_INTV_HI = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23]
                    HS_TMR_INTV_VALUE_HI: u24 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x300802c));

                /// HS_TMR_INTV_HI group: HS Timer Interval Value High Register
                pub const HS_TMR_INTV_HI = .{ HS_TMR0_INTV_HI, HS_TMR1_INTV_HI };

                /// HS Timer Current Value Low Register
                pub const HS_TMR0_CURNT_LO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300802c));

                /// HS Timer Current Value Low Register
                pub const HS_TMR1_CURNT_LO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3008030));

                /// HS_TMR_CURNT_LO group: HS Timer Current Value Low Register
                pub const HS_TMR_CURNT_LO = .{ HS_TMR0_CURNT_LO, HS_TMR1_CURNT_LO };

                /// HS Timer Current Value High Register
                pub const HS_TMR0_CURNT_HI = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23]
                    HS_TMR_CUR_VALUE_HI: u24 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x3008030));

                /// HS Timer Current Value High Register
                pub const HS_TMR1_CURNT_HI = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23]
                    HS_TMR_CUR_VALUE_HI: u24 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x3008034));

                /// HS_TMR_CURNT_HI group: HS Timer Current Value High Register
                pub const HS_TMR_CURNT_HI = .{ HS_TMR0_CURNT_HI, HS_TMR1_CURNT_HI };
            };

            /// Platform Level Interrupt Control
            pub const PLIC = struct {
                /// Interrupt Priority Register
                pub const prio0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000000));

                /// Interrupt Priority Register
                pub const prio1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000004));

                /// Interrupt Priority Register
                pub const prio2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000008));

                /// Interrupt Priority Register
                pub const prio3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000000c));

                /// Interrupt Priority Register
                pub const prio4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000010));

                /// Interrupt Priority Register
                pub const prio5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000014));

                /// Interrupt Priority Register
                pub const prio6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000018));

                /// Interrupt Priority Register
                pub const prio7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000001c));

                /// Interrupt Priority Register
                pub const prio8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000020));

                /// Interrupt Priority Register
                pub const prio9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000024));

                /// Interrupt Priority Register
                pub const prio10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000028));

                /// Interrupt Priority Register
                pub const prio11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000002c));

                /// Interrupt Priority Register
                pub const prio12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000030));

                /// Interrupt Priority Register
                pub const prio13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000034));

                /// Interrupt Priority Register
                pub const prio14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000038));

                /// Interrupt Priority Register
                pub const prio15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000003c));

                /// Interrupt Priority Register
                pub const prio16 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000040));

                /// Interrupt Priority Register
                pub const prio17 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000044));

                /// Interrupt Priority Register
                pub const prio18 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000048));

                /// Interrupt Priority Register
                pub const prio19 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000004c));

                /// Interrupt Priority Register
                pub const prio20 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000050));

                /// Interrupt Priority Register
                pub const prio21 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000054));

                /// Interrupt Priority Register
                pub const prio22 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000058));

                /// Interrupt Priority Register
                pub const prio23 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000005c));

                /// Interrupt Priority Register
                pub const prio24 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000060));

                /// Interrupt Priority Register
                pub const prio25 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000064));

                /// Interrupt Priority Register
                pub const prio26 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000068));

                /// Interrupt Priority Register
                pub const prio27 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000006c));

                /// Interrupt Priority Register
                pub const prio28 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000070));

                /// Interrupt Priority Register
                pub const prio29 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000074));

                /// Interrupt Priority Register
                pub const prio30 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000078));

                /// Interrupt Priority Register
                pub const prio31 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000007c));

                /// Interrupt Priority Register
                pub const prio32 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000080));

                /// Interrupt Priority Register
                pub const prio33 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000084));

                /// Interrupt Priority Register
                pub const prio34 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000088));

                /// Interrupt Priority Register
                pub const prio35 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000008c));

                /// Interrupt Priority Register
                pub const prio36 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000090));

                /// Interrupt Priority Register
                pub const prio37 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000094));

                /// Interrupt Priority Register
                pub const prio38 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000098));

                /// Interrupt Priority Register
                pub const prio39 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000009c));

                /// Interrupt Priority Register
                pub const prio40 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000a0));

                /// Interrupt Priority Register
                pub const prio41 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000a4));

                /// Interrupt Priority Register
                pub const prio42 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000a8));

                /// Interrupt Priority Register
                pub const prio43 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000ac));

                /// Interrupt Priority Register
                pub const prio44 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000b0));

                /// Interrupt Priority Register
                pub const prio45 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000b4));

                /// Interrupt Priority Register
                pub const prio46 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000b8));

                /// Interrupt Priority Register
                pub const prio47 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000bc));

                /// Interrupt Priority Register
                pub const prio48 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000c0));

                /// Interrupt Priority Register
                pub const prio49 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000c4));

                /// Interrupt Priority Register
                pub const prio50 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000c8));

                /// Interrupt Priority Register
                pub const prio51 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000cc));

                /// Interrupt Priority Register
                pub const prio52 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000d0));

                /// Interrupt Priority Register
                pub const prio53 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000d4));

                /// Interrupt Priority Register
                pub const prio54 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000d8));

                /// Interrupt Priority Register
                pub const prio55 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000dc));

                /// Interrupt Priority Register
                pub const prio56 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000e0));

                /// Interrupt Priority Register
                pub const prio57 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000e4));

                /// Interrupt Priority Register
                pub const prio58 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000e8));

                /// Interrupt Priority Register
                pub const prio59 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000ec));

                /// Interrupt Priority Register
                pub const prio60 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000f0));

                /// Interrupt Priority Register
                pub const prio61 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000f4));

                /// Interrupt Priority Register
                pub const prio62 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000f8));

                /// Interrupt Priority Register
                pub const prio63 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100000fc));

                /// Interrupt Priority Register
                pub const prio64 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000100));

                /// Interrupt Priority Register
                pub const prio65 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000104));

                /// Interrupt Priority Register
                pub const prio66 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000108));

                /// Interrupt Priority Register
                pub const prio67 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000010c));

                /// Interrupt Priority Register
                pub const prio68 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000110));

                /// Interrupt Priority Register
                pub const prio69 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000114));

                /// Interrupt Priority Register
                pub const prio70 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000118));

                /// Interrupt Priority Register
                pub const prio71 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000011c));

                /// Interrupt Priority Register
                pub const prio72 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000120));

                /// Interrupt Priority Register
                pub const prio73 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000124));

                /// Interrupt Priority Register
                pub const prio74 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000128));

                /// Interrupt Priority Register
                pub const prio75 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000012c));

                /// Interrupt Priority Register
                pub const prio76 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000130));

                /// Interrupt Priority Register
                pub const prio77 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000134));

                /// Interrupt Priority Register
                pub const prio78 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000138));

                /// Interrupt Priority Register
                pub const prio79 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000013c));

                /// Interrupt Priority Register
                pub const prio80 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000140));

                /// Interrupt Priority Register
                pub const prio81 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000144));

                /// Interrupt Priority Register
                pub const prio82 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000148));

                /// Interrupt Priority Register
                pub const prio83 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000014c));

                /// Interrupt Priority Register
                pub const prio84 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000150));

                /// Interrupt Priority Register
                pub const prio85 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000154));

                /// Interrupt Priority Register
                pub const prio86 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000158));

                /// Interrupt Priority Register
                pub const prio87 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000015c));

                /// Interrupt Priority Register
                pub const prio88 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000160));

                /// Interrupt Priority Register
                pub const prio89 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000164));

                /// Interrupt Priority Register
                pub const prio90 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000168));

                /// Interrupt Priority Register
                pub const prio91 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000016c));

                /// Interrupt Priority Register
                pub const prio92 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000170));

                /// Interrupt Priority Register
                pub const prio93 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000174));

                /// Interrupt Priority Register
                pub const prio94 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000178));

                /// Interrupt Priority Register
                pub const prio95 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000017c));

                /// Interrupt Priority Register
                pub const prio96 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000180));

                /// Interrupt Priority Register
                pub const prio97 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000184));

                /// Interrupt Priority Register
                pub const prio98 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000188));

                /// Interrupt Priority Register
                pub const prio99 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000018c));

                /// Interrupt Priority Register
                pub const prio100 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000190));

                /// Interrupt Priority Register
                pub const prio101 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000194));

                /// Interrupt Priority Register
                pub const prio102 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000198));

                /// Interrupt Priority Register
                pub const prio103 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000019c));

                /// Interrupt Priority Register
                pub const prio104 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001a0));

                /// Interrupt Priority Register
                pub const prio105 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001a4));

                /// Interrupt Priority Register
                pub const prio106 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001a8));

                /// Interrupt Priority Register
                pub const prio107 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001ac));

                /// Interrupt Priority Register
                pub const prio108 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001b0));

                /// Interrupt Priority Register
                pub const prio109 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001b4));

                /// Interrupt Priority Register
                pub const prio110 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001b8));

                /// Interrupt Priority Register
                pub const prio111 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001bc));

                /// Interrupt Priority Register
                pub const prio112 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001c0));

                /// Interrupt Priority Register
                pub const prio113 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001c4));

                /// Interrupt Priority Register
                pub const prio114 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001c8));

                /// Interrupt Priority Register
                pub const prio115 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001cc));

                /// Interrupt Priority Register
                pub const prio116 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001d0));

                /// Interrupt Priority Register
                pub const prio117 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001d4));

                /// Interrupt Priority Register
                pub const prio118 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001d8));

                /// Interrupt Priority Register
                pub const prio119 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001dc));

                /// Interrupt Priority Register
                pub const prio120 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001e0));

                /// Interrupt Priority Register
                pub const prio121 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001e4));

                /// Interrupt Priority Register
                pub const prio122 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001e8));

                /// Interrupt Priority Register
                pub const prio123 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001ec));

                /// Interrupt Priority Register
                pub const prio124 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001f0));

                /// Interrupt Priority Register
                pub const prio125 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001f4));

                /// Interrupt Priority Register
                pub const prio126 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001f8));

                /// Interrupt Priority Register
                pub const prio127 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100001fc));

                /// Interrupt Priority Register
                pub const prio128 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000200));

                /// Interrupt Priority Register
                pub const prio129 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000204));

                /// Interrupt Priority Register
                pub const prio130 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000208));

                /// Interrupt Priority Register
                pub const prio131 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000020c));

                /// Interrupt Priority Register
                pub const prio132 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000210));

                /// Interrupt Priority Register
                pub const prio133 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000214));

                /// Interrupt Priority Register
                pub const prio134 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000218));

                /// Interrupt Priority Register
                pub const prio135 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000021c));

                /// Interrupt Priority Register
                pub const prio136 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000220));

                /// Interrupt Priority Register
                pub const prio137 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000224));

                /// Interrupt Priority Register
                pub const prio138 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000228));

                /// Interrupt Priority Register
                pub const prio139 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000022c));

                /// Interrupt Priority Register
                pub const prio140 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000230));

                /// Interrupt Priority Register
                pub const prio141 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000234));

                /// Interrupt Priority Register
                pub const prio142 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000238));

                /// Interrupt Priority Register
                pub const prio143 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000023c));

                /// Interrupt Priority Register
                pub const prio144 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000240));

                /// Interrupt Priority Register
                pub const prio145 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000244));

                /// Interrupt Priority Register
                pub const prio146 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000248));

                /// Interrupt Priority Register
                pub const prio147 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000024c));

                /// Interrupt Priority Register
                pub const prio148 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000250));

                /// Interrupt Priority Register
                pub const prio149 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000254));

                /// Interrupt Priority Register
                pub const prio150 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000258));

                /// Interrupt Priority Register
                pub const prio151 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000025c));

                /// Interrupt Priority Register
                pub const prio152 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000260));

                /// Interrupt Priority Register
                pub const prio153 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000264));

                /// Interrupt Priority Register
                pub const prio154 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000268));

                /// Interrupt Priority Register
                pub const prio155 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000026c));

                /// Interrupt Priority Register
                pub const prio156 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000270));

                /// Interrupt Priority Register
                pub const prio157 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000274));

                /// Interrupt Priority Register
                pub const prio158 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000278));

                /// Interrupt Priority Register
                pub const prio159 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000027c));

                /// Interrupt Priority Register
                pub const prio160 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000280));

                /// Interrupt Priority Register
                pub const prio161 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000284));

                /// Interrupt Priority Register
                pub const prio162 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000288));

                /// Interrupt Priority Register
                pub const prio163 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000028c));

                /// Interrupt Priority Register
                pub const prio164 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000290));

                /// Interrupt Priority Register
                pub const prio165 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000294));

                /// Interrupt Priority Register
                pub const prio166 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000298));

                /// Interrupt Priority Register
                pub const prio167 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000029c));

                /// Interrupt Priority Register
                pub const prio168 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002a0));

                /// Interrupt Priority Register
                pub const prio169 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002a4));

                /// Interrupt Priority Register
                pub const prio170 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002a8));

                /// Interrupt Priority Register
                pub const prio171 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002ac));

                /// Interrupt Priority Register
                pub const prio172 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002b0));

                /// Interrupt Priority Register
                pub const prio173 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002b4));

                /// Interrupt Priority Register
                pub const prio174 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002b8));

                /// Interrupt Priority Register
                pub const prio175 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002bc));

                /// Interrupt Priority Register
                pub const prio176 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002c0));

                /// Interrupt Priority Register
                pub const prio177 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002c4));

                /// Interrupt Priority Register
                pub const prio178 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002c8));

                /// Interrupt Priority Register
                pub const prio179 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002cc));

                /// Interrupt Priority Register
                pub const prio180 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002d0));

                /// Interrupt Priority Register
                pub const prio181 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002d4));

                /// Interrupt Priority Register
                pub const prio182 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002d8));

                /// Interrupt Priority Register
                pub const prio183 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002dc));

                /// Interrupt Priority Register
                pub const prio184 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002e0));

                /// Interrupt Priority Register
                pub const prio185 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002e4));

                /// Interrupt Priority Register
                pub const prio186 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002e8));

                /// Interrupt Priority Register
                pub const prio187 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002ec));

                /// Interrupt Priority Register
                pub const prio188 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002f0));

                /// Interrupt Priority Register
                pub const prio189 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002f4));

                /// Interrupt Priority Register
                pub const prio190 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002f8));

                /// Interrupt Priority Register
                pub const prio191 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100002fc));

                /// Interrupt Priority Register
                pub const prio192 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000300));

                /// Interrupt Priority Register
                pub const prio193 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000304));

                /// Interrupt Priority Register
                pub const prio194 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000308));

                /// Interrupt Priority Register
                pub const prio195 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000030c));

                /// Interrupt Priority Register
                pub const prio196 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000310));

                /// Interrupt Priority Register
                pub const prio197 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000314));

                /// Interrupt Priority Register
                pub const prio198 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000318));

                /// Interrupt Priority Register
                pub const prio199 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000031c));

                /// Interrupt Priority Register
                pub const prio200 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000320));

                /// Interrupt Priority Register
                pub const prio201 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000324));

                /// Interrupt Priority Register
                pub const prio202 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000328));

                /// Interrupt Priority Register
                pub const prio203 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000032c));

                /// Interrupt Priority Register
                pub const prio204 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000330));

                /// Interrupt Priority Register
                pub const prio205 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000334));

                /// Interrupt Priority Register
                pub const prio206 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000338));

                /// Interrupt Priority Register
                pub const prio207 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000033c));

                /// Interrupt Priority Register
                pub const prio208 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000340));

                /// Interrupt Priority Register
                pub const prio209 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000344));

                /// Interrupt Priority Register
                pub const prio210 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000348));

                /// Interrupt Priority Register
                pub const prio211 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000034c));

                /// Interrupt Priority Register
                pub const prio212 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000350));

                /// Interrupt Priority Register
                pub const prio213 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000354));

                /// Interrupt Priority Register
                pub const prio214 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000358));

                /// Interrupt Priority Register
                pub const prio215 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000035c));

                /// Interrupt Priority Register
                pub const prio216 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000360));

                /// Interrupt Priority Register
                pub const prio217 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000364));

                /// Interrupt Priority Register
                pub const prio218 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000368));

                /// Interrupt Priority Register
                pub const prio219 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000036c));

                /// Interrupt Priority Register
                pub const prio220 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000370));

                /// Interrupt Priority Register
                pub const prio221 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000374));

                /// Interrupt Priority Register
                pub const prio222 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000378));

                /// Interrupt Priority Register
                pub const prio223 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000037c));

                /// Interrupt Priority Register
                pub const prio224 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000380));

                /// Interrupt Priority Register
                pub const prio225 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000384));

                /// Interrupt Priority Register
                pub const prio226 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000388));

                /// Interrupt Priority Register
                pub const prio227 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000038c));

                /// Interrupt Priority Register
                pub const prio228 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000390));

                /// Interrupt Priority Register
                pub const prio229 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000394));

                /// Interrupt Priority Register
                pub const prio230 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10000398));

                /// Interrupt Priority Register
                pub const prio231 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x1000039c));

                /// Interrupt Priority Register
                pub const prio232 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003a0));

                /// Interrupt Priority Register
                pub const prio233 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003a4));

                /// Interrupt Priority Register
                pub const prio234 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003a8));

                /// Interrupt Priority Register
                pub const prio235 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003ac));

                /// Interrupt Priority Register
                pub const prio236 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003b0));

                /// Interrupt Priority Register
                pub const prio237 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003b4));

                /// Interrupt Priority Register
                pub const prio238 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003b8));

                /// Interrupt Priority Register
                pub const prio239 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003bc));

                /// Interrupt Priority Register
                pub const prio240 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003c0));

                /// Interrupt Priority Register
                pub const prio241 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003c4));

                /// Interrupt Priority Register
                pub const prio242 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003c8));

                /// Interrupt Priority Register
                pub const prio243 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003cc));

                /// Interrupt Priority Register
                pub const prio244 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003d0));

                /// Interrupt Priority Register
                pub const prio245 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003d4));

                /// Interrupt Priority Register
                pub const prio246 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003d8));

                /// Interrupt Priority Register
                pub const prio247 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003dc));

                /// Interrupt Priority Register
                pub const prio248 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003e0));

                /// Interrupt Priority Register
                pub const prio249 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003e4));

                /// Interrupt Priority Register
                pub const prio250 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003e8));

                /// Interrupt Priority Register
                pub const prio251 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003ec));

                /// Interrupt Priority Register
                pub const prio252 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003f0));

                /// Interrupt Priority Register
                pub const prio253 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003f4));

                /// Interrupt Priority Register
                pub const prio254 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003f8));

                /// Interrupt Priority Register
                pub const prio255 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x100003fc));

                /// prio group: Interrupt Priority Register
                pub const prio = .{ prio0, prio1, prio2, prio3, prio4, prio5, prio6, prio7, prio8, prio9, prio10, prio11, prio12, prio13, prio14, prio15, prio16, prio17, prio18, prio19, prio20, prio21, prio22, prio23, prio24, prio25, prio26, prio27, prio28, prio29, prio30, prio31, prio32, prio33, prio34, prio35, prio36, prio37, prio38, prio39, prio40, prio41, prio42, prio43, prio44, prio45, prio46, prio47, prio48, prio49, prio50, prio51, prio52, prio53, prio54, prio55, prio56, prio57, prio58, prio59, prio60, prio61, prio62, prio63, prio64, prio65, prio66, prio67, prio68, prio69, prio70, prio71, prio72, prio73, prio74, prio75, prio76, prio77, prio78, prio79, prio80, prio81, prio82, prio83, prio84, prio85, prio86, prio87, prio88, prio89, prio90, prio91, prio92, prio93, prio94, prio95, prio96, prio97, prio98, prio99, prio100, prio101, prio102, prio103, prio104, prio105, prio106, prio107, prio108, prio109, prio110, prio111, prio112, prio113, prio114, prio115, prio116, prio117, prio118, prio119, prio120, prio121, prio122, prio123, prio124, prio125, prio126, prio127, prio128, prio129, prio130, prio131, prio132, prio133, prio134, prio135, prio136, prio137, prio138, prio139, prio140, prio141, prio142, prio143, prio144, prio145, prio146, prio147, prio148, prio149, prio150, prio151, prio152, prio153, prio154, prio155, prio156, prio157, prio158, prio159, prio160, prio161, prio162, prio163, prio164, prio165, prio166, prio167, prio168, prio169, prio170, prio171, prio172, prio173, prio174, prio175, prio176, prio177, prio178, prio179, prio180, prio181, prio182, prio183, prio184, prio185, prio186, prio187, prio188, prio189, prio190, prio191, prio192, prio193, prio194, prio195, prio196, prio197, prio198, prio199, prio200, prio201, prio202, prio203, prio204, prio205, prio206, prio207, prio208, prio209, prio210, prio211, prio212, prio213, prio214, prio215, prio216, prio217, prio218, prio219, prio220, prio221, prio222, prio223, prio224, prio225, prio226, prio227, prio228, prio229, prio230, prio231, prio232, prio233, prio234, prio235, prio236, prio237, prio238, prio239, prio240, prio241, prio242, prio243, prio244, prio245, prio246, prio247, prio248, prio249, prio250, prio251, prio252, prio253, prio254, prio255 };

                /// Interrupt Pending Register
                pub const ip0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10001000));

                /// Interrupt Pending Register
                pub const ip1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10001004));

                /// Interrupt Pending Register
                pub const ip2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10001008));

                /// Interrupt Pending Register
                pub const ip3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1000100c));

                /// Interrupt Pending Register
                pub const ip4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10001010));

                /// Interrupt Pending Register
                pub const ip5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10001014));

                /// Interrupt Pending Register
                pub const ip6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10001018));

                /// Interrupt Pending Register
                pub const ip7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1000101c));

                /// Interrupt Pending Register
                pub const ip8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10001020));

                /// ip group: Interrupt Pending Register
                pub const ip = .{ ip0, ip1, ip2, ip3, ip4, ip5, ip6, ip7, ip8 };

                /// Machine Mode Interrupt Enable Register
                pub const mie0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002000));

                /// Machine Mode Interrupt Enable Register
                pub const mie1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002004));

                /// Machine Mode Interrupt Enable Register
                pub const mie2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002008));

                /// Machine Mode Interrupt Enable Register
                pub const mie3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1000200c));

                /// Machine Mode Interrupt Enable Register
                pub const mie4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002010));

                /// Machine Mode Interrupt Enable Register
                pub const mie5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002014));

                /// Machine Mode Interrupt Enable Register
                pub const mie6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002018));

                /// Machine Mode Interrupt Enable Register
                pub const mie7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1000201c));

                /// Machine Mode Interrupt Enable Register
                pub const mie8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002020));

                /// mie group: Machine Mode Interrupt Enable Register
                pub const mie = .{ mie0, mie1, mie2, mie3, mie4, mie5, mie6, mie7, mie8 };

                /// Supervisor Mode Interrupt Enable Register
                pub const sie0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002080));

                /// Supervisor Mode Interrupt Enable Register
                pub const sie1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002084));

                /// Supervisor Mode Interrupt Enable Register
                pub const sie2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002088));

                /// Supervisor Mode Interrupt Enable Register
                pub const sie3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1000208c));

                /// Supervisor Mode Interrupt Enable Register
                pub const sie4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002090));

                /// Supervisor Mode Interrupt Enable Register
                pub const sie5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002094));

                /// Supervisor Mode Interrupt Enable Register
                pub const sie6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x10002098));

                /// Supervisor Mode Interrupt Enable Register
                pub const sie7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1000209c));

                /// Supervisor Mode Interrupt Enable Register
                pub const sie8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x100020a0));

                /// sie group: Supervisor Mode Interrupt Enable Register
                pub const sie = .{ sie0, sie1, sie2, sie3, sie4, sie5, sie6, sie7, sie8 };

                /// Control Register
                pub const ctrl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PLIC Control
                    ctrl: enum(u1) {
                        /// Only the machine mode can access to all registers in PLIC. Supervisor mode can only access the interrupt threshold register and the interrupt response/completion register.
                        m = 0,

                        /// The machine mode and the supervisor mode can access all registers. CTRL is accessible only in the machine mode.
                        ms = 1,
                    } = .m,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x101ffffc));

                /// Machine Mode Priority Threshold Register
                pub const mth = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10200000));

                /// Machine Mode Claim/Complete Register
                pub const mclaim = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:9]
                    mclaim: u10 = 0,

                    /// [10:31]
                    res0: u22 = 0,
                }), @ptrFromInt(0x10200004));

                /// Supervisor Mode Priority Threshold Register
                pub const sth = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    priority: enum(u5) {
                        /// Priority 0 (never interrupt)
                        P0 = 0,

                        /// Priority 1
                        P1 = 1,

                        /// Priority 2
                        P2 = 2,

                        /// Priority 3
                        P3 = 3,

                        /// Priority 4
                        P4 = 4,

                        /// Priority 5
                        P5 = 5,

                        /// Priority 6
                        P6 = 6,

                        /// Priority 7
                        P7 = 7,

                        /// Priority 8
                        P8 = 8,

                        /// Priority 9
                        P9 = 9,

                        /// Priority 10
                        P10 = 10,

                        /// Priority 11
                        P11 = 11,

                        /// Priority 12
                        P12 = 12,

                        /// Priority 13
                        P13 = 13,

                        /// Priority 14
                        P14 = 14,

                        /// Priority 15
                        P15 = 15,

                        /// Priority 16
                        P16 = 16,

                        /// Priority 17
                        P17 = 17,

                        /// Priority 18
                        P18 = 18,

                        /// Priority 19
                        P19 = 19,

                        /// Priority 20
                        P20 = 20,

                        /// Priority 21
                        P21 = 21,

                        /// Priority 22
                        P22 = 22,

                        /// Priority 23
                        P23 = 23,

                        /// Priority 24
                        P24 = 24,

                        /// Priority 25
                        P25 = 25,

                        /// Priority 26
                        P26 = 26,

                        /// Priority 27
                        P27 = 27,

                        /// Priority 28
                        P28 = 28,

                        /// Priority 29
                        P29 = 29,

                        /// Priority 30
                        P30 = 30,

                        /// Priority 31
                        P31 = 31,
                    } = .P0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x10201000));

                /// Supervisor Mode Claim/Complete Register
                pub const sclaim = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:9]
                    sclaim: u10 = 0,

                    /// [10:31]
                    res0: u22 = 0,
                }), @ptrFromInt(0x10201004));
            };

            /// Direct Memory Access Controller
            pub const DMAC = struct {
                /// DMAC IRQ Enable Register 0
                pub const DMAC_IRQ_EN_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002000));

                /// DMAC IRQ Enable Register 1
                pub const DMAC_IRQ_EN_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002004));

                /// DMAC IRQ Pending Register 0
                pub const DMAC_IRQ_PEND_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002010));

                /// DMAC IRQ Pending Register 1
                pub const DMAC_IRQ_PEND_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002014));

                /// DMAC Auto Gating Register
                pub const DMAC_AUTO_GATE_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002028));

                /// DMAC Status Register
                pub const DMAC_STA_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002030));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002100));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002104));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002108));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300210c));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002110));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002114));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002118));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300211c));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002120));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002124));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002128));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300212c));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002130));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002134));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002138));

                /// DMAC Channel Enable Register
                pub const DMAC_EN_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300213c));

                /// DMAC_EN_REG group: DMAC Channel Enable Register
                pub const DMAC_EN_REG = .{ DMAC_EN_REG0, DMAC_EN_REG1, DMAC_EN_REG2, DMAC_EN_REG3, DMAC_EN_REG4, DMAC_EN_REG5, DMAC_EN_REG6, DMAC_EN_REG7, DMAC_EN_REG8, DMAC_EN_REG9, DMAC_EN_REG10, DMAC_EN_REG11, DMAC_EN_REG12, DMAC_EN_REG13, DMAC_EN_REG14, DMAC_EN_REG15 };

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002104));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002108));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300210c));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002110));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002114));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002118));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300211c));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002120));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002124));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002128));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300212c));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002130));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002134));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002138));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300213c));

                /// DMAC Channel Pause Register
                pub const DMAC_PAU_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002140));

                /// DMAC_PAU_REG group: DMAC Channel Pause Register
                pub const DMAC_PAU_REG = .{ DMAC_PAU_REG0, DMAC_PAU_REG1, DMAC_PAU_REG2, DMAC_PAU_REG3, DMAC_PAU_REG4, DMAC_PAU_REG5, DMAC_PAU_REG6, DMAC_PAU_REG7, DMAC_PAU_REG8, DMAC_PAU_REG9, DMAC_PAU_REG10, DMAC_PAU_REG11, DMAC_PAU_REG12, DMAC_PAU_REG13, DMAC_PAU_REG14, DMAC_PAU_REG15 };

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002108));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300210c));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002110));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002114));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002118));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300211c));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002120));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002124));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002128));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300212c));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002130));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002134));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002138));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300213c));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002140));

                /// DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002144));

                /// DMAC_DESC_ADDR_REG group: DMAC Channel Start Address Register
                pub const DMAC_DESC_ADDR_REG = .{ DMAC_DESC_ADDR_REG0, DMAC_DESC_ADDR_REG1, DMAC_DESC_ADDR_REG2, DMAC_DESC_ADDR_REG3, DMAC_DESC_ADDR_REG4, DMAC_DESC_ADDR_REG5, DMAC_DESC_ADDR_REG6, DMAC_DESC_ADDR_REG7, DMAC_DESC_ADDR_REG8, DMAC_DESC_ADDR_REG9, DMAC_DESC_ADDR_REG10, DMAC_DESC_ADDR_REG11, DMAC_DESC_ADDR_REG12, DMAC_DESC_ADDR_REG13, DMAC_DESC_ADDR_REG14, DMAC_DESC_ADDR_REG15 };

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300210c));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002110));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002114));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002118));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300211c));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002120));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002124));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002128));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300212c));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002130));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002134));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002138));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300213c));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002140));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002144));

                /// DMAC Channel Configuration Register
                pub const DMAC_CFG_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002148));

                /// DMAC_CFG_REG group: DMAC Channel Configuration Register
                pub const DMAC_CFG_REG = .{ DMAC_CFG_REG0, DMAC_CFG_REG1, DMAC_CFG_REG2, DMAC_CFG_REG3, DMAC_CFG_REG4, DMAC_CFG_REG5, DMAC_CFG_REG6, DMAC_CFG_REG7, DMAC_CFG_REG8, DMAC_CFG_REG9, DMAC_CFG_REG10, DMAC_CFG_REG11, DMAC_CFG_REG12, DMAC_CFG_REG13, DMAC_CFG_REG14, DMAC_CFG_REG15 };

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002110));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002114));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002118));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300211c));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002120));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002124));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002128));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300212c));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002130));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002134));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002138));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300213c));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002140));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002144));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002148));

                /// DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300214c));

                /// DMAC_CUR_SRC_REG group: DMAC Channel Current Source Register
                pub const DMAC_CUR_SRC_REG = .{ DMAC_CUR_SRC_REG0, DMAC_CUR_SRC_REG1, DMAC_CUR_SRC_REG2, DMAC_CUR_SRC_REG3, DMAC_CUR_SRC_REG4, DMAC_CUR_SRC_REG5, DMAC_CUR_SRC_REG6, DMAC_CUR_SRC_REG7, DMAC_CUR_SRC_REG8, DMAC_CUR_SRC_REG9, DMAC_CUR_SRC_REG10, DMAC_CUR_SRC_REG11, DMAC_CUR_SRC_REG12, DMAC_CUR_SRC_REG13, DMAC_CUR_SRC_REG14, DMAC_CUR_SRC_REG15 };

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002114));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002118));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300211c));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002120));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002124));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002128));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300212c));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002130));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002134));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002138));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300213c));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002140));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002144));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002148));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300214c));

                /// DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002150));

                /// DMAC_CUR_DEST_REG group: DMAC Channel Current Destination Register
                pub const DMAC_CUR_DEST_REG = .{ DMAC_CUR_DEST_REG0, DMAC_CUR_DEST_REG1, DMAC_CUR_DEST_REG2, DMAC_CUR_DEST_REG3, DMAC_CUR_DEST_REG4, DMAC_CUR_DEST_REG5, DMAC_CUR_DEST_REG6, DMAC_CUR_DEST_REG7, DMAC_CUR_DEST_REG8, DMAC_CUR_DEST_REG9, DMAC_CUR_DEST_REG10, DMAC_CUR_DEST_REG11, DMAC_CUR_DEST_REG12, DMAC_CUR_DEST_REG13, DMAC_CUR_DEST_REG14, DMAC_CUR_DEST_REG15 };

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002118));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300211c));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002120));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002124));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002128));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300212c));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002130));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002134));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002138));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300213c));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002140));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002144));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002148));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300214c));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002150));

                /// DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002154));

                /// DMAC_BCNT_LEFT_REG group: DMAC Channel Byte Counter Left Register
                pub const DMAC_BCNT_LEFT_REG = .{ DMAC_BCNT_LEFT_REG0, DMAC_BCNT_LEFT_REG1, DMAC_BCNT_LEFT_REG2, DMAC_BCNT_LEFT_REG3, DMAC_BCNT_LEFT_REG4, DMAC_BCNT_LEFT_REG5, DMAC_BCNT_LEFT_REG6, DMAC_BCNT_LEFT_REG7, DMAC_BCNT_LEFT_REG8, DMAC_BCNT_LEFT_REG9, DMAC_BCNT_LEFT_REG10, DMAC_BCNT_LEFT_REG11, DMAC_BCNT_LEFT_REG12, DMAC_BCNT_LEFT_REG13, DMAC_BCNT_LEFT_REG14, DMAC_BCNT_LEFT_REG15 };

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300211c));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002120));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002124));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002128));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300212c));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002130));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002134));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002138));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300213c));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002140));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002144));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002148));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300214c));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002150));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002154));

                /// DMAC Channel Parameter Register
                pub const DMAC_PARA_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002158));

                /// DMAC_PARA_REG group: DMAC Channel Parameter Register
                pub const DMAC_PARA_REG = .{ DMAC_PARA_REG0, DMAC_PARA_REG1, DMAC_PARA_REG2, DMAC_PARA_REG3, DMAC_PARA_REG4, DMAC_PARA_REG5, DMAC_PARA_REG6, DMAC_PARA_REG7, DMAC_PARA_REG8, DMAC_PARA_REG9, DMAC_PARA_REG10, DMAC_PARA_REG11, DMAC_PARA_REG12, DMAC_PARA_REG13, DMAC_PARA_REG14, DMAC_PARA_REG15 };

                /// DMAC Mode Register
                pub const DMAC_MODE_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002128));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300212c));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002130));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002134));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002138));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300213c));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002140));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002144));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002148));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300214c));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002150));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002154));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002158));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300215c));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002160));

                /// DMAC Mode Register
                pub const DMAC_MODE_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002164));

                /// DMAC_MODE_REG group: DMAC Mode Register
                pub const DMAC_MODE_REG = .{ DMAC_MODE_REG0, DMAC_MODE_REG1, DMAC_MODE_REG2, DMAC_MODE_REG3, DMAC_MODE_REG4, DMAC_MODE_REG5, DMAC_MODE_REG6, DMAC_MODE_REG7, DMAC_MODE_REG8, DMAC_MODE_REG9, DMAC_MODE_REG10, DMAC_MODE_REG11, DMAC_MODE_REG12, DMAC_MODE_REG13, DMAC_MODE_REG14, DMAC_MODE_REG15 };

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300212c));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002130));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002134));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002138));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300213c));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002140));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002144));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002148));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300214c));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002150));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002154));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002158));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300215c));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002160));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002164));

                /// DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002168));

                /// DMAC_FDESC_ADDR_REG group: DMAC Former Descriptor Address Register
                pub const DMAC_FDESC_ADDR_REG = .{ DMAC_FDESC_ADDR_REG0, DMAC_FDESC_ADDR_REG1, DMAC_FDESC_ADDR_REG2, DMAC_FDESC_ADDR_REG3, DMAC_FDESC_ADDR_REG4, DMAC_FDESC_ADDR_REG5, DMAC_FDESC_ADDR_REG6, DMAC_FDESC_ADDR_REG7, DMAC_FDESC_ADDR_REG8, DMAC_FDESC_ADDR_REG9, DMAC_FDESC_ADDR_REG10, DMAC_FDESC_ADDR_REG11, DMAC_FDESC_ADDR_REG12, DMAC_FDESC_ADDR_REG13, DMAC_FDESC_ADDR_REG14, DMAC_FDESC_ADDR_REG15 };

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002130));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002134));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002138));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300213c));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002140));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002144));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002148));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300214c));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002150));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002154));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002158));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300215c));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002160));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002164));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3002168));

                /// DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300216c));

                /// DMAC_PKG_NUM_REG group: DMAC Package Number Register
                pub const DMAC_PKG_NUM_REG = .{ DMAC_PKG_NUM_REG0, DMAC_PKG_NUM_REG1, DMAC_PKG_NUM_REG2, DMAC_PKG_NUM_REG3, DMAC_PKG_NUM_REG4, DMAC_PKG_NUM_REG5, DMAC_PKG_NUM_REG6, DMAC_PKG_NUM_REG7, DMAC_PKG_NUM_REG8, DMAC_PKG_NUM_REG9, DMAC_PKG_NUM_REG10, DMAC_PKG_NUM_REG11, DMAC_PKG_NUM_REG12, DMAC_PKG_NUM_REG13, DMAC_PKG_NUM_REG14, DMAC_PKG_NUM_REG15 };
            };

            /// Thermal Sensor Controller
            pub const THC = struct {
                /// THS Control Register
                pub const THS_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009400));

                /// THS Enable Register
                pub const THS_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009404));

                /// THS Period Control Register
                pub const THS_PER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009408));

                /// THS Data Interrupt Control Register
                pub const THS_DATA_INTC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009410));

                /// THS Shut Interrupt Control Register
                pub const THS_SHUT_INTC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009414));

                /// THS Alarm Interrupt Control Register
                pub const THS_ALARM_INTC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009418));

                /// THS Data Interrupt Status Register
                pub const THS_DATA_INTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009420));

                /// THS Shut Interrupt Status Register
                pub const THS_SHUT_INTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009424));

                /// THS Alarm off Interrupt Status Register
                pub const THS_ALARMO_INTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009428));

                /// THS Alarm Interrupt Status Register
                pub const THS_ALARM_INTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200942c));

                /// THS Median Filter Control Register
                pub const THS_FILTER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009430));

                /// THS Alarm Threshold Control Register
                pub const THS_ALARM_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009440));

                /// THS Shutdown Threshold Control Register
                pub const THS_SHUTDOWN_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009480));

                /// THS Calibration Data
                pub const THS_CDATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20094a0));

                /// THS Data Register
                pub const THS_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20094c0));
            };

            /// I/O Memory Management Unit
            pub const IOMMU = struct {
                /// IOMMU Reset Register
                pub const IOMMU_RESET_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010010));

                /// IOMMU Enable Register
                pub const IOMMU_ENABLE_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010020));

                /// IOMMU Bypass Register
                pub const IOMMU_BYPASS_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010030));

                /// IOMMU Auto Gating Register
                pub const IOMMU_AUTO_GATING_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010040));

                /// IOMMU Write Buffer Control Register
                pub const IOMMU_WBUF_CTRL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010044));

                /// IOMMU Out of Order Control Register
                pub const IOMMU_OOO_CTRL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010048));

                /// IOMMU 4KB Boundary Protect Control Register
                pub const IOMMU_4KB_BDY_PRT_CTRL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201004c));

                /// IOMMU Translation Table Base Register
                pub const IOMMU_TTB_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010050));

                /// IOMMU TLB Enable Register
                pub const IOMMU_TLB_ENABLE_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010060));

                /// IOMMU TLB Prefetch Register
                pub const IOMMU_TLB_PREFETCH_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010070));

                /// IOMMU TLB Flush Enable Register
                pub const IOMMU_TLB_FLUSH_ENABLE_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010080));

                /// IOMMU TLB Invalidation Mode Select Register
                pub const IOMMU_TLB_IVLD_MODE_SEL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010084));

                /// IOMMU TLB Invalidation Start Address Register
                pub const IOMMU_TLB_IVLD_STA_ADDR_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010088));

                /// IOMMU TLB Invalidation End Address Register
                pub const IOMMU_TLB_IVLD_END_ADDR_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201008c));

                /// IOMMU TLB Invalidation Address Register
                pub const IOMMU_TLB_IVLD_ADDR_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010090));

                /// IOMMU TLB Invalidation Address Mask Register
                pub const IOMMU_TLB_IVLD_ADDR_MASK_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010094));

                /// IOMMU TLB Invalidation Enable Register
                pub const IOMMU_TLB_IVLD_ENABLE_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010098));

                /// IOMMU PC Invalidation Mode Select Register
                pub const IOMMU_PC_IVLD_MODE_SEL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201009c));

                /// IOMMU PC Invalidation Address Register
                pub const IOMMU_PC_IVLD_ADDR_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100a0));

                /// IOMMU PC Invalidation Start Address Register
                pub const IOMMU_PC_IVLD_STA_ADDR_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100a4));

                /// IOMMU PC Invalidation Enable Register
                pub const IOMMU_PC_IVLD_ENABLE_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100a8));

                /// IOMMU PC Invalidation End Address Register
                pub const IOMMU_PC_IVLD_END_ADDR_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100ac));

                /// IOMMU Domain Authority Control 0 Register
                pub const IOMMU_DM_AUT_CTRL0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100b0));

                /// IOMMU Domain Authority Control 1 Register
                pub const IOMMU_DM_AUT_CTRL1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100b4));

                /// IOMMU Domain Authority Control 2 Register
                pub const IOMMU_DM_AUT_CTRL2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100b8));

                /// IOMMU Domain Authority Control 3 Register
                pub const IOMMU_DM_AUT_CTRL3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100bc));

                /// IOMMU Domain Authority Control 4 Register
                pub const IOMMU_DM_AUT_CTRL4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100c0));

                /// IOMMU Domain Authority Control 5 Register
                pub const IOMMU_DM_AUT_CTRL5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100c4));

                /// IOMMU Domain Authority Control 6 Register
                pub const IOMMU_DM_AUT_CTRL6_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100c8));

                /// IOMMU Domain Authority Control 7 Register
                pub const IOMMU_DM_AUT_CTRL7_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100cc));

                /// IOMMU Domain Authority Overwrite Register
                pub const IOMMU_DM_AUT_OVWT_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20100d0));

                /// IOMMU Interrupt Enable Register
                pub const IOMMU_INT_ENABLE_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010100));

                /// IOMMU Interrupt Clear Register
                pub const IOMMU_INT_CLR_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010104));

                /// IOMMU Interrupt Status Register
                pub const IOMMU_INT_STA_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010108));

                /// IOMMU Interrupt Error Address 0
                pub const IOMMU_INT_ERR_ADDR0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010110));

                /// IOMMU Interrupt Error Address 1
                pub const IOMMU_INT_ERR_ADDR1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010114));

                /// IOMMU Interrupt Error Address 2
                pub const IOMMU_INT_ERR_ADDR2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010118));

                /// IOMMU Interrupt Error Address 3
                pub const IOMMU_INT_ERR_ADDR3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201011c));

                /// IOMMU Interrupt Error Address 4
                pub const IOMMU_INT_ERR_ADDR4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010120));

                /// IOMMU Interrupt Error Address 5
                pub const IOMMU_INT_ERR_ADDR5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010124));

                /// IOMMU Interrupt Error Address 6
                pub const IOMMU_INT_ERR_ADDR6_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010128));

                /// IOMMU Interrupt Error Address 7
                pub const IOMMU_INT_ERR_ADDR7_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010130));

                /// IOMMU Interrupt Error Address 8
                pub const IOMMU_INT_ERR_ADDR8_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010134));

                /// IOMMU Interrupt Error Data 0 Register
                pub const IOMMU_INT_ERR_DATA0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010150));

                /// IOMMU Interrupt Error Data 1 Register
                pub const IOMMU_INT_ERR_DATA1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010154));

                /// IOMMU Interrupt Error Data 2 Register
                pub const IOMMU_INT_ERR_DATA2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010158));

                /// IOMMU Interrupt Error Data 3 Register
                pub const IOMMU_INT_ERR_DATA3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201015c));

                /// IOMMU Interrupt Error Data 4 Register
                pub const IOMMU_INT_ERR_DATA4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010160));

                /// IOMMU Interrupt Error Data 5 Register
                pub const IOMMU_INT_ERR_DATA5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010164));

                /// IOMMU Interrupt Error Data 6 Register
                pub const IOMMU_INT_ERR_DATA6_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010168));

                /// IOMMU Interrupt Error Data 7 Register
                pub const IOMMU_INT_ERR_DATA7_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010170));

                /// IOMMU Interrupt Error Data 8 Register
                pub const IOMMU_INT_ERR_DATA8_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010174));

                /// IOMMU L1 Page Table Interrupt Register
                pub const IOMMU_L1PG_INT_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010180));

                /// IOMMU L2 Page Table Interrupt Register
                pub const IOMMU_L2PG_INT_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010184));

                /// IOMMU Virtual Address Register
                pub const IOMMU_VA_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010190));

                /// IOMMU Virtual Address Data Register
                pub const IOMMU_VA_DATA_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010194));

                /// IOMMU Virtual Address Configuration Register
                pub const IOMMU_VA_CONFIG_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010198));

                /// IOMMU PMU Enable Register
                pub const IOMMU_PMU_ENABLE_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010200));

                /// IOMMU PMU Clear Register
                pub const IOMMU_PMU_CLR_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010210));

                /// IOMMU PMU Access Low 0 Register
                pub const IOMMU_PMU_ACCESS_LOW0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010230));

                /// IOMMU PMU Access High 0 Register
                pub const IOMMU_PMU_ACCESS_HIGH0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010234));

                /// IOMMU PMU Hit Low 0 Register
                pub const IOMMU_PMU_HIT_LOW0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010238));

                /// IOMMU PMU Hit High 0 Register
                pub const IOMMU_PMU_HIT_HIGH0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201023c));

                /// IOMMU PMU Access Low 1 Register
                pub const IOMMU_PMU_ACCESS_LOW1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010240));

                /// IOMMU PMU Access High 1 Register
                pub const IOMMU_PMU_ACCESS_HIGH1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010244));

                /// IOMMU PMU Hit Low 1 Register
                pub const IOMMU_PMU_HIT_LOW1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010248));

                /// IOMMU PMU Hit High 1 Register
                pub const IOMMU_PMU_HIT_HIGH1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201024c));

                /// IOMMU PMU Access Low 2 Register
                pub const IOMMU_PMU_ACCESS_LOW2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010250));

                /// IOMMU PMU Access High 2 Register
                pub const IOMMU_PMU_ACCESS_HIGH2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010254));

                /// IOMMU PMU Hit Low 2 Register
                pub const IOMMU_PMU_HIT_LOW2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010258));

                /// IOMMU PMU Hit High 2 Register
                pub const IOMMU_PMU_HIT_HIGH2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201025c));

                /// IOMMU PMU Access Low 3 Register
                pub const IOMMU_PMU_ACCESS_LOW3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010260));

                /// IOMMU PMU Access High 3 Register
                pub const IOMMU_PMU_ACCESS_HIGH3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010264));

                /// IOMMU PMU Hit Low 3 Register
                pub const IOMMU_PMU_HIT_LOW3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010268));

                /// IOMMU PMU Hit High 3 Register
                pub const IOMMU_PMU_HIT_HIGH3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201026c));

                /// IOMMU PMU Access Low 4 Register
                pub const IOMMU_PMU_ACCESS_LOW4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010270));

                /// IOMMU PMU Access High 4 Register
                pub const IOMMU_PMU_ACCESS_HIGH4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010274));

                /// IOMMU PMU Hit Low 4 Register
                pub const IOMMU_PMU_HIT_LOW4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010278));

                /// IOMMU PMU Hit High 4 Register
                pub const IOMMU_PMU_HIT_HIGH4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201027c));

                /// IOMMU PMU Access Low 5 Register
                pub const IOMMU_PMU_ACCESS_LOW5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010280));

                /// IOMMU PMU Access High 5 Register
                pub const IOMMU_PMU_ACCESS_HIGH5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010284));

                /// IOMMU PMU Hit Low 5 Register
                pub const IOMMU_PMU_HIT_LOW5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010288));

                /// IOMMU PMU Hit High 5 Register
                pub const IOMMU_PMU_HIT_HIGH5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201028c));

                /// IOMMU PMU Access Low 6 Register
                pub const IOMMU_PMU_ACCESS_LOW6_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010290));

                /// IOMMU PMU Access High 6 Register
                pub const IOMMU_PMU_ACCESS_HIGH6_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010294));

                /// IOMMU PMU Hit Low 6 Register
                pub const IOMMU_PMU_HIT_LOW6_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010298));

                /// IOMMU PMU Hit High 6 Register
                pub const IOMMU_PMU_HIT_HIGH6_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x201029c));

                /// IOMMU PMU Access Low 7 Register
                pub const IOMMU_PMU_ACCESS_LOW7_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20102d0));

                /// IOMMU PMU Access High 7 Register
                pub const IOMMU_PMU_ACCESS_HIGH7_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20102d4));

                /// IOMMU PMU Hit Low 7 Register
                pub const IOMMU_PMU_HIT_LOW7_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20102d8));

                /// IOMMU PMU Hit High 7 Register
                pub const IOMMU_PMU_HIT_HIGH7_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20102dc));

                /// IOMMU PMU Access Low 8 Register
                pub const IOMMU_PMU_ACCESS_LOW8_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20102e0));

                /// IOMMU PMU Access High 8 Register
                pub const IOMMU_PMU_ACCESS_HIGH8_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20102e4));

                /// IOMMU PMU Hit Low 8 Register
                pub const IOMMU_PMU_HIT_LOW8_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20102e8));

                /// IOMMU PMU Hit High 8 Register
                pub const IOMMU_PMU_HIT_HIGH8_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20102ec));

                /// IOMMU Total Latency Low 0 Register
                pub const IOMMU_PMU_TL_LOW0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010300));

                /// IOMMU Total Latency High 0 Register
                pub const IOMMU_PMU_TL_HIGH0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010304));

                /// IOMMU Max Latency 0 Register
                pub const IOMMU_PMU_ML0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010308));

                /// IOMMU Total Latency Low 1 Register
                pub const IOMMU_PMU_TL_LOW1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010310));

                /// IOMMU Total Latency High 1 Register
                pub const IOMMU_PMU_TL_HIGH1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010314));

                /// IOMMU Max Latency 1 Register
                pub const IOMMU_PMU_ML1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010318));

                /// IOMMU Total Latency Low 2 Register
                pub const IOMMU_PMU_TL_LOW2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010320));

                /// IOMMU Total Latency High 2 Register
                pub const IOMMU_PMU_TL_HIGH2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010324));

                /// IOMMU Max Latency 2 Register
                pub const IOMMU_PMU_ML2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010328));

                /// IOMMU Total Latency Low 3 Register
                pub const IOMMU_PMU_TL_LOW3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010330));

                /// IOMMU Total Latency High 3 Register
                pub const IOMMU_PMU_TL_HIGH3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010334));

                /// IOMMU Max Latency 3 Register
                pub const IOMMU_PMU_ML3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010338));

                /// IOMMU Total Latency Low 4 Register
                pub const IOMMU_PMU_TL_LOW4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010340));

                /// IOMMU Total Latency High 4 Register
                pub const IOMMU_PMU_TL_HIGH4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010344));

                /// IOMMU Max Latency 4 Register
                pub const IOMMU_PMU_ML4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010348));

                /// IOMMU Total Latency Low 5 Register
                pub const IOMMU_PMU_TL_LOW5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010350));

                /// IOMMU Total Latency High 5 Register
                pub const IOMMU_PMU_TL_HIGH5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010354));

                /// IOMMU Max Latency 5 Register
                pub const IOMMU_PMU_ML5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010358));

                /// IOMMU Total Latency Low 6 Register
                pub const IOMMU_PMU_TL_LOW6_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010360));

                /// IOMMU Total Latency High 6 Register
                pub const IOMMU_PMU_TL_HIGH6_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010364));

                /// IOMMU Max Latency 6 Register
                pub const IOMMU_PMU_ML6_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2010368));
            };

            /// DSP Message Box
            pub const DSP_MSGBOX = struct {
                /// MSGBOX Read IRQ Enable Register
                pub const MSGBOX_RD_IRQ_EN_REG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1701020));

                /// MSGBOX Read IRQ Enable Register
                pub const MSGBOX_RD_IRQ_EN_REG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1701024));

                /// MSGBOX_RD_IRQ_EN_REG_ group: MSGBOX Read IRQ Enable Register
                pub const MSGBOX_RD_IRQ_EN_REG_ = .{ MSGBOX_RD_IRQ_EN_REG_0, MSGBOX_RD_IRQ_EN_REG_1 };

                /// MSGBOX Read IRQ Status Register
                pub const MSGBOX_RD_IRQ_STATUS_REG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1701024));

                /// MSGBOX Read IRQ Status Register
                pub const MSGBOX_RD_IRQ_STATUS_REG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1701028));

                /// MSGBOX_RD_IRQ_STATUS_REG_ group: MSGBOX Read IRQ Status Register
                pub const MSGBOX_RD_IRQ_STATUS_REG_ = .{ MSGBOX_RD_IRQ_STATUS_REG_0, MSGBOX_RD_IRQ_STATUS_REG_1 };

                /// MSGBOX Write IRQ Enable Register
                pub const MSGBOX_WR_IRQ_EN_REG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1701030));

                /// MSGBOX Write IRQ Enable Register
                pub const MSGBOX_WR_IRQ_EN_REG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1701034));

                /// MSGBOX_WR_IRQ_EN_REG_ group: MSGBOX Write IRQ Enable Register
                pub const MSGBOX_WR_IRQ_EN_REG_ = .{ MSGBOX_WR_IRQ_EN_REG_0, MSGBOX_WR_IRQ_EN_REG_1 };

                /// MSGBOX Write IRQ Status Register
                pub const MSGBOX_WR_IRQ_STATUS_REG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1701034));

                /// MSGBOX Write IRQ Status Register
                pub const MSGBOX_WR_IRQ_STATUS_REG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1701038));

                /// MSGBOX_WR_IRQ_STATUS_REG_ group: MSGBOX Write IRQ Status Register
                pub const MSGBOX_WR_IRQ_STATUS_REG_ = .{ MSGBOX_WR_IRQ_STATUS_REG_0, MSGBOX_WR_IRQ_STATUS_REG_1 };

                /// MSGBOX Debug Register
                pub const MSGBOX_DEBUG_REG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1701040));

                /// MSGBOX Debug Register
                pub const MSGBOX_DEBUG_REG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x1701044));

                /// MSGBOX_DEBUG_REG_ group: MSGBOX Debug Register
                pub const MSGBOX_DEBUG_REG_ = .{ MSGBOX_DEBUG_REG_0, MSGBOX_DEBUG_REG_1 };
            };

            /// RISC-V Message Box
            pub const RISC_V_MSGBOX = struct {
                /// MSGBOX Read IRQ Enable Register
                pub const MSGBOX_RD_IRQ_EN_REG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601f020));

                /// MSGBOX Read IRQ Enable Register
                pub const MSGBOX_RD_IRQ_EN_REG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601f024));

                /// MSGBOX_RD_IRQ_EN_REG_ group: MSGBOX Read IRQ Enable Register
                pub const MSGBOX_RD_IRQ_EN_REG_ = .{ MSGBOX_RD_IRQ_EN_REG_0, MSGBOX_RD_IRQ_EN_REG_1 };

                /// MSGBOX Read IRQ Status Register
                pub const MSGBOX_RD_IRQ_STATUS_REG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601f024));

                /// MSGBOX Read IRQ Status Register
                pub const MSGBOX_RD_IRQ_STATUS_REG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601f028));

                /// MSGBOX_RD_IRQ_STATUS_REG_ group: MSGBOX Read IRQ Status Register
                pub const MSGBOX_RD_IRQ_STATUS_REG_ = .{ MSGBOX_RD_IRQ_STATUS_REG_0, MSGBOX_RD_IRQ_STATUS_REG_1 };

                /// MSGBOX Write IRQ Enable Register
                pub const MSGBOX_WR_IRQ_EN_REG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601f030));

                /// MSGBOX Write IRQ Enable Register
                pub const MSGBOX_WR_IRQ_EN_REG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601f034));

                /// MSGBOX_WR_IRQ_EN_REG_ group: MSGBOX Write IRQ Enable Register
                pub const MSGBOX_WR_IRQ_EN_REG_ = .{ MSGBOX_WR_IRQ_EN_REG_0, MSGBOX_WR_IRQ_EN_REG_1 };

                /// MSGBOX Write IRQ Status Register
                pub const MSGBOX_WR_IRQ_STATUS_REG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601f034));

                /// MSGBOX Write IRQ Status Register
                pub const MSGBOX_WR_IRQ_STATUS_REG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601f038));

                /// MSGBOX_WR_IRQ_STATUS_REG_ group: MSGBOX Write IRQ Status Register
                pub const MSGBOX_WR_IRQ_STATUS_REG_ = .{ MSGBOX_WR_IRQ_STATUS_REG_0, MSGBOX_WR_IRQ_STATUS_REG_1 };

                /// MSGBOX Debug Register
                pub const MSGBOX_DEBUG_REG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601f040));

                /// MSGBOX Debug Register
                pub const MSGBOX_DEBUG_REG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x601f044));

                /// MSGBOX_DEBUG_REG_ group: MSGBOX Debug Register
                pub const MSGBOX_DEBUG_REG_ = .{ MSGBOX_DEBUG_REG_0, MSGBOX_DEBUG_REG_1 };
            };

            /// Spinlock
            pub const Spinlock = struct {
                /// Spinlock System Status Register
                pub const SPINLOCK_SYSTATUS_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005000));

                /// Spinlock Status Register
                pub const SPINLOCK_STATUS_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005010));

                /// Spinlock Interrupt Enable Register
                pub const SPINLOCK_IRQ_EN_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005020));

                /// Spinlock Interrupt Status Register
                pub const SPINLOCK_IRQ_STA_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005040));

                /// Spinlock Lockid0 Register
                pub const SPINLOCK_LOCKID0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005080));

                /// Spinlock Lockid1 Register
                pub const SPINLOCK_LOCKID1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005084));

                /// Spinlock Lockid2 Register
                pub const SPINLOCK_LOCKID2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005088));

                /// Spinlock Lockid3 Register
                pub const SPINLOCK_LOCKID3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300508c));

                /// Spinlock Lockid4 Register
                pub const SPINLOCK_LOCKID4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005090));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005100));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005104));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005108));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300510c));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005110));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005114));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005118));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300511c));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005120));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005124));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005128));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300512c));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005130));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005134));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005138));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300513c));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG16 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005140));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG17 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005144));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG18 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005148));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG19 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300514c));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG20 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005150));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG21 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005154));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG22 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005158));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG23 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300515c));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG24 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005160));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG25 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005164));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG26 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005168));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG27 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300516c));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG28 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005170));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG29 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005174));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG30 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3005178));

                /// Spinlock Register
                pub const SPINLOCK_LOCK_REG31 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x300517c));

                /// SPINLOCK_LOCK_REG group: Spinlock Register
                pub const SPINLOCK_LOCK_REG = .{ SPINLOCK_LOCK_REG0, SPINLOCK_LOCK_REG1, SPINLOCK_LOCK_REG2, SPINLOCK_LOCK_REG3, SPINLOCK_LOCK_REG4, SPINLOCK_LOCK_REG5, SPINLOCK_LOCK_REG6, SPINLOCK_LOCK_REG7, SPINLOCK_LOCK_REG8, SPINLOCK_LOCK_REG9, SPINLOCK_LOCK_REG10, SPINLOCK_LOCK_REG11, SPINLOCK_LOCK_REG12, SPINLOCK_LOCK_REG13, SPINLOCK_LOCK_REG14, SPINLOCK_LOCK_REG15, SPINLOCK_LOCK_REG16, SPINLOCK_LOCK_REG17, SPINLOCK_LOCK_REG18, SPINLOCK_LOCK_REG19, SPINLOCK_LOCK_REG20, SPINLOCK_LOCK_REG21, SPINLOCK_LOCK_REG22, SPINLOCK_LOCK_REG23, SPINLOCK_LOCK_REG24, SPINLOCK_LOCK_REG25, SPINLOCK_LOCK_REG26, SPINLOCK_LOCK_REG27, SPINLOCK_LOCK_REG28, SPINLOCK_LOCK_REG29, SPINLOCK_LOCK_REG30, SPINLOCK_LOCK_REG31 };
            };

            /// Real Time CLock
            pub const RTC = struct {
                /// Low Oscillator Control Register
                pub const LOSC_CTRL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090000));

                /// LOSC Auto Switch Status Register
                pub const LOSC_AUTO_SWT_STA_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090004));

                /// Internal OSC Clock Pre-scalar Register
                pub const INTOSC_CLK_PRESCAL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090008));

                /// RTC Year-Month-Day Register
                pub const RTC_DAY_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090010));

                /// RTC Hour-Minute-Second Register
                pub const RTC_HH_MM_SS_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090014));

                /// Alarm 0 Day Setting Register
                pub const ALARM0_DAY_SET_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090020));

                /// Alarm 0 Counter Current Value Register
                pub const ALARM0_CUR_VLU_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090024));

                /// Alarm 0 Enable Register
                pub const ALARM0_ENABLE_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090028));

                /// Alarm 0 IRQ Enable Register
                pub const ALARM0_IRQ_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x709002c));

                /// Alarm 0 IRQ Status Register
                pub const ALARM0_IRQ_STA_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090030));

                /// Alarm Configuration Register
                pub const ALARM_CONFIG_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090050));

                /// 32K Fanout Control Gating Register
                pub const _32K_FOUT_CTRL_GATING_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090060));

                /// General Purpose Register
                pub const GP_DATA_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090100));

                /// General Purpose Register
                pub const GP_DATA_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090104));

                /// General Purpose Register
                pub const GP_DATA_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090108));

                /// General Purpose Register
                pub const GP_DATA_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x709010c));

                /// General Purpose Register
                pub const GP_DATA_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090110));

                /// General Purpose Register
                pub const GP_DATA_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090114));

                /// General Purpose Register
                pub const GP_DATA_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090118));

                /// General Purpose Register
                pub const GP_DATA_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x709011c));

                /// GP_DATA_REG group: General Purpose Register
                pub const GP_DATA_REG = .{ GP_DATA_REG0, GP_DATA_REG1, GP_DATA_REG2, GP_DATA_REG3, GP_DATA_REG4, GP_DATA_REG5, GP_DATA_REG6, GP_DATA_REG7 };

                /// Fast Boot Information Register0
                pub const FBOOT_INFO_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090120));

                /// Fast Boot Information Register1
                pub const FBOOT_INFO_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090124));

                /// DCXO Control Register
                pub const DCXO_CTRL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090160));

                /// RTC_VIO Regulation Register
                pub const RTC_VIO_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090190));

                /// IC Characteristic Register
                pub const IC_CHARA_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x70901f0));

                /// VDD Off Gating Control Register
                pub const VDD_OFF_GATING_CTRL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x70901f4));

                /// Efuse High Voltage Power Switch Control Register
                pub const EFUSE_HV_PWRSWT_CTRL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090204));

                /// RTC SPI Clock Control Register
                pub const RTC_SPI_CLK_CTRL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7090310));
            };

            /// Timing COntroller LCD
            pub const TCON_LCD0 = struct {
                /// LCD Global Control Register
                pub const LCD_GCTL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461000));

                /// LCD Global Interrupt Register0
                pub const LCD_GINT0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461004));

                /// LCD Global Interrupt Register1
                pub const LCD_GINT1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461008));

                /// LCD FRM Control Register
                pub const LCD_FRM_CTL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461010));

                /// LCD FRM Seed Register
                pub const LCD_FRM_SEED_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461014));

                /// LCD FRM Seed Register
                pub const LCD_FRM_SEED_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461018));

                /// LCD FRM Seed Register
                pub const LCD_FRM_SEED_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546101c));

                /// LCD FRM Seed Register
                pub const LCD_FRM_SEED_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461020));

                /// LCD FRM Seed Register
                pub const LCD_FRM_SEED_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461024));

                /// LCD FRM Seed Register
                pub const LCD_FRM_SEED_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461028));

                /// LCD_FRM_SEED_REG group: LCD FRM Seed Register
                pub const LCD_FRM_SEED_REG = .{ LCD_FRM_SEED_REG0, LCD_FRM_SEED_REG1, LCD_FRM_SEED_REG2, LCD_FRM_SEED_REG3, LCD_FRM_SEED_REG4, LCD_FRM_SEED_REG5 };

                /// LCD FRM Table Register
                pub const LCD_FRM_TAB_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546102c));

                /// LCD FRM Table Register
                pub const LCD_FRM_TAB_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461030));

                /// LCD FRM Table Register
                pub const LCD_FRM_TAB_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461034));

                /// LCD FRM Table Register
                pub const LCD_FRM_TAB_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461038));

                /// LCD_FRM_TAB_REG group: LCD FRM Table Register
                pub const LCD_FRM_TAB_REG = .{ LCD_FRM_TAB_REG0, LCD_FRM_TAB_REG1, LCD_FRM_TAB_REG2, LCD_FRM_TAB_REG3 };

                /// LCD 3D FIFO Register
                pub const LCD_3D_FIFO_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546103c));

                /// LCD Control Register
                pub const LCD_CTL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461040));

                /// LCD Data Clock Register
                pub const LCD_DCLK_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461044));

                /// LCD Basic Timing Register0
                pub const LCD_BASIC0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461048));

                /// LCD Basic Timing Register1
                pub const LCD_BASIC1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546104c));

                /// LCD Basic Timing Register2
                pub const LCD_BASIC2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461050));

                /// LCD Basic Timing Register3
                pub const LCD_BASIC3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461054));

                /// LCD HV Panel Interface Register
                pub const LCD_HV_IF_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461058));

                /// LCD CPU Panel Interface Register
                pub const LCD_CPU_IF_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461060));

                /// LCD CPU Panel Write Data Register
                pub const LCD_CPU_WR_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461064));

                /// LCD CPU Panel Read Data Register0
                pub const LCD_CPU_RD0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461068));

                /// LCD CPU Panel Read Data Register1
                pub const LCD_CPU_RD1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546106c));

                /// LCD LVDS Configure Register
                pub const LCD_LVDS_IF_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461084));

                /// LCD IO Polarity Register
                pub const LCD_IO_POL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461088));

                /// LCD IO Control Register
                pub const LCD_IO_TRI_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546108c));

                /// LCD Debug Register
                pub const LCD_DEBUG_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54610fc));

                /// LCD CEU Control Register
                pub const LCD_CEU_CTL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461100));

                /// LCD CEU Coefficient Register0
                pub const LCD_CEU_COEF_MUL_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461110));

                /// LCD CEU Coefficient Register0
                pub const LCD_CEU_COEF_MUL_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461114));

                /// LCD CEU Coefficient Register0
                pub const LCD_CEU_COEF_MUL_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461118));

                /// LCD_CEU_COEF_MUL_REG group: LCD CEU Coefficient Register0
                pub const LCD_CEU_COEF_MUL_REG = .{ LCD_CEU_COEF_MUL_REG0, LCD_CEU_COEF_MUL_REG1, LCD_CEU_COEF_MUL_REG2 };

                /// LCD CEU Coefficient Register1
                pub const LCD_CEU_COEF_ADD_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546111c));

                /// LCD CEU Coefficient Register1
                pub const LCD_CEU_COEF_ADD_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461120));

                /// LCD CEU Coefficient Register1
                pub const LCD_CEU_COEF_ADD_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461124));

                /// LCD_CEU_COEF_ADD_REG group: LCD CEU Coefficient Register1
                pub const LCD_CEU_COEF_ADD_REG = .{ LCD_CEU_COEF_ADD_REG0, LCD_CEU_COEF_ADD_REG1, LCD_CEU_COEF_ADD_REG2 };

                /// LCD CEU Coefficient Register2
                pub const LCD_CEU_COEF_RANG_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461140));

                /// LCD CEU Coefficient Register2
                pub const LCD_CEU_COEF_RANG_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461144));

                /// LCD CEU Coefficient Register2
                pub const LCD_CEU_COEF_RANG_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461148));

                /// LCD_CEU_COEF_RANG_REG group: LCD CEU Coefficient Register2
                pub const LCD_CEU_COEF_RANG_REG = .{ LCD_CEU_COEF_RANG_REG0, LCD_CEU_COEF_RANG_REG1, LCD_CEU_COEF_RANG_REG2 };

                /// LCD CPU Panel Trigger Register0
                pub const LCD_CPU_TRI0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461160));

                /// LCD CPU Panel Trigger Register1
                pub const LCD_CPU_TRI1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461164));

                /// LCD CPU Panel Trigger Register2
                pub const LCD_CPU_TRI2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461168));

                /// LCD CPU Panel Trigger Register3
                pub const LCD_CPU_TRI3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546116c));

                /// LCD CPU Panel Trigger Register4
                pub const LCD_CPU_TRI4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461170));

                /// LCD CPU Panel Trigger Register5
                pub const LCD_CPU_TRI5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461174));

                /// LCD Color Map Control Register
                pub const LCD_CMAP_CTL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461180));

                /// LCD Color Map Odd Line Register0
                pub const LCD_CMAP_ODD0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461190));

                /// LCD Color Map Odd Line Register1
                pub const LCD_CMAP_ODD1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461194));

                /// LCD Color Map Even Line Register0
                pub const LCD_CMAP_EVEN0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461198));

                /// LCD Color Map Even Line Register1
                pub const LCD_CMAP_EVEN1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546119c));

                /// LCD Safe Period Register
                pub const LCD_SAFE_PERIOD_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54611f0));

                /// LCD LVDS Analog Register 0
                pub const LCD_LVDS0_ANA_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461220));

                /// LCD LVDS Analog Register 1
                pub const LCD_LVDS1_ANA_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461224));

                /// LCD Sync Control Register
                pub const LCD_SYNC_CTL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461230));

                /// LCD Sync Position Register
                pub const LCD_SYNC_POS_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461234));

                /// LCD Slave Stop Position Register
                pub const LCD_SLAVE_STOP_POS_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461238));

                /// LCD LVDS1 IF Register
                pub const LCD_LVDS1_IF_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461244));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461400));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461404));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461408));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546140c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461410));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461414));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461418));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546141c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461420));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461424));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461428));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546142c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461430));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461434));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461438));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546143c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG16 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461440));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG17 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461444));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG18 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461448));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG19 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546144c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG20 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461450));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG21 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461454));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG22 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461458));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG23 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546145c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG24 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461460));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG25 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461464));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG26 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461468));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG27 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546146c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG28 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461470));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG29 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461474));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG30 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461478));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG31 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546147c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG32 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461480));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG33 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461484));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG34 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461488));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG35 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546148c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG36 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461490));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG37 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461494));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG38 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461498));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG39 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546149c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG40 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614a0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG41 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614a4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG42 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614a8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG43 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614ac));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG44 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614b0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG45 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614b4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG46 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614b8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG47 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614bc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG48 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614c0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG49 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614c4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG50 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614c8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG51 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614cc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG52 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614d0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG53 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614d4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG54 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614d8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG55 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614dc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG56 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614e0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG57 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614e4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG58 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614e8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG59 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614ec));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG60 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614f0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG61 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614f4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG62 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614f8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG63 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54614fc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG64 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461500));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG65 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461504));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG66 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461508));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG67 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546150c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG68 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461510));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG69 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461514));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG70 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461518));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG71 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546151c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG72 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461520));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG73 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461524));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG74 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461528));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG75 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546152c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG76 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461530));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG77 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461534));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG78 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461538));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG79 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546153c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG80 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461540));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG81 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461544));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG82 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461548));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG83 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546154c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG84 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461550));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG85 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461554));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG86 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461558));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG87 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546155c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG88 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461560));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG89 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461564));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG90 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461568));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG91 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546156c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG92 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461570));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG93 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461574));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG94 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461578));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG95 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546157c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG96 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461580));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG97 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461584));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG98 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461588));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG99 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546158c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG100 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461590));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG101 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461594));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG102 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461598));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG103 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546159c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG104 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615a0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG105 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615a4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG106 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615a8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG107 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615ac));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG108 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615b0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG109 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615b4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG110 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615b8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG111 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615bc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG112 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615c0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG113 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615c4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG114 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615c8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG115 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615cc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG116 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615d0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG117 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615d4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG118 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615d8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG119 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615dc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG120 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615e0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG121 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615e4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG122 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615e8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG123 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615ec));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG124 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615f0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG125 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615f4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG126 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615f8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG127 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54615fc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG128 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461600));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG129 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461604));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG130 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461608));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG131 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546160c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG132 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461610));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG133 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461614));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG134 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461618));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG135 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546161c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG136 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461620));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG137 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461624));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG138 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461628));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG139 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546162c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG140 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461630));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG141 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461634));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG142 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461638));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG143 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546163c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG144 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461640));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG145 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461644));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG146 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461648));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG147 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546164c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG148 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461650));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG149 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461654));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG150 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461658));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG151 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546165c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG152 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461660));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG153 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461664));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG154 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461668));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG155 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546166c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG156 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461670));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG157 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461674));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG158 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461678));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG159 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546167c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG160 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461680));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG161 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461684));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG162 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461688));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG163 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546168c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG164 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461690));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG165 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461694));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG166 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461698));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG167 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546169c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG168 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616a0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG169 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616a4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG170 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616a8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG171 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616ac));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG172 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616b0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG173 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616b4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG174 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616b8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG175 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616bc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG176 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616c0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG177 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616c4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG178 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616c8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG179 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616cc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG180 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616d0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG181 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616d4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG182 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616d8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG183 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616dc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG184 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616e0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG185 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616e4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG186 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616e8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG187 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616ec));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG188 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616f0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG189 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616f4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG190 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616f8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG191 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54616fc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG192 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461700));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG193 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461704));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG194 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461708));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG195 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546170c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG196 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461710));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG197 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461714));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG198 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461718));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG199 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546171c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG200 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461720));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG201 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461724));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG202 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461728));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG203 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546172c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG204 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461730));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG205 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461734));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG206 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461738));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG207 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546173c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG208 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461740));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG209 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461744));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG210 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461748));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG211 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546174c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG212 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461750));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG213 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461754));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG214 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461758));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG215 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546175c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG216 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461760));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG217 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461764));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG218 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461768));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG219 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546176c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG220 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461770));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG221 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461774));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG222 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461778));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG223 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546177c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG224 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461780));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG225 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461784));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG226 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461788));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG227 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546178c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG228 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461790));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG229 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461794));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG230 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5461798));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG231 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x546179c));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG232 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617a0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG233 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617a4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG234 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617a8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG235 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617ac));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG236 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617b0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG237 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617b4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG238 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617b8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG239 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617bc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG240 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617c0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG241 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617c4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG242 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617c8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG243 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617cc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG244 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617d0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG245 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617d4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG246 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617d8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG247 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617dc));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG248 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617e0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG249 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617e4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG250 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617e8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG251 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617ec));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG252 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617f0));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG253 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617f4));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG254 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617f8));

                /// LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG255 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54617fc));

                /// LCD_GAMMA_TABLE_REG group: LCD Gamma Table Register
                pub const LCD_GAMMA_TABLE_REG = .{ LCD_GAMMA_TABLE_REG0, LCD_GAMMA_TABLE_REG1, LCD_GAMMA_TABLE_REG2, LCD_GAMMA_TABLE_REG3, LCD_GAMMA_TABLE_REG4, LCD_GAMMA_TABLE_REG5, LCD_GAMMA_TABLE_REG6, LCD_GAMMA_TABLE_REG7, LCD_GAMMA_TABLE_REG8, LCD_GAMMA_TABLE_REG9, LCD_GAMMA_TABLE_REG10, LCD_GAMMA_TABLE_REG11, LCD_GAMMA_TABLE_REG12, LCD_GAMMA_TABLE_REG13, LCD_GAMMA_TABLE_REG14, LCD_GAMMA_TABLE_REG15, LCD_GAMMA_TABLE_REG16, LCD_GAMMA_TABLE_REG17, LCD_GAMMA_TABLE_REG18, LCD_GAMMA_TABLE_REG19, LCD_GAMMA_TABLE_REG20, LCD_GAMMA_TABLE_REG21, LCD_GAMMA_TABLE_REG22, LCD_GAMMA_TABLE_REG23, LCD_GAMMA_TABLE_REG24, LCD_GAMMA_TABLE_REG25, LCD_GAMMA_TABLE_REG26, LCD_GAMMA_TABLE_REG27, LCD_GAMMA_TABLE_REG28, LCD_GAMMA_TABLE_REG29, LCD_GAMMA_TABLE_REG30, LCD_GAMMA_TABLE_REG31, LCD_GAMMA_TABLE_REG32, LCD_GAMMA_TABLE_REG33, LCD_GAMMA_TABLE_REG34, LCD_GAMMA_TABLE_REG35, LCD_GAMMA_TABLE_REG36, LCD_GAMMA_TABLE_REG37, LCD_GAMMA_TABLE_REG38, LCD_GAMMA_TABLE_REG39, LCD_GAMMA_TABLE_REG40, LCD_GAMMA_TABLE_REG41, LCD_GAMMA_TABLE_REG42, LCD_GAMMA_TABLE_REG43, LCD_GAMMA_TABLE_REG44, LCD_GAMMA_TABLE_REG45, LCD_GAMMA_TABLE_REG46, LCD_GAMMA_TABLE_REG47, LCD_GAMMA_TABLE_REG48, LCD_GAMMA_TABLE_REG49, LCD_GAMMA_TABLE_REG50, LCD_GAMMA_TABLE_REG51, LCD_GAMMA_TABLE_REG52, LCD_GAMMA_TABLE_REG53, LCD_GAMMA_TABLE_REG54, LCD_GAMMA_TABLE_REG55, LCD_GAMMA_TABLE_REG56, LCD_GAMMA_TABLE_REG57, LCD_GAMMA_TABLE_REG58, LCD_GAMMA_TABLE_REG59, LCD_GAMMA_TABLE_REG60, LCD_GAMMA_TABLE_REG61, LCD_GAMMA_TABLE_REG62, LCD_GAMMA_TABLE_REG63, LCD_GAMMA_TABLE_REG64, LCD_GAMMA_TABLE_REG65, LCD_GAMMA_TABLE_REG66, LCD_GAMMA_TABLE_REG67, LCD_GAMMA_TABLE_REG68, LCD_GAMMA_TABLE_REG69, LCD_GAMMA_TABLE_REG70, LCD_GAMMA_TABLE_REG71, LCD_GAMMA_TABLE_REG72, LCD_GAMMA_TABLE_REG73, LCD_GAMMA_TABLE_REG74, LCD_GAMMA_TABLE_REG75, LCD_GAMMA_TABLE_REG76, LCD_GAMMA_TABLE_REG77, LCD_GAMMA_TABLE_REG78, LCD_GAMMA_TABLE_REG79, LCD_GAMMA_TABLE_REG80, LCD_GAMMA_TABLE_REG81, LCD_GAMMA_TABLE_REG82, LCD_GAMMA_TABLE_REG83, LCD_GAMMA_TABLE_REG84, LCD_GAMMA_TABLE_REG85, LCD_GAMMA_TABLE_REG86, LCD_GAMMA_TABLE_REG87, LCD_GAMMA_TABLE_REG88, LCD_GAMMA_TABLE_REG89, LCD_GAMMA_TABLE_REG90, LCD_GAMMA_TABLE_REG91, LCD_GAMMA_TABLE_REG92, LCD_GAMMA_TABLE_REG93, LCD_GAMMA_TABLE_REG94, LCD_GAMMA_TABLE_REG95, LCD_GAMMA_TABLE_REG96, LCD_GAMMA_TABLE_REG97, LCD_GAMMA_TABLE_REG98, LCD_GAMMA_TABLE_REG99, LCD_GAMMA_TABLE_REG100, LCD_GAMMA_TABLE_REG101, LCD_GAMMA_TABLE_REG102, LCD_GAMMA_TABLE_REG103, LCD_GAMMA_TABLE_REG104, LCD_GAMMA_TABLE_REG105, LCD_GAMMA_TABLE_REG106, LCD_GAMMA_TABLE_REG107, LCD_GAMMA_TABLE_REG108, LCD_GAMMA_TABLE_REG109, LCD_GAMMA_TABLE_REG110, LCD_GAMMA_TABLE_REG111, LCD_GAMMA_TABLE_REG112, LCD_GAMMA_TABLE_REG113, LCD_GAMMA_TABLE_REG114, LCD_GAMMA_TABLE_REG115, LCD_GAMMA_TABLE_REG116, LCD_GAMMA_TABLE_REG117, LCD_GAMMA_TABLE_REG118, LCD_GAMMA_TABLE_REG119, LCD_GAMMA_TABLE_REG120, LCD_GAMMA_TABLE_REG121, LCD_GAMMA_TABLE_REG122, LCD_GAMMA_TABLE_REG123, LCD_GAMMA_TABLE_REG124, LCD_GAMMA_TABLE_REG125, LCD_GAMMA_TABLE_REG126, LCD_GAMMA_TABLE_REG127, LCD_GAMMA_TABLE_REG128, LCD_GAMMA_TABLE_REG129, LCD_GAMMA_TABLE_REG130, LCD_GAMMA_TABLE_REG131, LCD_GAMMA_TABLE_REG132, LCD_GAMMA_TABLE_REG133, LCD_GAMMA_TABLE_REG134, LCD_GAMMA_TABLE_REG135, LCD_GAMMA_TABLE_REG136, LCD_GAMMA_TABLE_REG137, LCD_GAMMA_TABLE_REG138, LCD_GAMMA_TABLE_REG139, LCD_GAMMA_TABLE_REG140, LCD_GAMMA_TABLE_REG141, LCD_GAMMA_TABLE_REG142, LCD_GAMMA_TABLE_REG143, LCD_GAMMA_TABLE_REG144, LCD_GAMMA_TABLE_REG145, LCD_GAMMA_TABLE_REG146, LCD_GAMMA_TABLE_REG147, LCD_GAMMA_TABLE_REG148, LCD_GAMMA_TABLE_REG149, LCD_GAMMA_TABLE_REG150, LCD_GAMMA_TABLE_REG151, LCD_GAMMA_TABLE_REG152, LCD_GAMMA_TABLE_REG153, LCD_GAMMA_TABLE_REG154, LCD_GAMMA_TABLE_REG155, LCD_GAMMA_TABLE_REG156, LCD_GAMMA_TABLE_REG157, LCD_GAMMA_TABLE_REG158, LCD_GAMMA_TABLE_REG159, LCD_GAMMA_TABLE_REG160, LCD_GAMMA_TABLE_REG161, LCD_GAMMA_TABLE_REG162, LCD_GAMMA_TABLE_REG163, LCD_GAMMA_TABLE_REG164, LCD_GAMMA_TABLE_REG165, LCD_GAMMA_TABLE_REG166, LCD_GAMMA_TABLE_REG167, LCD_GAMMA_TABLE_REG168, LCD_GAMMA_TABLE_REG169, LCD_GAMMA_TABLE_REG170, LCD_GAMMA_TABLE_REG171, LCD_GAMMA_TABLE_REG172, LCD_GAMMA_TABLE_REG173, LCD_GAMMA_TABLE_REG174, LCD_GAMMA_TABLE_REG175, LCD_GAMMA_TABLE_REG176, LCD_GAMMA_TABLE_REG177, LCD_GAMMA_TABLE_REG178, LCD_GAMMA_TABLE_REG179, LCD_GAMMA_TABLE_REG180, LCD_GAMMA_TABLE_REG181, LCD_GAMMA_TABLE_REG182, LCD_GAMMA_TABLE_REG183, LCD_GAMMA_TABLE_REG184, LCD_GAMMA_TABLE_REG185, LCD_GAMMA_TABLE_REG186, LCD_GAMMA_TABLE_REG187, LCD_GAMMA_TABLE_REG188, LCD_GAMMA_TABLE_REG189, LCD_GAMMA_TABLE_REG190, LCD_GAMMA_TABLE_REG191, LCD_GAMMA_TABLE_REG192, LCD_GAMMA_TABLE_REG193, LCD_GAMMA_TABLE_REG194, LCD_GAMMA_TABLE_REG195, LCD_GAMMA_TABLE_REG196, LCD_GAMMA_TABLE_REG197, LCD_GAMMA_TABLE_REG198, LCD_GAMMA_TABLE_REG199, LCD_GAMMA_TABLE_REG200, LCD_GAMMA_TABLE_REG201, LCD_GAMMA_TABLE_REG202, LCD_GAMMA_TABLE_REG203, LCD_GAMMA_TABLE_REG204, LCD_GAMMA_TABLE_REG205, LCD_GAMMA_TABLE_REG206, LCD_GAMMA_TABLE_REG207, LCD_GAMMA_TABLE_REG208, LCD_GAMMA_TABLE_REG209, LCD_GAMMA_TABLE_REG210, LCD_GAMMA_TABLE_REG211, LCD_GAMMA_TABLE_REG212, LCD_GAMMA_TABLE_REG213, LCD_GAMMA_TABLE_REG214, LCD_GAMMA_TABLE_REG215, LCD_GAMMA_TABLE_REG216, LCD_GAMMA_TABLE_REG217, LCD_GAMMA_TABLE_REG218, LCD_GAMMA_TABLE_REG219, LCD_GAMMA_TABLE_REG220, LCD_GAMMA_TABLE_REG221, LCD_GAMMA_TABLE_REG222, LCD_GAMMA_TABLE_REG223, LCD_GAMMA_TABLE_REG224, LCD_GAMMA_TABLE_REG225, LCD_GAMMA_TABLE_REG226, LCD_GAMMA_TABLE_REG227, LCD_GAMMA_TABLE_REG228, LCD_GAMMA_TABLE_REG229, LCD_GAMMA_TABLE_REG230, LCD_GAMMA_TABLE_REG231, LCD_GAMMA_TABLE_REG232, LCD_GAMMA_TABLE_REG233, LCD_GAMMA_TABLE_REG234, LCD_GAMMA_TABLE_REG235, LCD_GAMMA_TABLE_REG236, LCD_GAMMA_TABLE_REG237, LCD_GAMMA_TABLE_REG238, LCD_GAMMA_TABLE_REG239, LCD_GAMMA_TABLE_REG240, LCD_GAMMA_TABLE_REG241, LCD_GAMMA_TABLE_REG242, LCD_GAMMA_TABLE_REG243, LCD_GAMMA_TABLE_REG244, LCD_GAMMA_TABLE_REG245, LCD_GAMMA_TABLE_REG246, LCD_GAMMA_TABLE_REG247, LCD_GAMMA_TABLE_REG248, LCD_GAMMA_TABLE_REG249, LCD_GAMMA_TABLE_REG250, LCD_GAMMA_TABLE_REG251, LCD_GAMMA_TABLE_REG252, LCD_GAMMA_TABLE_REG253, LCD_GAMMA_TABLE_REG254, LCD_GAMMA_TABLE_REG255 };
            };

            /// Timing COntroller TV
            pub const TCON_TV0 = struct {
                /// TV Global Control Register
                pub const TV_GCTL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470000));

                /// TV Global Interrupt Register0
                pub const TV_GINT0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470004));

                /// TV Global Interrupt Register1
                pub const TV_GINT1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470008));

                /// TV Source Control Register
                pub const TV_SRC_CTL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470040));

                /// TV Control Register
                pub const TV_CTL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470090));

                /// TV Basic Timing Register0
                pub const TV_BASIC0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470094));

                /// TV Basic Timing Register1
                pub const TV_BASIC1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470098));

                /// TV Basic Timing Register2
                pub const TV_BASIC2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x547009c));

                /// TV Basic Timing Register3
                pub const TV_BASIC3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54700a0));

                /// TV Basic Timing Register4
                pub const TV_BASIC4_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54700a4));

                /// TV Basic Timing Register5
                pub const TV_BASIC5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54700a8));

                /// TV SYNC Signal Polarity Register
                pub const TV_IO_POL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470088));

                /// TV SYNC Signal IO Control Register
                pub const TV_IO_TRI_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x547008c));

                /// TV Debug Register
                pub const TV_DEBUG_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54700fc));

                /// TV CEU Control Register
                pub const TV_CEU_CTL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470100));

                /// TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470110));

                /// TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470114));

                /// TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470118));

                /// TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x547011c));

                /// TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470120));

                /// TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470124));

                /// TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470128));

                /// TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x547012c));

                /// TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470130));

                /// TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470134));

                /// TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470138));

                /// TV_CEU_COEF_MUL_REG group: TV CEU Coefficient Register0
                pub const TV_CEU_COEF_MUL_REG = .{ TV_CEU_COEF_MUL_REG0, TV_CEU_COEF_MUL_REG1, TV_CEU_COEF_MUL_REG2, TV_CEU_COEF_MUL_REG3, TV_CEU_COEF_MUL_REG4, TV_CEU_COEF_MUL_REG5, TV_CEU_COEF_MUL_REG6, TV_CEU_COEF_MUL_REG7, TV_CEU_COEF_MUL_REG8, TV_CEU_COEF_MUL_REG9, TV_CEU_COEF_MUL_REG10 };

                /// TV CEU Coefficient Register2
                pub const TV_CEU_COEF_RANG_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470140));

                /// TV CEU Coefficient Register2
                pub const TV_CEU_COEF_RANG_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470144));

                /// TV CEU Coefficient Register2
                pub const TV_CEU_COEF_RANG_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470148));

                /// TV_CEU_COEF_RANG_REG group: TV CEU Coefficient Register2
                pub const TV_CEU_COEF_RANG_REG = .{ TV_CEU_COEF_RANG_REG0, TV_CEU_COEF_RANG_REG1, TV_CEU_COEF_RANG_REG2 };

                /// TV Safe Period Register
                pub const TV_SAFE_PERIOD_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x54701f0));

                /// TV Fill Data Control Register
                pub const TV_FILL_CTL_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470300));

                /// TV Fill Data Begin Register
                pub const TV_FILL_BEGIN_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470304));

                /// TV Fill Data Begin Register
                pub const TV_FILL_BEGIN_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470308));

                /// TV Fill Data Begin Register
                pub const TV_FILL_BEGIN_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x547030c));

                /// TV_FILL_BEGIN_REG group: TV Fill Data Begin Register
                pub const TV_FILL_BEGIN_REG = .{ TV_FILL_BEGIN_REG0, TV_FILL_BEGIN_REG1, TV_FILL_BEGIN_REG2 };

                /// TV Fill Data End Register
                pub const TV_FILL_END_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470308));

                /// TV Fill Data End Register
                pub const TV_FILL_END_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x547030c));

                /// TV Fill Data End Register
                pub const TV_FILL_END_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470310));

                /// TV_FILL_END_REG group: TV Fill Data End Register
                pub const TV_FILL_END_REG = .{ TV_FILL_END_REG0, TV_FILL_END_REG1, TV_FILL_END_REG2 };

                /// TV Fill Data Value Register
                pub const TV_FILL_DATA_REG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x547030c));

                /// TV Fill Data Value Register
                pub const TV_FILL_DATA_REG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470310));

                /// TV Fill Data Value Register
                pub const TV_FILL_DATA_REG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470314));

                /// TV_FILL_DATA_REG group: TV Fill Data Value Register
                pub const TV_FILL_DATA_REG = .{ TV_FILL_DATA_REG0, TV_FILL_DATA_REG1, TV_FILL_DATA_REG2 };

                /// TCON Data IO Polarity Control0
                pub const TV_DATA_IO_POL0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470330));

                /// TCON Data IO Polarity Control1
                pub const TV_DATA_IO_POL1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470334));

                /// TCON Data IO Enable Control0
                pub const TV_DATA_IO_TRI0_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470338));

                /// TCON Data IO Enable Control1
                pub const TV_DATA_IO_TRI1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x547033c));

                /// TV Pixeldepth Mode Control Register
                pub const TV_PIXELDEPTH_MODE_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5470340));
            };

            /// TV Encoder TOP
            pub const TVE_TOP = struct {
                /// TV Encoder DAC MAP Register
                pub const TVE_DAC_MAP = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5600020));

                /// TV Encoder DAC STAUTS Register
                pub const TVE_DAC_STATUS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5600024));

                /// TV Encoder DAC CFG0 Register
                pub const TVE_DAC_CFG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5600028));

                /// TV Encoder DAC CFG1 Register
                pub const TVE_DAC_CFG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x560002c));

                /// TV Encoder DAC CFG2 Register
                pub const TVE_DAC_CFG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5600030));

                /// TV Encoder DAC CFG2 Register
                pub const TVE_DAC_CFG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5600034));

                /// TV Encoder DAC TEST Register
                pub const TVE_DAC_TEST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x56000f0));
            };

            /// TV Encoder
            pub const TVE = struct {
                /// TV Encoder Clock Gating Register
                pub const TVE_000_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604000));

                /// TV Encoder Configuration Register
                pub const TVE_004_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604004));

                /// TV Encoder DAC Register1
                pub const TVE_008_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604008));

                /// TV Encoder Notch and DAC Delay Register
                pub const TVE_00C_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x560400c));

                /// TV Encoder Chroma Frequency Register
                pub const TVE_010_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604010));

                /// TV Encoder Front/Back Porch Register
                pub const TVE_014_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604014));

                /// TV Encoder HD Mode VSYNC Register
                pub const TVE_018_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604018));

                /// TV Encoder Line Number Register
                pub const TVE_01C_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x560401c));

                /// TV Encoder Level Register
                pub const TVE_020_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604020));

                /// TV Encoder DAC Register2
                pub const TVE_024_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604024));

                /// TV Encoder Auto Detection Enable Register
                pub const TVE_030_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604030));

                /// TV Encoder Auto Detection Interrupt Status Register
                pub const TVE_034_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604034));

                /// TV Encoder Auto Detection Status Register
                pub const TVE_038_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604038));

                /// TV Encoder Auto Detection De-bounce Setting Register
                pub const TVE_03C_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x560403c));

                /// TV Encoder Auto Detect Configuration Register0
                pub const TVE_0F8_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x56040f8));

                /// TV Encoder Auto Detect Configuration Register1
                pub const TVE_0FC_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x56040fc));

                /// TV Encoder Color Burst Phase Reset Configuration Register
                pub const TVE_100_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604100));

                /// TV Encoder VSYNC Number Register
                pub const TVE_104_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604104));

                /// TV Encoder Notch Filter Frequency Register
                pub const TVE_108_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604108));

                /// TV Encoder Cb/Cr Level/Gain Register
                pub const TVE_10C_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x560410c));

                /// TV Encoder Tint and Color Burst Phase Register
                pub const TVE_110_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604110));

                /// TV Encoder Burst Width Register
                pub const TVE_114_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604114));

                /// TV Encoder Cb/Cr Gain Register
                pub const TVE_118_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604118));

                /// TV Encoder Sync and VBI Level Register
                pub const TVE_11C_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x560411c));

                /// TV Encoder White Level Register
                pub const TVE_120_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604120));

                /// TV Encoder Video Active Line Register
                pub const TVE_124_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604124));

                /// TV Encoder Video Chroma BW and CompGain Register
                pub const TVE_128_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604128));

                /// TV Encoder Register
                pub const TVE_12C_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x560412c));

                /// TV Encoder Re-sync Parameters Register
                pub const TVE_130_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604130));

                /// TV Encoder Slave Parameter Register
                pub const TVE_134_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604134));

                /// TV Encoder Configuration Register0
                pub const TVE_138_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604138));

                /// TV Encoder Configuration Register1
                pub const TVE_13C_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x560413c));

                /// TV Encoder Low Pass Control Register
                pub const TVE_380_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604380));

                /// TV Encoder Low Pass Filter Control Register
                pub const TVE_384_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5604384));
            };

            /// CMOS Sensor Interface Controller
            pub const CSIC = struct {};

            /// Television Decoder TOP
            pub const TVD_TOP = struct {
                /// TVD TOP MAP Register
                pub const TVD_TOP_MAP = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00000));

                /// TVD 3D DMA CONTROL Register1
                pub const TVD_3D_CTL1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00008));

                /// TVD 3D DMA CONTROL Register2
                pub const TVD_3D_CTL2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c0000c));

                /// TVD 3D DMA CONTROL Register3
                pub const TVD_3D_CTL3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00010));

                /// TVD 3D DMA CONTROL Register4
                pub const TVD_3D_CTL4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00014));

                /// TVD 3D DMA CONTROL Register5
                pub const TVD_3D_CTL5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00018));

                /// TVD TOP CONTROL Register
                pub const TVD_TOP_CTL0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00024));

                /// TVD TOP CONTROL Register
                pub const TVD_TOP_CTL1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00028));

                /// TVD TOP CONTROL Register
                pub const TVD_TOP_CTL2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c0002c));

                /// TVD TOP CONTROL Register
                pub const TVD_TOP_CTL3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00030));

                /// TVD_TOP_CTL group: TVD TOP CONTROL Register
                pub const TVD_TOP_CTL = .{ TVD_TOP_CTL0, TVD_TOP_CTL1, TVD_TOP_CTL2, TVD_TOP_CTL3 };

                /// TVD ADC CONTROL Register
                pub const TVD_ADC_CTL0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00028));

                /// TVD ADC CONTROL Register
                pub const TVD_ADC_CTL1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c0002c));

                /// TVD ADC CONTROL Register
                pub const TVD_ADC_CTL2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00030));

                /// TVD ADC CONTROL Register
                pub const TVD_ADC_CTL3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00034));

                /// TVD_ADC_CTL group: TVD ADC CONTROL Register
                pub const TVD_ADC_CTL = .{ TVD_ADC_CTL0, TVD_ADC_CTL1, TVD_ADC_CTL2, TVD_ADC_CTL3 };

                /// TVD ADC CONFIGURATION Register
                pub const TVD_ADC_CFG0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c0002c));

                /// TVD ADC CONFIGURATION Register
                pub const TVD_ADC_CFG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00030));

                /// TVD ADC CONFIGURATION Register
                pub const TVD_ADC_CFG2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00034));

                /// TVD ADC CONFIGURATION Register
                pub const TVD_ADC_CFG3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c00038));

                /// TVD_ADC_CFG group: TVD ADC CONFIGURATION Register
                pub const TVD_ADC_CFG = .{ TVD_ADC_CFG0, TVD_ADC_CFG1, TVD_ADC_CFG2, TVD_ADC_CFG3 };
            };

            /// Television Decoder
            pub const TVD0 = struct {
                /// TVD MODULE CONTROL Register
                pub const TVD_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01000));

                /// TVD MODE CONTROL Register
                pub const TVD_MODE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01004));

                /// TVD CLAMP And AGC CONTROL Register1
                pub const TVD_CLAMP_AGC1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01008));

                /// TVD CLAMP And AGC CONTROL Register2
                pub const TVD_CLAMP_AGC2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c0100c));

                /// TVD HLOCK CONTROL Register1
                pub const TVD_HLOCK1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01010));

                /// TVD HLOCK CONTROL Register2
                pub const TVD_HLOCK2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01014));

                /// TVD HLOCK CONTROL Register3
                pub const TVD_HLOCK3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01018));

                /// TVD HLOCK CONTROL Register4
                pub const TVD_HLOCK4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c0101c));

                /// TVD HLOCK CONTROL Register5
                pub const TVD_HLOCK5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01020));

                /// TVD VLOCK CONTROL Register1
                pub const TVD_VLOCK1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01024));

                /// TVD VLOCK CONTROL Register2
                pub const TVD_VLOCK2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01028));

                /// TVD CHROMA LOCK CONTROL Register1
                pub const TVD_CLOCK1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01030));

                /// TVD CHROMA LOCK CONTROL Register2
                pub const TVD_CLOCK2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01034));

                /// TVD YC SEPERATION CONROL Register1
                pub const TVD_YC_SEP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01040));

                /// TVD YC SEPERATION CONROL Register2
                pub const TVD_YC_SEP2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01044));

                /// TVD ENHANCEMENT CONTROL Register1
                pub const TVD_ENHANCE1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01050));

                /// TVD ENHANCEMENT CONTROL Register2
                pub const TVD_ENHANCE2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01054));

                /// TVD ENHANCEMENT CONTROL Register3
                pub const TVD_ENHANCE3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01058));

                /// TVD WB DMA CONTROL Register1
                pub const TVD_WB1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01060));

                /// TVD WB DMA CONTROL Register2
                pub const TVD_WB2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01064));

                /// TVD WB DMA CONTROL Register3
                pub const TVD_WB3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01068));

                /// TVD WB DMA CONTROL Register4
                pub const TVD_WB4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c0106c));

                /// TVD DMA Interrupt Control Register
                pub const TVD_IRQ_CTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01080));

                /// TVD DMA Interrupt Status Register
                pub const TVD_IRQ_STATUS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01090));

                /// TVD DEBUG CONTROL Register1
                pub const TVD_DEBUG1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01100));

                /// TVD DEBUG STATUS Register1
                pub const TVD_STATUS1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01180));

                /// TVD DEBUG STATUS Register2
                pub const TVD_STATUS2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01184));

                /// TVD DEBUG STATUS Register3
                pub const TVD_STATUS3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01188));

                /// TVD DEBUG STATUS Register4
                pub const TVD_STATUS4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c0118c));

                /// TVD DEBUG STATUS Register5
                pub const TVD_STATUS5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01190));

                /// TVD DEBUG STATUS Register6
                pub const TVD_STATUS6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x5c01194));
            };

            /// SD/MMC Host Controller
            pub const SMHC0 = struct {
                /// Control Register
                pub const SMHC_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Software Reset
                    SOFT_RST: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        reset = 1,
                    } = .no_effect,

                    /// [1:1] FIFO Reset
                    FIFO_RST: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        reset = 1,
                    } = .no_effect,

                    /// [2:2] DMA Reset
                    DMA_RST: u1 = 0,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] GLobal Interrupt Enable
                    INE_ENB: enum(u1) {
                        /// Disable interrupts
                        disable = 0,

                        /// Enable interrupts
                        enable = 1,
                    } = .disable,

                    /// [5:5] DMA Global Enable
                    DMA_ENB: enum(u1) {
                        /// Disable DMA to transfer data via AHB bus
                        disable = 0,

                        /// Enable DMA to transfer data
                        enable = 1,
                    } = .disable,

                    /// [6:7]
                    res1: u2 = 0,

                    /// [8:8] Card Detect (Data[3] status) De-bounce Enable
                    CD_DBC_ENB: enum(u1) {
                        /// Disable de-bounce
                        disable = 0,

                        /// Enable de-bounce
                        enable = 1,
                    } = .disable,

                    /// [9:9]
                    res2: u1 = 0,

                    /// [10:10] DDR Mode Select
                    DDR_MOD_SEL: enum(u1) {
                        /// SDR mode
                        SDR = 0,

                        /// DDR mode
                        DDR = 1,
                    } = .SDR,

                    /// [11:11] Time unit for data line
                    TIME_UNIT_DAT: enum(u1) {
                        /// 1 card clock period
                        C1 = 0,

                        /// 256 card clock period
                        C256 = 1,
                    } = .C1,

                    /// [12:12] Time unit for command line
                    TIME_UNIT_CMD: enum(u1) {
                        /// 1 card clock period
                        C1 = 0,

                        /// 256 card clock period
                        C256 = 1,
                    } = .C1,

                    /// [13:30]
                    res3: u18 = 0,

                    /// [31:31] FIFO Accesss Mode
                    FIFO_AC_MOD: enum(u1) {
                        /// DMA bus
                        DMA = 0,

                        /// AHB bus
                        AHB = 1,
                    } = .DMA,
                }), @ptrFromInt(0x4020000));

                /// Clock Control Register
                pub const SMHC_CLKDIV = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Card Clock Divider
                    CCLK_DIV: u8 = 0,

                    /// [8:15]
                    res0: u8 = 0,

                    /// [16:16] Card Clock Enable
                    CCLK_ENB: enum(u1) {
                        /// Card Clock is off
                        off = 0,

                        /// Card Clock is on
                        on = 1,
                    } = .off,

                    /// [17:17] Card Clock Output Control
                    CCLK_CTRL: enum(u1) {
                        /// Card clock is always on
                        on = 0,

                        /// Turn off card clock when FSM is in IDLE state
                        off_idle = 1,
                    } = .on,

                    /// [18:30]
                    res1: u13 = 0,

                    /// [31:31]
                    MASK_DATA0: enum(u1) {
                        /// Do not mask data0 when update clock
                        not_mask = 0,

                        /// Mask data0 when update clock
                        mask = 1,
                    } = .not_mask,
                }), @ptrFromInt(0x4020004));

                /// Time Out Register
                pub const SMHC_TMOUT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Response Timeout Limit
                    RTO_LMT: u8 = 0,

                    /// [8:31] Data Iimeout Limit
                    DTO_LMT: u24 = 0,
                }), @ptrFromInt(0x4020008));

                /// Bus Width Register
                pub const SMHC_CTYPE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Card Width
                    CARD_WID: enum(u2) {
                        /// 1-bit width
                        b1 = 0b00,

                        /// 4-bit width
                        b4 = 0b01,

                        /// 8-bit width
                        b8 = 0b10,
                    } = .b1,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x402000c));

                /// Block Size Register
                pub const SMHC_BLKSIZ = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15] Block SIze
                    BLK_SZ: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x4020010));

                /// Byte Count Register
                pub const SMHC_BYTCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4020014));

                /// Command Register
                pub const SMHC_CMD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] CMD Index
                    CMD_IDX: u6 = 0,

                    /// [6:6] Response Receive
                    RESP_RCV: enum(u1) {
                        /// Command without response
                        without = 0,

                        /// Command with response
                        with = 1,
                    } = .without,

                    /// [7:7] Response Type
                    LONG_RESP: enum(u1) {
                        /// Short Response (48 bits)
                        short = 0,

                        /// Long Response (136 bits)
                        long = 1,
                    } = .short,

                    /// [8:8] Check Response CRC
                    CHK_RESP_CRC: enum(u1) {
                        /// Do not check response CRC
                        not_check = 0,

                        /// Check response CRC
                        check = 1,
                    } = .not_check,

                    /// [9:9] Data Transfer
                    DATA_TRANS: enum(u1) {
                        /// Without data transfer
                        without = 0,

                        /// With data transfer
                        with = 1,
                    } = .without,

                    /// [10:10] Transfer Direction
                    TRANS_DIR: enum(u1) {
                        /// Read operation
                        read = 0,

                        /// Write operation
                        write = 1,
                    } = .read,

                    /// [11:11] Transfer Mode
                    TRANS_MODE: enum(u1) {
                        /// Block data transfer command
                        block = 0,

                        /// Stream data transfer commmand
                        stream = 1,
                    } = .block,

                    /// [12:12] Send Stop CMD Automatically (CMD12)
                    STOP_CMD_FLAG: enum(u1) {
                        /// Do not send stop command at the end of the data transfer
                        no_stop = 0,

                        /// Send stop command automatically at the end of the data transfer
                        auto_stop = 1,
                    } = .no_stop,

                    /// [13:13] Wait for Data Transfer Over
                    WAIT_PRE_OVER: enum(u1) {
                        /// Send command at once, does not care about data transferring
                        at_once = 0,

                        /// Wait for data transfer completion before sending the current command
                        wait = 1,
                    } = .at_once,

                    /// [14:14] Stop Abort Command
                    STOP_ABT_CMD: enum(u1) {
                        /// Normal command sending
                        normal = 0,

                        /// Send Stop or Abort command to stop the current data transfer in progress
                        stop = 1,
                    } = .normal,

                    /// [15:15] Send Initialization
                    SEND_INIT_SEQ: enum(u1) {
                        /// Normal command sending
                        normal = 0,

                        /// Send initialization sequence before sending this command
                        init_cmd = 1,
                    } = .normal,

                    /// [16:20]
                    res0: u5 = 0,

                    /// [21:21] Change Clock
                    PRG_CLK: enum(u1) {
                        /// Normal command
                        normal = 0,

                        /// Change Card Clock
                        change = 1,
                    } = .normal,

                    /// [22:23]
                    res1: u2 = 0,

                    /// [24:25] Boot Mode
                    BOOT_MOD: enum(u2) {
                        /// Normal command
                        normal = 0b00,

                        /// Mandatory Boot operation
                        mandatory_boot = 0b01,

                        /// Alternate Boot operation
                        alternate_boot = 0b10,
                    } = .normal,

                    /// [26:26] Expect Boot Acknowledge
                    EXP_BOOT_ACK: u1 = 0,

                    /// [27:27] Boot Abort
                    BOOT_ABT: u1 = 0,

                    /// [28:28] Voltage Switch
                    VOL_SW: enum(u1) {
                        /// Normal command
                        normal = 0,

                        /// Voltage switch command, set for CMD11 only
                        voltage_switch = 1,
                    } = .normal,

                    /// [29:30]
                    res2: u2 = 0,

                    /// [31:31] Start Command
                    CMD_LOAD: u1 = 0,
                }), @ptrFromInt(0x4020018));

                /// Command Argument Register
                pub const SMHC_CMDARG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402001c));

                /// Response 0 Register
                pub const SMHC_RESP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4020020));

                /// Response 1 Register
                pub const SMHC_RESP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4020024));

                /// Response 2 Register
                pub const SMHC_RESP2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4020028));

                /// Response 3 Register
                pub const SMHC_RESP3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402002c));

                /// Interrupt Mask Register
                pub const SMHC_INTMASK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] Response Error Interrupt Enable
                    RE_INT_EN: u1 = 0,

                    /// [2:2] Command Complete Interrupt Enable
                    CC_INT_EN: u1 = 0,

                    /// [3:3] Data Transfer Complete Interrupt Enable
                    DTC_INT_EN: u1 = 0,

                    /// [4:4] Data Transmit Request Interrupt Enable
                    DTR_INT_EN: u1 = 0,

                    /// [5:5] Data Receive Request Interrupt Enable
                    DRR_INT_EN: u1 = 0,

                    /// [6:6] Response CRC Error Interrupt Enable
                    RCE_INT_EN: u1 = 0,

                    /// [7:7] Data CRC Error Interrupt Enable
                    DCE_INT_EN: u1 = 0,

                    /// [8:8] Response Timeout/Boot ACK Received Interrupt Enable
                    RTO_BACK_INT_EN: u1 = 0,

                    /// [9:9] Data Timeout/Boot Data Start Interrupt Enable
                    DTO_BDS_INT_EN: u1 = 0,

                    /// [10:10] Data Starvation Timeout/V1.8 Switch Done Interrupt Enable
                    DSTO_VSD_INT_EN: u1 = 0,

                    /// [11:11] FIFO Underrun/Overflow Interrupt Enable
                    FU_FO_INT_EN: u1 = 0,

                    /// [12:12] Command Busy and Illegal Write Interrupt Enable
                    CB_IW_INT_EN: u1 = 0,

                    /// [13:13] Data Start Error Interrupt Enable
                    DSE_BC_INT_EN: u1 = 0,

                    /// [14:14] Auto Command Done Interrupt Enable
                    ACD_INT_EN: u1 = 0,

                    /// [15:15] Data End-bit Error Interrupt Enable
                    DEE_INT_EN: u1 = 0,

                    /// [16:16] SDIO Interrupt Enable
                    SDIO_INT_EN: u1 = 0,

                    /// [17:29]
                    res1: u13 = 0,

                    /// [30:30] Card Inserted Interrupt Enable
                    CARD_INSERT_INT_EN: u1 = 0,

                    /// [31:31] Card Removed Interrupt Enable
                    CARD_REMOVAL_INT_EN: u1 = 0,
                }), @ptrFromInt(0x4020030));

                /// Masked Interrupt Status Register
                pub const SMHC_MINTSTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] Response Errors
                    M_RE_INT: u1 = 0,

                    /// [2:2] Command Complete
                    M_CC_INT: u1 = 0,

                    /// [3:3] Data Transfer Complete
                    M_DTC_INT: u1 = 0,

                    /// [4:4] Data Transmit Request
                    M_DTR_INT: u1 = 0,

                    /// [5:5] Data Receive Request
                    M_DRR_INT: u1 = 0,

                    /// [6:6] Response CRC Error
                    M_RCE_INT: u1 = 0,

                    /// [7:7] Data CRC Error
                    M_DCE_INT: u1 = 0,

                    /// [8:8] Response Timeout/Boot ACK Received
                    M_RTO_BACK_INT: u1 = 0,

                    /// [9:9] Data Timeout/Boot Data Start
                    M_DTO_BDS_INT: u1 = 0,

                    /// [10:10] Data Starvation Timeout/V1.8 Switch Done
                    M_DSTO_VSD_INT: u1 = 0,

                    /// [11:11] FIFO Underrun/Overflow
                    M_FU_FO_INT: u1 = 0,

                    /// [12:12] Command Busy and Illegal Write
                    M_CB_IW_INT: u1 = 0,

                    /// [13:13] Data Start Error/Busy Clear
                    M_DSE_BC_INT: u1 = 0,

                    /// [14:14] Auto Command Done
                    M_ACD_INT: u1 = 0,

                    /// [15:15] Data End-bit Error
                    M_DEE_INT: u1 = 0,

                    /// [16:16] SDIO Interrupt
                    M_SDIO_INT: u1 = 0,

                    /// [17:29]
                    res1: u13 = 0,

                    /// [30:30] Card Inserted
                    M_CARD_INSERT: u1 = 0,

                    /// [31:31] Card Removed
                    M_CARD_REMOVAL_INT: u1 = 0,
                }), @ptrFromInt(0x4020034));

                /// Raw Interrupt Status Register
                pub const SMHC_RINTSTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] Response Error
                    RE: u1 = 0,

                    /// [2:2] Command Complete
                    CC: u1 = 0,

                    /// [3:3] Data Transfer Complete
                    DTC: u1 = 0,

                    /// [4:4] Data Transmit Request
                    DTR: u1 = 0,

                    /// [5:5] Data Receive Request
                    DRR: u1 = 0,

                    /// [6:6] Response CRC Error
                    RCE: u1 = 0,

                    /// [7:7] Data CRC Error
                    DCE: u1 = 0,

                    /// [8:8] Response Timeout/Boot ACK Received
                    RTO_BACK: u1 = 0,

                    /// [9:9] Data Timeout/Boot Data Start
                    DTO_BDS: u1 = 0,

                    /// [10:10] Data Starvation Timeout/V1.8 Switch Done
                    DSTO_VSD: u1 = 0,

                    /// [11:11] FIFO Underrun/Overflow
                    FU_FO: u1 = 0,

                    /// [12:12] Command Busy and Illegal Write
                    CB_IW: u1 = 0,

                    /// [13:13] Data Start Error/Busy Clear
                    DSE_BC: u1 = 0,

                    /// [14:14] Auto Command Done
                    ACD: u1 = 0,

                    /// [15:15] Data End-bit Error
                    DEE: u1 = 0,

                    /// [16:16] SDIO Interrupt
                    SDIOI_INT: u1 = 0,

                    /// [17:29]
                    res1: u13 = 0,

                    /// [30:30] Card Inserted
                    CARD_INSERT: u1 = 0,

                    /// [31:31] Card Removed
                    CARD_REMOVAL: u1 = 0,
                }), @ptrFromInt(0x4020038));

                /// Status Register
                pub const SMHC_STATUS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] FIFO RX Water Level Flag
                    FIFO_RX_LEVEL: enum(u1) {
                        /// FIFO does not reach the receive trigger level
                        not_reach = 0,

                        /// FIFO reaches the receive trigger level
                        reach = 1,
                    } = .not_reach,

                    /// [1:1] FIFO TX Water Level Flag
                    FIFO_TX_LEVEL: enum(u1) {
                        /// FIFO does not reach the transmit trigger level
                        not_reach = 0,

                        /// FIFO reaches the transmit trigger level
                        reach = 1,
                    } = .not_reach,

                    /// [2:2] FIFO Empty
                    FIFO_EMPTY: enum(u1) {
                        /// FIFO is not empty
                        not_sempty = 0,

                        /// FIFO is empty
                        empty = 1,
                    } = .not_sempty,

                    /// [3:3] sFIFO Full
                    FIFO_FULL: enum(u1) {
                        /// FIFO is not full
                        not_full = 0,

                        /// FIFO is full
                        full = 1,
                    } = .not_full,

                    /// [4:7] Command FSM States
                    FSM_STA: enum(u4) {
                        /// Idle
                        idle = 0b0000,

                        /// Send init sequence
                        sis = 0b0001,

                        /// TX CMD start bit
                        txcsb = 0b0010,

                        /// TX CMD TX bit
                        txctb = 0b0011,

                        /// TX CMD index + argument
                        txcia = 0b0100,

                        /// TX CMD CRC7
                        txcc = 0b0101,

                        /// TX CMD end bit
                        txceb = 0b0110,

                        /// RX response start bit
                        rxrsb = 0b0111,

                        /// RX response IRQ responses
                        rxrir = 0b1000,

                        /// RX response TX bit
                        rxrtb = 0b1001,

                        /// RX response CMD index
                        rxrci = 0b1010,

                        /// RX response data
                        rxrd = 0b1011,

                        /// RX response CRC7
                        rxrc = 0b1100,

                        /// RX response end bit
                        rxreb = 0b1101,

                        /// CMD path wait NCC
                        cpwn = 0b1110,

                        /// Wait; CMD-to-response turn around
                        wait = 0b1111,
                    } = .idle,

                    /// [8:8] Data[3] Statuss
                    CARD_PRESENT: enum(u1) {
                        /// The card is not present
                        not_present = 0,

                        /// The card is present
                        present = 1,
                    } = .not_present,

                    /// [9:9] Card Data Busy
                    CARD_BUSY: enum(u1) {
                        /// Card data is not busy
                        not_busy = 0,

                        /// Card data is busy
                        busy = 1,
                    } = .not_busy,

                    /// [10:10] Data FSM Busy
                    FSM_BUSY: u1 = 0,

                    /// [11:16] Response Index
                    RESP_IDX: u6 = 0,

                    /// [17:25] FIFO Level
                    FIFO_LEVEL: u9 = 0,

                    /// [26:30]
                    res0: u5 = 0,

                    /// [31:31] DMA Request
                    DMA_REQ: u1 = 0,
                }), @ptrFromInt(0x402003c));

                /// FIFO Water Level Register
                pub const SMHC_FIFOTH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] TX Trigger Level
                    TX_TL: u8 = 0,

                    /// [8:15]
                    res0: u8 = 0,

                    /// [16:23] RX Trigger Level
                    RX_TL: u8 = 0,

                    /// [24:27]
                    res1: u4 = 0,

                    /// [28:30] sBurst Size of Multiple Transaction
                    BSIZE_OF_TRANS: enum(u3) {
                        ///  1 transfer
                        T1 = 0b000,

                        ///  4 transfers
                        T4 = 0b001,

                        ///  8 transfers
                        T8 = 0b010,

                        ///  16 transfers
                        T16 = 0b011,
                    } = .T1,

                    /// [31:31]
                    res2: u1 = 0,
                }), @ptrFromInt(0x4020040));

                /// FIFO Function Select Register
                pub const SMHC_FUNS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Host Send MMC IRQ Response
                    HOST_SEND_MIMC_IRQRESQ: enum(u1) {
                        ///
                        ignored = 0,

                        /// Send auto IRQ response
                        send = 1,
                    } = .ignored,

                    /// [1:1] Read Wait
                    READ_WAIT: enum(u1) {
                        /// Clear SDIO read wait
                        clear = 0,

                        /// Assert SDIO read wait
                        assert = 1,
                    } = .clear,

                    /// [2:2] Abort Read Data
                    ABT_RDATA: enum(u1) {
                        ///
                        ignored = 0,

                        ///
                        abort = 1,
                    } = .ignored,

                    /// [3:31]
                    res0: u29 = 0,
                }), @ptrFromInt(0x4020044));

                /// Transferred Byte Count between Controller and Card
                pub const SMHC_TBC0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4020048));

                /// Transferred Byte Count between Host Memory and Internal FIFO
                pub const SMHC_TBC1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402004c));

                /// Current Debug Control Register
                pub const SMHC_DBGC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4020050));

                /// CRC Status Detect Control Registers
                pub const SMHC_CSDC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3]
                    CRC_DET_PARA: enum(u4) {
                        ///
                        HS400 = 0b110,

                        ///
                        Other = 0b011,
                    } = .HS400,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x4020054));

                /// Auto Command 12 Argument Register
                pub const SMHC_A12A = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    SD_A12A: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x4020058));

                /// SD New Timing Set Register
                pub const SMHC_NTSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    HS400_NEW_SAMPLE_EN: enum(u1) {
                        /// Disable hs400 new sample method
                        disable = 0,

                        /// Enable hs400 new sample method
                        enable = 1,
                    } = .disable,

                    /// [1:3]
                    res0: u3 = 0,

                    /// [4:5]
                    CMD_SAMPLE_TIMING_PHASE: enum(u2) {
                        /// Sample timing phase offset 90
                        O90 = 0b00,

                        /// Sample timing phase offset 180
                        O180 = 0b01,

                        /// Sample timing phase offset 270
                        O270 = 0b10,

                        /// Ignore
                        O0 = 0b11,
                    } = .O90,

                    /// [6:7]
                    res1: u2 = 0,

                    /// [8:9]
                    DAT_SAMPLE_TIMING_PHASE: enum(u2) {
                        /// Sample timing phase offset 90
                        O90 = 0b00,

                        /// Sample timing phase offset 180
                        O180 = 0b01,

                        /// Sample timing phase offset 270
                        O270 = 0b10,

                        /// Sample timing phase offset 0 (only for SD2 hs400 mode)
                        O0 = 0b11,
                    } = .O90,

                    /// [10:15]
                    res2: u6 = 0,

                    /// [16:16] Clear command rx phase before sending the command
                    CMD_SEND_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [17:19]
                    res3: u3 = 0,

                    /// [20:20] Clear the input phase of data lines before receiving the data
                    DAT_RECV_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [21:21] Clear the input phase of data lines before transferring the data
                    DAT_TRANS_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [22:22] Clear the input phase of data lines before receiving the CRC status
                    DAT_CRC_STATUS_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [23:23]
                    res4: u1 = 0,

                    /// [24:24] Clear the input phase of command lines and data lines during the update clock operation
                    CMD_DAT_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [25:30]
                    res5: u6 = 0,

                    /// [31:31]
                    MODE_SELECT: enum(u1) {
                        /// Old mode of Sample/Output Timing
                        old_mode = 0,

                        /// New mode of Sample/Output Timing
                        new_mode = 1,
                    } = .old_mode,
                }), @ptrFromInt(0x402005c));

                /// Hardware Reset Register
                pub const SMHC_HWRST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    HW_RST: enum(u1) {
                        /// Active mode
                        active = 0,

                        /// Reset
                        Reset = 1,
                    } = .active,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x4020078));

                /// IDMAC Control Register
                pub const SMHC_IDMAC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] DMA Reset
                    IDMAC_RST: u1 = 0,

                    /// [1:1] Fixed Burst
                    FIX_BUST_CTRL: u1 = 0,

                    /// [2:6]
                    res0: u5 = 0,

                    /// [7:7] IDMAC Enable
                    IDMAC_ENB: u1 = 0,

                    /// [8:30]
                    res1: u23 = 0,

                    /// [31:31]
                    DES_LOAD_CTRL: u1 = 0,
                }), @ptrFromInt(0x4020080));

                /// Descriptor List Base Address Register
                pub const SMHC_DLBA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4020084));

                /// IDMAC Status Register
                pub const SMHC_IDST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Transmit Interrupt
                    TX_INT: u1 = 0,

                    /// [1:1] Receive Interrupt
                    RX_INT: u1 = 0,

                    /// [2:2] Fatal Bus Error Interrupt
                    FATAL_BERR_INT: u1 = 0,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] Descriptor Unavailable Interrupt
                    DES_UNAVL_INT: u1 = 0,

                    /// [5:5] Card Error Summary
                    ERR_FLAG_SUM: u1 = 0,

                    /// [6:7]
                    res1: u2 = 0,

                    /// [8:8] Normal Interrupt Summary
                    NOR_INT_SUM: u1 = 0,

                    /// [9:9] Abnormal Interrupt Summary
                    ABN_INT_SUM: u1 = 0,

                    /// [10:12] Error Bits
                    IDMAC_ERR_STA: enum(u3) {
                        /// Host Abort received during the transmission
                        transmission = 0b001,

                        /// Host Abort received during the reception
                        reception = 0b010,
                    } = .transmission,

                    /// [13:31]
                    res2: u19 = 0,
                }), @ptrFromInt(0x4020088));

                /// IDMAC Interrupt Enable Register
                pub const SMHC_IDIE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Transmit Interrupt Enable
                    TX_INT_ENB: u1 = 0,

                    /// [1:1] Receive Interrupt Enables
                    RX_INT_ENB: u1 = 0,

                    /// [2:2] Fatal Bus Error Enable
                    FERR_INT_ENB: u1 = 0,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4]  Descriptor Unavailable Interrupt
                    DES_UNAVL_INT_ENB: u1 = 0,

                    /// [5:5] Card Error Summary Interrupt Enable
                    ERR_SUM_INT_ENB: u1 = 0,

                    /// [6:31]
                    res1: u26 = 0,
                }), @ptrFromInt(0x402008c));

                /// Card Threshold Control Register
                pub const SMHC_THLD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Card Read Threshold Enable
                    CARD_RD_THLD_ENB: enum(u1) {
                        /// Card read threshold disabled
                        disabled = 0,

                        /// Card read threshold enabled
                        enabled = 1,
                    } = .disabled,

                    /// [1:1] Busy Clear Interrupt Generation
                    BCIG: enum(u1) {
                        /// Busy clear interrupt disabled
                        disabled = 0,

                        /// Busy clear interrupt enabled
                        enabled = 1,
                    } = .disabled,

                    /// [2:2] Card Read/Write Threshold Enable
                    CARD_WR_THLD_ENB: enum(u1) {
                        /// Card write threshold disabled
                        disabled = 0,

                        /// Card write threshold enabled
                        enabled = 1,
                    } = .disabled,

                    /// [3:15]
                    res0: u13 = 0,

                    /// [16:27] Card Read/Write Threshold Size
                    CARD_WR_THLD: u12 = 0,

                    /// [28:31]
                    res1: u4 = 0,
                }), @ptrFromInt(0x4020100));

                /// Sample FIFO Control Register
                pub const SMHC_SFC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Bypass enable
                    BYPASS_EN: u1 = 0,

                    /// [1:4] Stop Clock Control
                    STOP_CLK_CTRL: u4 = 0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x4020104));

                /// Auto Command 23 Argument Register
                pub const SMHC_A23A = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4020108));

                /// eMMC4.5 DDR Start Bit Detection Control Register
                pub const EMMC_DDR_SBIT_DET = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Control for start bit detection mechanism inside mstorage based on duration of start bit
                    HALF_START_BIT: enum(u1) {
                        /// Full cycle
                        full = 0,

                        /// Less than one full cycle
                        less = 1,
                    } = .full,

                    /// [1:30]
                    res0: u30 = 0,

                    /// [31:31] HS400 Mode Enable
                    HS400_MD_EN: enum(u1) {
                        /// Disabled
                        disabled = 0,

                        /// Enabled
                        enabled = 1,
                    } = .disabled,
                }), @ptrFromInt(0x402010c));

                /// Extended Command Register
                pub const SMHC_EXT_CMD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Send CMD23 Automatically
                    AUTO_CMD23_EN: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x4020138));

                /// Extended Response Register
                pub const SMHC_EXT_RESP = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402013c));

                /// Drive Delay Control Register
                pub const SMHC_DRV_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:16] Command Drive Phase Select
                    CMD_DRV_PH_SEL: u1 = 0,

                    /// [17:17] Data Drive Phase Select
                    DAT_DRV_PH_SEL: u1 = 0,

                    /// [18:31]
                    res1: u14 = 0,
                }), @ptrFromInt(0x4020140));

                /// Sample Delay Control Register
                pub const SMHC_SMAP_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] Sample Delay Software
                    SAMP_DL_SW: u6 = 0,

                    /// [6:6]
                    res0: u1 = 0,

                    /// [7:7] Sample Delay Software Enable
                    SAMP_DL_SW_EN: u1 = 0,

                    /// [8:13] Sample Delay
                    SAMP_DL: u6 = 0,

                    /// [14:14] Sample Delay Calibration Done
                    SAMP_DL_CAL_DONE: u1 = 0,

                    /// [15:15] Sample Delay Calibration Start
                    SAMP_DL_CAL_START: u1 = 0,

                    /// [16:31]
                    res1: u16 = 0,
                }), @ptrFromInt(0x4020144));

                /// Data Strobe Delay Control Register
                pub const SMHC_DS_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] Data Storbe Delay Software
                    DS_DL_SW: u6 = 0,

                    /// [6:6]
                    res0: u1 = 0,

                    /// [7:7] Sample Delay Software Enable
                    DS_DL_SW_EN: u1 = 0,

                    /// [8:13] Data Strobe Delay
                    DS_DL: u6 = 0,

                    /// [14:14] Data Strobe Delay Calibration Done
                    DS_DL_CAL_DONE: u1 = 0,

                    /// [15:15] Data Strobe Delay Calibration Start
                    DS_DL_CAL_START: u1 = 0,

                    /// [16:31]
                    res1: u16 = 0,
                }), @ptrFromInt(0x4020148));

                /// HS400 Delay Control Register
                pub const SMHC_HS400_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] HS400 Delay Software
                    HS400_DL_SW: u4 = 0,

                    /// [4:6]
                    res0: u3 = 0,

                    /// [7:7] Sample Delay Software Enable
                    HS400_DL_SW_EN: u1 = 0,

                    /// [8:11] HS400 Delay
                    HS400_DL: u4 = 0,

                    /// [12:13]
                    res1: u2 = 0,

                    /// [14:14] HS400 Delay Calibration Done
                    HS400_DL_CAL_DONE: u1 = 0,

                    /// [15:15] HS400 Delay Calibration Start
                    HS400_DL_CAL_START: u1 = 0,

                    /// [16:31]
                    res2: u16 = 0,
                }), @ptrFromInt(0x402014c));

                /// Read/Write FIFO
                pub const SMHC_FIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4020200));
            };

            /// SD/MMC Host Controller
            pub const SMHC1 = struct {
                /// Control Register
                pub const SMHC_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Software Reset
                    SOFT_RST: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        reset = 1,
                    } = .no_effect,

                    /// [1:1] FIFO Reset
                    FIFO_RST: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        reset = 1,
                    } = .no_effect,

                    /// [2:2] DMA Reset
                    DMA_RST: u1 = 0,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] GLobal Interrupt Enable
                    INE_ENB: enum(u1) {
                        /// Disable interrupts
                        disable = 0,

                        /// Enable interrupts
                        enable = 1,
                    } = .disable,

                    /// [5:5] DMA Global Enable
                    DMA_ENB: enum(u1) {
                        /// Disable DMA to transfer data via AHB bus
                        disable = 0,

                        /// Enable DMA to transfer data
                        enable = 1,
                    } = .disable,

                    /// [6:7]
                    res1: u2 = 0,

                    /// [8:8] Card Detect (Data[3] status) De-bounce Enable
                    CD_DBC_ENB: enum(u1) {
                        /// Disable de-bounce
                        disable = 0,

                        /// Enable de-bounce
                        enable = 1,
                    } = .disable,

                    /// [9:9]
                    res2: u1 = 0,

                    /// [10:10] DDR Mode Select
                    DDR_MOD_SEL: enum(u1) {
                        /// SDR mode
                        SDR = 0,

                        /// DDR mode
                        DDR = 1,
                    } = .SDR,

                    /// [11:11] Time unit for data line
                    TIME_UNIT_DAT: enum(u1) {
                        /// 1 card clock period
                        C1 = 0,

                        /// 256 card clock period
                        C256 = 1,
                    } = .C1,

                    /// [12:12] Time unit for command line
                    TIME_UNIT_CMD: enum(u1) {
                        /// 1 card clock period
                        C1 = 0,

                        /// 256 card clock period
                        C256 = 1,
                    } = .C1,

                    /// [13:30]
                    res3: u18 = 0,

                    /// [31:31] FIFO Accesss Mode
                    FIFO_AC_MOD: enum(u1) {
                        /// DMA bus
                        DMA = 0,

                        /// AHB bus
                        AHB = 1,
                    } = .DMA,
                }), @ptrFromInt(0x4021000));

                /// Clock Control Register
                pub const SMHC_CLKDIV = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Card Clock Divider
                    CCLK_DIV: u8 = 0,

                    /// [8:15]
                    res0: u8 = 0,

                    /// [16:16] Card Clock Enable
                    CCLK_ENB: enum(u1) {
                        /// Card Clock is off
                        off = 0,

                        /// Card Clock is on
                        on = 1,
                    } = .off,

                    /// [17:17] Card Clock Output Control
                    CCLK_CTRL: enum(u1) {
                        /// Card clock is always on
                        on = 0,

                        /// Turn off card clock when FSM is in IDLE state
                        off_idle = 1,
                    } = .on,

                    /// [18:30]
                    res1: u13 = 0,

                    /// [31:31]
                    MASK_DATA0: enum(u1) {
                        /// Do not mask data0 when update clock
                        not_mask = 0,

                        /// Mask data0 when update clock
                        mask = 1,
                    } = .not_mask,
                }), @ptrFromInt(0x4021004));

                /// Time Out Register
                pub const SMHC_TMOUT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Response Timeout Limit
                    RTO_LMT: u8 = 0,

                    /// [8:31] Data Iimeout Limit
                    DTO_LMT: u24 = 0,
                }), @ptrFromInt(0x4021008));

                /// Bus Width Register
                pub const SMHC_CTYPE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Card Width
                    CARD_WID: enum(u2) {
                        /// 1-bit width
                        b1 = 0b00,

                        /// 4-bit width
                        b4 = 0b01,

                        /// 8-bit width
                        b8 = 0b10,
                    } = .b1,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x402100c));

                /// Block Size Register
                pub const SMHC_BLKSIZ = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15] Block SIze
                    BLK_SZ: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x4021010));

                /// Byte Count Register
                pub const SMHC_BYTCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4021014));

                /// Command Register
                pub const SMHC_CMD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] CMD Index
                    CMD_IDX: u6 = 0,

                    /// [6:6] Response Receive
                    RESP_RCV: enum(u1) {
                        /// Command without response
                        without = 0,

                        /// Command with response
                        with = 1,
                    } = .without,

                    /// [7:7] Response Type
                    LONG_RESP: enum(u1) {
                        /// Short Response (48 bits)
                        short = 0,

                        /// Long Response (136 bits)
                        long = 1,
                    } = .short,

                    /// [8:8] Check Response CRC
                    CHK_RESP_CRC: enum(u1) {
                        /// Do not check response CRC
                        not_check = 0,

                        /// Check response CRC
                        check = 1,
                    } = .not_check,

                    /// [9:9] Data Transfer
                    DATA_TRANS: enum(u1) {
                        /// Without data transfer
                        without = 0,

                        /// With data transfer
                        with = 1,
                    } = .without,

                    /// [10:10] Transfer Direction
                    TRANS_DIR: enum(u1) {
                        /// Read operation
                        read = 0,

                        /// Write operation
                        write = 1,
                    } = .read,

                    /// [11:11] Transfer Mode
                    TRANS_MODE: enum(u1) {
                        /// Block data transfer command
                        block = 0,

                        /// Stream data transfer commmand
                        stream = 1,
                    } = .block,

                    /// [12:12] Send Stop CMD Automatically (CMD12)
                    STOP_CMD_FLAG: enum(u1) {
                        /// Do not send stop command at the end of the data transfer
                        no_stop = 0,

                        /// Send stop command automatically at the end of the data transfer
                        auto_stop = 1,
                    } = .no_stop,

                    /// [13:13] Wait for Data Transfer Over
                    WAIT_PRE_OVER: enum(u1) {
                        /// Send command at once, does not care about data transferring
                        at_once = 0,

                        /// Wait for data transfer completion before sending the current command
                        wait = 1,
                    } = .at_once,

                    /// [14:14] Stop Abort Command
                    STOP_ABT_CMD: enum(u1) {
                        /// Normal command sending
                        normal = 0,

                        /// Send Stop or Abort command to stop the current data transfer in progress
                        stop = 1,
                    } = .normal,

                    /// [15:15] Send Initialization
                    SEND_INIT_SEQ: enum(u1) {
                        /// Normal command sending
                        normal = 0,

                        /// Send initialization sequence before sending this command
                        init_cmd = 1,
                    } = .normal,

                    /// [16:20]
                    res0: u5 = 0,

                    /// [21:21] Change Clock
                    PRG_CLK: enum(u1) {
                        /// Normal command
                        normal = 0,

                        /// Change Card Clock
                        change = 1,
                    } = .normal,

                    /// [22:23]
                    res1: u2 = 0,

                    /// [24:25] Boot Mode
                    BOOT_MOD: enum(u2) {
                        /// Normal command
                        normal = 0b00,

                        /// Mandatory Boot operation
                        mandatory_boot = 0b01,

                        /// Alternate Boot operation
                        alternate_boot = 0b10,
                    } = .normal,

                    /// [26:26] Expect Boot Acknowledge
                    EXP_BOOT_ACK: u1 = 0,

                    /// [27:27] Boot Abort
                    BOOT_ABT: u1 = 0,

                    /// [28:28] Voltage Switch
                    VOL_SW: enum(u1) {
                        /// Normal command
                        normal = 0,

                        /// Voltage switch command, set for CMD11 only
                        voltage_switch = 1,
                    } = .normal,

                    /// [29:30]
                    res2: u2 = 0,

                    /// [31:31] Start Command
                    CMD_LOAD: u1 = 0,
                }), @ptrFromInt(0x4021018));

                /// Command Argument Register
                pub const SMHC_CMDARG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402101c));

                /// Response 0 Register
                pub const SMHC_RESP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4021020));

                /// Response 1 Register
                pub const SMHC_RESP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4021024));

                /// Response 2 Register
                pub const SMHC_RESP2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4021028));

                /// Response 3 Register
                pub const SMHC_RESP3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402102c));

                /// Interrupt Mask Register
                pub const SMHC_INTMASK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] Response Error Interrupt Enable
                    RE_INT_EN: u1 = 0,

                    /// [2:2] Command Complete Interrupt Enable
                    CC_INT_EN: u1 = 0,

                    /// [3:3] Data Transfer Complete Interrupt Enable
                    DTC_INT_EN: u1 = 0,

                    /// [4:4] Data Transmit Request Interrupt Enable
                    DTR_INT_EN: u1 = 0,

                    /// [5:5] Data Receive Request Interrupt Enable
                    DRR_INT_EN: u1 = 0,

                    /// [6:6] Response CRC Error Interrupt Enable
                    RCE_INT_EN: u1 = 0,

                    /// [7:7] Data CRC Error Interrupt Enable
                    DCE_INT_EN: u1 = 0,

                    /// [8:8] Response Timeout/Boot ACK Received Interrupt Enable
                    RTO_BACK_INT_EN: u1 = 0,

                    /// [9:9] Data Timeout/Boot Data Start Interrupt Enable
                    DTO_BDS_INT_EN: u1 = 0,

                    /// [10:10] Data Starvation Timeout/V1.8 Switch Done Interrupt Enable
                    DSTO_VSD_INT_EN: u1 = 0,

                    /// [11:11] FIFO Underrun/Overflow Interrupt Enable
                    FU_FO_INT_EN: u1 = 0,

                    /// [12:12] Command Busy and Illegal Write Interrupt Enable
                    CB_IW_INT_EN: u1 = 0,

                    /// [13:13] Data Start Error Interrupt Enable
                    DSE_BC_INT_EN: u1 = 0,

                    /// [14:14] Auto Command Done Interrupt Enable
                    ACD_INT_EN: u1 = 0,

                    /// [15:15] Data End-bit Error Interrupt Enable
                    DEE_INT_EN: u1 = 0,

                    /// [16:16] SDIO Interrupt Enable
                    SDIO_INT_EN: u1 = 0,

                    /// [17:29]
                    res1: u13 = 0,

                    /// [30:30] Card Inserted Interrupt Enable
                    CARD_INSERT_INT_EN: u1 = 0,

                    /// [31:31] Card Removed Interrupt Enable
                    CARD_REMOVAL_INT_EN: u1 = 0,
                }), @ptrFromInt(0x4021030));

                /// Masked Interrupt Status Register
                pub const SMHC_MINTSTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] Response Errors
                    M_RE_INT: u1 = 0,

                    /// [2:2] Command Complete
                    M_CC_INT: u1 = 0,

                    /// [3:3] Data Transfer Complete
                    M_DTC_INT: u1 = 0,

                    /// [4:4] Data Transmit Request
                    M_DTR_INT: u1 = 0,

                    /// [5:5] Data Receive Request
                    M_DRR_INT: u1 = 0,

                    /// [6:6] Response CRC Error
                    M_RCE_INT: u1 = 0,

                    /// [7:7] Data CRC Error
                    M_DCE_INT: u1 = 0,

                    /// [8:8] Response Timeout/Boot ACK Received
                    M_RTO_BACK_INT: u1 = 0,

                    /// [9:9] Data Timeout/Boot Data Start
                    M_DTO_BDS_INT: u1 = 0,

                    /// [10:10] Data Starvation Timeout/V1.8 Switch Done
                    M_DSTO_VSD_INT: u1 = 0,

                    /// [11:11] FIFO Underrun/Overflow
                    M_FU_FO_INT: u1 = 0,

                    /// [12:12] Command Busy and Illegal Write
                    M_CB_IW_INT: u1 = 0,

                    /// [13:13] Data Start Error/Busy Clear
                    M_DSE_BC_INT: u1 = 0,

                    /// [14:14] Auto Command Done
                    M_ACD_INT: u1 = 0,

                    /// [15:15] Data End-bit Error
                    M_DEE_INT: u1 = 0,

                    /// [16:16] SDIO Interrupt
                    M_SDIO_INT: u1 = 0,

                    /// [17:29]
                    res1: u13 = 0,

                    /// [30:30] Card Inserted
                    M_CARD_INSERT: u1 = 0,

                    /// [31:31] Card Removed
                    M_CARD_REMOVAL_INT: u1 = 0,
                }), @ptrFromInt(0x4021034));

                /// Raw Interrupt Status Register
                pub const SMHC_RINTSTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] Response Error
                    RE: u1 = 0,

                    /// [2:2] Command Complete
                    CC: u1 = 0,

                    /// [3:3] Data Transfer Complete
                    DTC: u1 = 0,

                    /// [4:4] Data Transmit Request
                    DTR: u1 = 0,

                    /// [5:5] Data Receive Request
                    DRR: u1 = 0,

                    /// [6:6] Response CRC Error
                    RCE: u1 = 0,

                    /// [7:7] Data CRC Error
                    DCE: u1 = 0,

                    /// [8:8] Response Timeout/Boot ACK Received
                    RTO_BACK: u1 = 0,

                    /// [9:9] Data Timeout/Boot Data Start
                    DTO_BDS: u1 = 0,

                    /// [10:10] Data Starvation Timeout/V1.8 Switch Done
                    DSTO_VSD: u1 = 0,

                    /// [11:11] FIFO Underrun/Overflow
                    FU_FO: u1 = 0,

                    /// [12:12] Command Busy and Illegal Write
                    CB_IW: u1 = 0,

                    /// [13:13] Data Start Error/Busy Clear
                    DSE_BC: u1 = 0,

                    /// [14:14] Auto Command Done
                    ACD: u1 = 0,

                    /// [15:15] Data End-bit Error
                    DEE: u1 = 0,

                    /// [16:16] SDIO Interrupt
                    SDIOI_INT: u1 = 0,

                    /// [17:29]
                    res1: u13 = 0,

                    /// [30:30] Card Inserted
                    CARD_INSERT: u1 = 0,

                    /// [31:31] Card Removed
                    CARD_REMOVAL: u1 = 0,
                }), @ptrFromInt(0x4021038));

                /// Status Register
                pub const SMHC_STATUS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] FIFO RX Water Level Flag
                    FIFO_RX_LEVEL: enum(u1) {
                        /// FIFO does not reach the receive trigger level
                        not_reach = 0,

                        /// FIFO reaches the receive trigger level
                        reach = 1,
                    } = .not_reach,

                    /// [1:1] FIFO TX Water Level Flag
                    FIFO_TX_LEVEL: enum(u1) {
                        /// FIFO does not reach the transmit trigger level
                        not_reach = 0,

                        /// FIFO reaches the transmit trigger level
                        reach = 1,
                    } = .not_reach,

                    /// [2:2] FIFO Empty
                    FIFO_EMPTY: enum(u1) {
                        /// FIFO is not empty
                        not_sempty = 0,

                        /// FIFO is empty
                        empty = 1,
                    } = .not_sempty,

                    /// [3:3] sFIFO Full
                    FIFO_FULL: enum(u1) {
                        /// FIFO is not full
                        not_full = 0,

                        /// FIFO is full
                        full = 1,
                    } = .not_full,

                    /// [4:7] Command FSM States
                    FSM_STA: enum(u4) {
                        /// Idle
                        idle = 0b0000,

                        /// Send init sequence
                        sis = 0b0001,

                        /// TX CMD start bit
                        txcsb = 0b0010,

                        /// TX CMD TX bit
                        txctb = 0b0011,

                        /// TX CMD index + argument
                        txcia = 0b0100,

                        /// TX CMD CRC7
                        txcc = 0b0101,

                        /// TX CMD end bit
                        txceb = 0b0110,

                        /// RX response start bit
                        rxrsb = 0b0111,

                        /// RX response IRQ responses
                        rxrir = 0b1000,

                        /// RX response TX bit
                        rxrtb = 0b1001,

                        /// RX response CMD index
                        rxrci = 0b1010,

                        /// RX response data
                        rxrd = 0b1011,

                        /// RX response CRC7
                        rxrc = 0b1100,

                        /// RX response end bit
                        rxreb = 0b1101,

                        /// CMD path wait NCC
                        cpwn = 0b1110,

                        /// Wait; CMD-to-response turn around
                        wait = 0b1111,
                    } = .idle,

                    /// [8:8] Data[3] Statuss
                    CARD_PRESENT: enum(u1) {
                        /// The card is not present
                        not_present = 0,

                        /// The card is present
                        present = 1,
                    } = .not_present,

                    /// [9:9] Card Data Busy
                    CARD_BUSY: enum(u1) {
                        /// Card data is not busy
                        not_busy = 0,

                        /// Card data is busy
                        busy = 1,
                    } = .not_busy,

                    /// [10:10] Data FSM Busy
                    FSM_BUSY: u1 = 0,

                    /// [11:16] Response Index
                    RESP_IDX: u6 = 0,

                    /// [17:25] FIFO Level
                    FIFO_LEVEL: u9 = 0,

                    /// [26:30]
                    res0: u5 = 0,

                    /// [31:31] DMA Request
                    DMA_REQ: u1 = 0,
                }), @ptrFromInt(0x402103c));

                /// FIFO Water Level Register
                pub const SMHC_FIFOTH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] TX Trigger Level
                    TX_TL: u8 = 0,

                    /// [8:15]
                    res0: u8 = 0,

                    /// [16:23] RX Trigger Level
                    RX_TL: u8 = 0,

                    /// [24:27]
                    res1: u4 = 0,

                    /// [28:30] sBurst Size of Multiple Transaction
                    BSIZE_OF_TRANS: enum(u3) {
                        ///  1 transfer
                        T1 = 0b000,

                        ///  4 transfers
                        T4 = 0b001,

                        ///  8 transfers
                        T8 = 0b010,

                        ///  16 transfers
                        T16 = 0b011,
                    } = .T1,

                    /// [31:31]
                    res2: u1 = 0,
                }), @ptrFromInt(0x4021040));

                /// FIFO Function Select Register
                pub const SMHC_FUNS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Host Send MMC IRQ Response
                    HOST_SEND_MIMC_IRQRESQ: enum(u1) {
                        ///
                        ignored = 0,

                        /// Send auto IRQ response
                        send = 1,
                    } = .ignored,

                    /// [1:1] Read Wait
                    READ_WAIT: enum(u1) {
                        /// Clear SDIO read wait
                        clear = 0,

                        /// Assert SDIO read wait
                        assert = 1,
                    } = .clear,

                    /// [2:2] Abort Read Data
                    ABT_RDATA: enum(u1) {
                        ///
                        ignored = 0,

                        ///
                        abort = 1,
                    } = .ignored,

                    /// [3:31]
                    res0: u29 = 0,
                }), @ptrFromInt(0x4021044));

                /// Transferred Byte Count between Controller and Card
                pub const SMHC_TBC0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4021048));

                /// Transferred Byte Count between Host Memory and Internal FIFO
                pub const SMHC_TBC1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402104c));

                /// Current Debug Control Register
                pub const SMHC_DBGC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4021050));

                /// CRC Status Detect Control Registers
                pub const SMHC_CSDC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3]
                    CRC_DET_PARA: enum(u4) {
                        ///
                        HS400 = 0b110,

                        ///
                        Other = 0b011,
                    } = .HS400,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x4021054));

                /// Auto Command 12 Argument Register
                pub const SMHC_A12A = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    SD_A12A: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x4021058));

                /// SD New Timing Set Register
                pub const SMHC_NTSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    HS400_NEW_SAMPLE_EN: enum(u1) {
                        /// Disable hs400 new sample method
                        disable = 0,

                        /// Enable hs400 new sample method
                        enable = 1,
                    } = .disable,

                    /// [1:3]
                    res0: u3 = 0,

                    /// [4:5]
                    CMD_SAMPLE_TIMING_PHASE: enum(u2) {
                        /// Sample timing phase offset 90
                        O90 = 0b00,

                        /// Sample timing phase offset 180
                        O180 = 0b01,

                        /// Sample timing phase offset 270
                        O270 = 0b10,

                        /// Ignore
                        O0 = 0b11,
                    } = .O90,

                    /// [6:7]
                    res1: u2 = 0,

                    /// [8:9]
                    DAT_SAMPLE_TIMING_PHASE: enum(u2) {
                        /// Sample timing phase offset 90
                        O90 = 0b00,

                        /// Sample timing phase offset 180
                        O180 = 0b01,

                        /// Sample timing phase offset 270
                        O270 = 0b10,

                        /// Sample timing phase offset 0 (only for SD2 hs400 mode)
                        O0 = 0b11,
                    } = .O90,

                    /// [10:15]
                    res2: u6 = 0,

                    /// [16:16] Clear command rx phase before sending the command
                    CMD_SEND_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [17:19]
                    res3: u3 = 0,

                    /// [20:20] Clear the input phase of data lines before receiving the data
                    DAT_RECV_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [21:21] Clear the input phase of data lines before transferring the data
                    DAT_TRANS_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [22:22] Clear the input phase of data lines before receiving the CRC status
                    DAT_CRC_STATUS_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [23:23]
                    res4: u1 = 0,

                    /// [24:24] Clear the input phase of command lines and data lines during the update clock operation
                    CMD_DAT_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [25:30]
                    res5: u6 = 0,

                    /// [31:31]
                    MODE_SELECT: enum(u1) {
                        /// Old mode of Sample/Output Timing
                        old_mode = 0,

                        /// New mode of Sample/Output Timing
                        new_mode = 1,
                    } = .old_mode,
                }), @ptrFromInt(0x402105c));

                /// Hardware Reset Register
                pub const SMHC_HWRST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    HW_RST: enum(u1) {
                        /// Active mode
                        active = 0,

                        /// Reset
                        Reset = 1,
                    } = .active,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x4021078));

                /// IDMAC Control Register
                pub const SMHC_IDMAC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] DMA Reset
                    IDMAC_RST: u1 = 0,

                    /// [1:1] Fixed Burst
                    FIX_BUST_CTRL: u1 = 0,

                    /// [2:6]
                    res0: u5 = 0,

                    /// [7:7] IDMAC Enable
                    IDMAC_ENB: u1 = 0,

                    /// [8:30]
                    res1: u23 = 0,

                    /// [31:31]
                    DES_LOAD_CTRL: u1 = 0,
                }), @ptrFromInt(0x4021080));

                /// Descriptor List Base Address Register
                pub const SMHC_DLBA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4021084));

                /// IDMAC Status Register
                pub const SMHC_IDST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Transmit Interrupt
                    TX_INT: u1 = 0,

                    /// [1:1] Receive Interrupt
                    RX_INT: u1 = 0,

                    /// [2:2] Fatal Bus Error Interrupt
                    FATAL_BERR_INT: u1 = 0,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] Descriptor Unavailable Interrupt
                    DES_UNAVL_INT: u1 = 0,

                    /// [5:5] Card Error Summary
                    ERR_FLAG_SUM: u1 = 0,

                    /// [6:7]
                    res1: u2 = 0,

                    /// [8:8] Normal Interrupt Summary
                    NOR_INT_SUM: u1 = 0,

                    /// [9:9] Abnormal Interrupt Summary
                    ABN_INT_SUM: u1 = 0,

                    /// [10:12] Error Bits
                    IDMAC_ERR_STA: enum(u3) {
                        /// Host Abort received during the transmission
                        transmission = 0b001,

                        /// Host Abort received during the reception
                        reception = 0b010,
                    } = .transmission,

                    /// [13:31]
                    res2: u19 = 0,
                }), @ptrFromInt(0x4021088));

                /// IDMAC Interrupt Enable Register
                pub const SMHC_IDIE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Transmit Interrupt Enable
                    TX_INT_ENB: u1 = 0,

                    /// [1:1] Receive Interrupt Enables
                    RX_INT_ENB: u1 = 0,

                    /// [2:2] Fatal Bus Error Enable
                    FERR_INT_ENB: u1 = 0,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4]  Descriptor Unavailable Interrupt
                    DES_UNAVL_INT_ENB: u1 = 0,

                    /// [5:5] Card Error Summary Interrupt Enable
                    ERR_SUM_INT_ENB: u1 = 0,

                    /// [6:31]
                    res1: u26 = 0,
                }), @ptrFromInt(0x402108c));

                /// Card Threshold Control Register
                pub const SMHC_THLD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Card Read Threshold Enable
                    CARD_RD_THLD_ENB: enum(u1) {
                        /// Card read threshold disabled
                        disabled = 0,

                        /// Card read threshold enabled
                        enabled = 1,
                    } = .disabled,

                    /// [1:1] Busy Clear Interrupt Generation
                    BCIG: enum(u1) {
                        /// Busy clear interrupt disabled
                        disabled = 0,

                        /// Busy clear interrupt enabled
                        enabled = 1,
                    } = .disabled,

                    /// [2:2] Card Read/Write Threshold Enable
                    CARD_WR_THLD_ENB: enum(u1) {
                        /// Card write threshold disabled
                        disabled = 0,

                        /// Card write threshold enabled
                        enabled = 1,
                    } = .disabled,

                    /// [3:15]
                    res0: u13 = 0,

                    /// [16:27] Card Read/Write Threshold Size
                    CARD_WR_THLD: u12 = 0,

                    /// [28:31]
                    res1: u4 = 0,
                }), @ptrFromInt(0x4021100));

                /// Sample FIFO Control Register
                pub const SMHC_SFC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Bypass enable
                    BYPASS_EN: u1 = 0,

                    /// [1:4] Stop Clock Control
                    STOP_CLK_CTRL: u4 = 0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x4021104));

                /// Auto Command 23 Argument Register
                pub const SMHC_A23A = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4021108));

                /// eMMC4.5 DDR Start Bit Detection Control Register
                pub const EMMC_DDR_SBIT_DET = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Control for start bit detection mechanism inside mstorage based on duration of start bit
                    HALF_START_BIT: enum(u1) {
                        /// Full cycle
                        full = 0,

                        /// Less than one full cycle
                        less = 1,
                    } = .full,

                    /// [1:30]
                    res0: u30 = 0,

                    /// [31:31] HS400 Mode Enable
                    HS400_MD_EN: enum(u1) {
                        /// Disabled
                        disabled = 0,

                        /// Enabled
                        enabled = 1,
                    } = .disabled,
                }), @ptrFromInt(0x402110c));

                /// Extended Command Register
                pub const SMHC_EXT_CMD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Send CMD23 Automatically
                    AUTO_CMD23_EN: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x4021138));

                /// Extended Response Register
                pub const SMHC_EXT_RESP = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402113c));

                /// Drive Delay Control Register
                pub const SMHC_DRV_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:16] Command Drive Phase Select
                    CMD_DRV_PH_SEL: u1 = 0,

                    /// [17:17] Data Drive Phase Select
                    DAT_DRV_PH_SEL: u1 = 0,

                    /// [18:31]
                    res1: u14 = 0,
                }), @ptrFromInt(0x4021140));

                /// Sample Delay Control Register
                pub const SMHC_SMAP_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] Sample Delay Software
                    SAMP_DL_SW: u6 = 0,

                    /// [6:6]
                    res0: u1 = 0,

                    /// [7:7] Sample Delay Software Enable
                    SAMP_DL_SW_EN: u1 = 0,

                    /// [8:13] Sample Delay
                    SAMP_DL: u6 = 0,

                    /// [14:14] Sample Delay Calibration Done
                    SAMP_DL_CAL_DONE: u1 = 0,

                    /// [15:15] Sample Delay Calibration Start
                    SAMP_DL_CAL_START: u1 = 0,

                    /// [16:31]
                    res1: u16 = 0,
                }), @ptrFromInt(0x4021144));

                /// Data Strobe Delay Control Register
                pub const SMHC_DS_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] Data Storbe Delay Software
                    DS_DL_SW: u6 = 0,

                    /// [6:6]
                    res0: u1 = 0,

                    /// [7:7] Sample Delay Software Enable
                    DS_DL_SW_EN: u1 = 0,

                    /// [8:13] Data Strobe Delay
                    DS_DL: u6 = 0,

                    /// [14:14] Data Strobe Delay Calibration Done
                    DS_DL_CAL_DONE: u1 = 0,

                    /// [15:15] Data Strobe Delay Calibration Start
                    DS_DL_CAL_START: u1 = 0,

                    /// [16:31]
                    res1: u16 = 0,
                }), @ptrFromInt(0x4021148));

                /// HS400 Delay Control Register
                pub const SMHC_HS400_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] HS400 Delay Software
                    HS400_DL_SW: u4 = 0,

                    /// [4:6]
                    res0: u3 = 0,

                    /// [7:7] Sample Delay Software Enable
                    HS400_DL_SW_EN: u1 = 0,

                    /// [8:11] HS400 Delay
                    HS400_DL: u4 = 0,

                    /// [12:13]
                    res1: u2 = 0,

                    /// [14:14] HS400 Delay Calibration Done
                    HS400_DL_CAL_DONE: u1 = 0,

                    /// [15:15] HS400 Delay Calibration Start
                    HS400_DL_CAL_START: u1 = 0,

                    /// [16:31]
                    res2: u16 = 0,
                }), @ptrFromInt(0x402114c));

                /// Read/Write FIFO
                pub const SMHC_FIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4021200));
            };

            /// SD/MMC Host Controller
            pub const SMHC2 = struct {
                /// Control Register
                pub const SMHC_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Software Reset
                    SOFT_RST: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        reset = 1,
                    } = .no_effect,

                    /// [1:1] FIFO Reset
                    FIFO_RST: enum(u1) {
                        ///
                        no_effect = 0,

                        ///
                        reset = 1,
                    } = .no_effect,

                    /// [2:2] DMA Reset
                    DMA_RST: u1 = 0,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] GLobal Interrupt Enable
                    INE_ENB: enum(u1) {
                        /// Disable interrupts
                        disable = 0,

                        /// Enable interrupts
                        enable = 1,
                    } = .disable,

                    /// [5:5] DMA Global Enable
                    DMA_ENB: enum(u1) {
                        /// Disable DMA to transfer data via AHB bus
                        disable = 0,

                        /// Enable DMA to transfer data
                        enable = 1,
                    } = .disable,

                    /// [6:7]
                    res1: u2 = 0,

                    /// [8:8] Card Detect (Data[3] status) De-bounce Enable
                    CD_DBC_ENB: enum(u1) {
                        /// Disable de-bounce
                        disable = 0,

                        /// Enable de-bounce
                        enable = 1,
                    } = .disable,

                    /// [9:9]
                    res2: u1 = 0,

                    /// [10:10] DDR Mode Select
                    DDR_MOD_SEL: enum(u1) {
                        /// SDR mode
                        SDR = 0,

                        /// DDR mode
                        DDR = 1,
                    } = .SDR,

                    /// [11:11] Time unit for data line
                    TIME_UNIT_DAT: enum(u1) {
                        /// 1 card clock period
                        C1 = 0,

                        /// 256 card clock period
                        C256 = 1,
                    } = .C1,

                    /// [12:12] Time unit for command line
                    TIME_UNIT_CMD: enum(u1) {
                        /// 1 card clock period
                        C1 = 0,

                        /// 256 card clock period
                        C256 = 1,
                    } = .C1,

                    /// [13:30]
                    res3: u18 = 0,

                    /// [31:31] FIFO Accesss Mode
                    FIFO_AC_MOD: enum(u1) {
                        /// DMA bus
                        DMA = 0,

                        /// AHB bus
                        AHB = 1,
                    } = .DMA,
                }), @ptrFromInt(0x4022000));

                /// Clock Control Register
                pub const SMHC_CLKDIV = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Card Clock Divider
                    CCLK_DIV: u8 = 0,

                    /// [8:15]
                    res0: u8 = 0,

                    /// [16:16] Card Clock Enable
                    CCLK_ENB: enum(u1) {
                        /// Card Clock is off
                        off = 0,

                        /// Card Clock is on
                        on = 1,
                    } = .off,

                    /// [17:17] Card Clock Output Control
                    CCLK_CTRL: enum(u1) {
                        /// Card clock is always on
                        on = 0,

                        /// Turn off card clock when FSM is in IDLE state
                        off_idle = 1,
                    } = .on,

                    /// [18:30]
                    res1: u13 = 0,

                    /// [31:31]
                    MASK_DATA0: enum(u1) {
                        /// Do not mask data0 when update clock
                        not_mask = 0,

                        /// Mask data0 when update clock
                        mask = 1,
                    } = .not_mask,
                }), @ptrFromInt(0x4022004));

                /// Time Out Register
                pub const SMHC_TMOUT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Response Timeout Limit
                    RTO_LMT: u8 = 0,

                    /// [8:31] Data Iimeout Limit
                    DTO_LMT: u24 = 0,
                }), @ptrFromInt(0x4022008));

                /// Bus Width Register
                pub const SMHC_CTYPE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Card Width
                    CARD_WID: enum(u2) {
                        /// 1-bit width
                        b1 = 0b00,

                        /// 4-bit width
                        b4 = 0b01,

                        /// 8-bit width
                        b8 = 0b10,
                    } = .b1,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x402200c));

                /// Block Size Register
                pub const SMHC_BLKSIZ = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15] Block SIze
                    BLK_SZ: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x4022010));

                /// Byte Count Register
                pub const SMHC_BYTCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4022014));

                /// Command Register
                pub const SMHC_CMD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] CMD Index
                    CMD_IDX: u6 = 0,

                    /// [6:6] Response Receive
                    RESP_RCV: enum(u1) {
                        /// Command without response
                        without = 0,

                        /// Command with response
                        with = 1,
                    } = .without,

                    /// [7:7] Response Type
                    LONG_RESP: enum(u1) {
                        /// Short Response (48 bits)
                        short = 0,

                        /// Long Response (136 bits)
                        long = 1,
                    } = .short,

                    /// [8:8] Check Response CRC
                    CHK_RESP_CRC: enum(u1) {
                        /// Do not check response CRC
                        not_check = 0,

                        /// Check response CRC
                        check = 1,
                    } = .not_check,

                    /// [9:9] Data Transfer
                    DATA_TRANS: enum(u1) {
                        /// Without data transfer
                        without = 0,

                        /// With data transfer
                        with = 1,
                    } = .without,

                    /// [10:10] Transfer Direction
                    TRANS_DIR: enum(u1) {
                        /// Read operation
                        read = 0,

                        /// Write operation
                        write = 1,
                    } = .read,

                    /// [11:11] Transfer Mode
                    TRANS_MODE: enum(u1) {
                        /// Block data transfer command
                        block = 0,

                        /// Stream data transfer commmand
                        stream = 1,
                    } = .block,

                    /// [12:12] Send Stop CMD Automatically (CMD12)
                    STOP_CMD_FLAG: enum(u1) {
                        /// Do not send stop command at the end of the data transfer
                        no_stop = 0,

                        /// Send stop command automatically at the end of the data transfer
                        auto_stop = 1,
                    } = .no_stop,

                    /// [13:13] Wait for Data Transfer Over
                    WAIT_PRE_OVER: enum(u1) {
                        /// Send command at once, does not care about data transferring
                        at_once = 0,

                        /// Wait for data transfer completion before sending the current command
                        wait = 1,
                    } = .at_once,

                    /// [14:14] Stop Abort Command
                    STOP_ABT_CMD: enum(u1) {
                        /// Normal command sending
                        normal = 0,

                        /// Send Stop or Abort command to stop the current data transfer in progress
                        stop = 1,
                    } = .normal,

                    /// [15:15] Send Initialization
                    SEND_INIT_SEQ: enum(u1) {
                        /// Normal command sending
                        normal = 0,

                        /// Send initialization sequence before sending this command
                        init_cmd = 1,
                    } = .normal,

                    /// [16:20]
                    res0: u5 = 0,

                    /// [21:21] Change Clock
                    PRG_CLK: enum(u1) {
                        /// Normal command
                        normal = 0,

                        /// Change Card Clock
                        change = 1,
                    } = .normal,

                    /// [22:23]
                    res1: u2 = 0,

                    /// [24:25] Boot Mode
                    BOOT_MOD: enum(u2) {
                        /// Normal command
                        normal = 0b00,

                        /// Mandatory Boot operation
                        mandatory_boot = 0b01,

                        /// Alternate Boot operation
                        alternate_boot = 0b10,
                    } = .normal,

                    /// [26:26] Expect Boot Acknowledge
                    EXP_BOOT_ACK: u1 = 0,

                    /// [27:27] Boot Abort
                    BOOT_ABT: u1 = 0,

                    /// [28:28] Voltage Switch
                    VOL_SW: enum(u1) {
                        /// Normal command
                        normal = 0,

                        /// Voltage switch command, set for CMD11 only
                        voltage_switch = 1,
                    } = .normal,

                    /// [29:30]
                    res2: u2 = 0,

                    /// [31:31] Start Command
                    CMD_LOAD: u1 = 0,
                }), @ptrFromInt(0x4022018));

                /// Command Argument Register
                pub const SMHC_CMDARG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402201c));

                /// Response 0 Register
                pub const SMHC_RESP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4022020));

                /// Response 1 Register
                pub const SMHC_RESP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4022024));

                /// Response 2 Register
                pub const SMHC_RESP2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4022028));

                /// Response 3 Register
                pub const SMHC_RESP3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402202c));

                /// Interrupt Mask Register
                pub const SMHC_INTMASK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] Response Error Interrupt Enable
                    RE_INT_EN: u1 = 0,

                    /// [2:2] Command Complete Interrupt Enable
                    CC_INT_EN: u1 = 0,

                    /// [3:3] Data Transfer Complete Interrupt Enable
                    DTC_INT_EN: u1 = 0,

                    /// [4:4] Data Transmit Request Interrupt Enable
                    DTR_INT_EN: u1 = 0,

                    /// [5:5] Data Receive Request Interrupt Enable
                    DRR_INT_EN: u1 = 0,

                    /// [6:6] Response CRC Error Interrupt Enable
                    RCE_INT_EN: u1 = 0,

                    /// [7:7] Data CRC Error Interrupt Enable
                    DCE_INT_EN: u1 = 0,

                    /// [8:8] Response Timeout/Boot ACK Received Interrupt Enable
                    RTO_BACK_INT_EN: u1 = 0,

                    /// [9:9] Data Timeout/Boot Data Start Interrupt Enable
                    DTO_BDS_INT_EN: u1 = 0,

                    /// [10:10] Data Starvation Timeout/V1.8 Switch Done Interrupt Enable
                    DSTO_VSD_INT_EN: u1 = 0,

                    /// [11:11] FIFO Underrun/Overflow Interrupt Enable
                    FU_FO_INT_EN: u1 = 0,

                    /// [12:12] Command Busy and Illegal Write Interrupt Enable
                    CB_IW_INT_EN: u1 = 0,

                    /// [13:13] Data Start Error Interrupt Enable
                    DSE_BC_INT_EN: u1 = 0,

                    /// [14:14] Auto Command Done Interrupt Enable
                    ACD_INT_EN: u1 = 0,

                    /// [15:15] Data End-bit Error Interrupt Enable
                    DEE_INT_EN: u1 = 0,

                    /// [16:16] SDIO Interrupt Enable
                    SDIO_INT_EN: u1 = 0,

                    /// [17:29]
                    res1: u13 = 0,

                    /// [30:30] Card Inserted Interrupt Enable
                    CARD_INSERT_INT_EN: u1 = 0,

                    /// [31:31] Card Removed Interrupt Enable
                    CARD_REMOVAL_INT_EN: u1 = 0,
                }), @ptrFromInt(0x4022030));

                /// Masked Interrupt Status Register
                pub const SMHC_MINTSTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] Response Errors
                    M_RE_INT: u1 = 0,

                    /// [2:2] Command Complete
                    M_CC_INT: u1 = 0,

                    /// [3:3] Data Transfer Complete
                    M_DTC_INT: u1 = 0,

                    /// [4:4] Data Transmit Request
                    M_DTR_INT: u1 = 0,

                    /// [5:5] Data Receive Request
                    M_DRR_INT: u1 = 0,

                    /// [6:6] Response CRC Error
                    M_RCE_INT: u1 = 0,

                    /// [7:7] Data CRC Error
                    M_DCE_INT: u1 = 0,

                    /// [8:8] Response Timeout/Boot ACK Received
                    M_RTO_BACK_INT: u1 = 0,

                    /// [9:9] Data Timeout/Boot Data Start
                    M_DTO_BDS_INT: u1 = 0,

                    /// [10:10] Data Starvation Timeout/V1.8 Switch Done
                    M_DSTO_VSD_INT: u1 = 0,

                    /// [11:11] FIFO Underrun/Overflow
                    M_FU_FO_INT: u1 = 0,

                    /// [12:12] Command Busy and Illegal Write
                    M_CB_IW_INT: u1 = 0,

                    /// [13:13] Data Start Error/Busy Clear
                    M_DSE_BC_INT: u1 = 0,

                    /// [14:14] Auto Command Done
                    M_ACD_INT: u1 = 0,

                    /// [15:15] Data End-bit Error
                    M_DEE_INT: u1 = 0,

                    /// [16:16] SDIO Interrupt
                    M_SDIO_INT: u1 = 0,

                    /// [17:29]
                    res1: u13 = 0,

                    /// [30:30] Card Inserted
                    M_CARD_INSERT: u1 = 0,

                    /// [31:31] Card Removed
                    M_CARD_REMOVAL_INT: u1 = 0,
                }), @ptrFromInt(0x4022034));

                /// Raw Interrupt Status Register
                pub const SMHC_RINTSTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    res0: u1 = 0,

                    /// [1:1] Response Error
                    RE: u1 = 0,

                    /// [2:2] Command Complete
                    CC: u1 = 0,

                    /// [3:3] Data Transfer Complete
                    DTC: u1 = 0,

                    /// [4:4] Data Transmit Request
                    DTR: u1 = 0,

                    /// [5:5] Data Receive Request
                    DRR: u1 = 0,

                    /// [6:6] Response CRC Error
                    RCE: u1 = 0,

                    /// [7:7] Data CRC Error
                    DCE: u1 = 0,

                    /// [8:8] Response Timeout/Boot ACK Received
                    RTO_BACK: u1 = 0,

                    /// [9:9] Data Timeout/Boot Data Start
                    DTO_BDS: u1 = 0,

                    /// [10:10] Data Starvation Timeout/V1.8 Switch Done
                    DSTO_VSD: u1 = 0,

                    /// [11:11] FIFO Underrun/Overflow
                    FU_FO: u1 = 0,

                    /// [12:12] Command Busy and Illegal Write
                    CB_IW: u1 = 0,

                    /// [13:13] Data Start Error/Busy Clear
                    DSE_BC: u1 = 0,

                    /// [14:14] Auto Command Done
                    ACD: u1 = 0,

                    /// [15:15] Data End-bit Error
                    DEE: u1 = 0,

                    /// [16:16] SDIO Interrupt
                    SDIOI_INT: u1 = 0,

                    /// [17:29]
                    res1: u13 = 0,

                    /// [30:30] Card Inserted
                    CARD_INSERT: u1 = 0,

                    /// [31:31] Card Removed
                    CARD_REMOVAL: u1 = 0,
                }), @ptrFromInt(0x4022038));

                /// Status Register
                pub const SMHC_STATUS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] FIFO RX Water Level Flag
                    FIFO_RX_LEVEL: enum(u1) {
                        /// FIFO does not reach the receive trigger level
                        not_reach = 0,

                        /// FIFO reaches the receive trigger level
                        reach = 1,
                    } = .not_reach,

                    /// [1:1] FIFO TX Water Level Flag
                    FIFO_TX_LEVEL: enum(u1) {
                        /// FIFO does not reach the transmit trigger level
                        not_reach = 0,

                        /// FIFO reaches the transmit trigger level
                        reach = 1,
                    } = .not_reach,

                    /// [2:2] FIFO Empty
                    FIFO_EMPTY: enum(u1) {
                        /// FIFO is not empty
                        not_sempty = 0,

                        /// FIFO is empty
                        empty = 1,
                    } = .not_sempty,

                    /// [3:3] sFIFO Full
                    FIFO_FULL: enum(u1) {
                        /// FIFO is not full
                        not_full = 0,

                        /// FIFO is full
                        full = 1,
                    } = .not_full,

                    /// [4:7] Command FSM States
                    FSM_STA: enum(u4) {
                        /// Idle
                        idle = 0b0000,

                        /// Send init sequence
                        sis = 0b0001,

                        /// TX CMD start bit
                        txcsb = 0b0010,

                        /// TX CMD TX bit
                        txctb = 0b0011,

                        /// TX CMD index + argument
                        txcia = 0b0100,

                        /// TX CMD CRC7
                        txcc = 0b0101,

                        /// TX CMD end bit
                        txceb = 0b0110,

                        /// RX response start bit
                        rxrsb = 0b0111,

                        /// RX response IRQ responses
                        rxrir = 0b1000,

                        /// RX response TX bit
                        rxrtb = 0b1001,

                        /// RX response CMD index
                        rxrci = 0b1010,

                        /// RX response data
                        rxrd = 0b1011,

                        /// RX response CRC7
                        rxrc = 0b1100,

                        /// RX response end bit
                        rxreb = 0b1101,

                        /// CMD path wait NCC
                        cpwn = 0b1110,

                        /// Wait; CMD-to-response turn around
                        wait = 0b1111,
                    } = .idle,

                    /// [8:8] Data[3] Statuss
                    CARD_PRESENT: enum(u1) {
                        /// The card is not present
                        not_present = 0,

                        /// The card is present
                        present = 1,
                    } = .not_present,

                    /// [9:9] Card Data Busy
                    CARD_BUSY: enum(u1) {
                        /// Card data is not busy
                        not_busy = 0,

                        /// Card data is busy
                        busy = 1,
                    } = .not_busy,

                    /// [10:10] Data FSM Busy
                    FSM_BUSY: u1 = 0,

                    /// [11:16] Response Index
                    RESP_IDX: u6 = 0,

                    /// [17:25] FIFO Level
                    FIFO_LEVEL: u9 = 0,

                    /// [26:30]
                    res0: u5 = 0,

                    /// [31:31] DMA Request
                    DMA_REQ: u1 = 0,
                }), @ptrFromInt(0x402203c));

                /// FIFO Water Level Register
                pub const SMHC_FIFOTH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] TX Trigger Level
                    TX_TL: u8 = 0,

                    /// [8:15]
                    res0: u8 = 0,

                    /// [16:23] RX Trigger Level
                    RX_TL: u8 = 0,

                    /// [24:27]
                    res1: u4 = 0,

                    /// [28:30] sBurst Size of Multiple Transaction
                    BSIZE_OF_TRANS: enum(u3) {
                        ///  1 transfer
                        T1 = 0b000,

                        ///  4 transfers
                        T4 = 0b001,

                        ///  8 transfers
                        T8 = 0b010,

                        ///  16 transfers
                        T16 = 0b011,
                    } = .T1,

                    /// [31:31]
                    res2: u1 = 0,
                }), @ptrFromInt(0x4022040));

                /// FIFO Function Select Register
                pub const SMHC_FUNS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Host Send MMC IRQ Response
                    HOST_SEND_MIMC_IRQRESQ: enum(u1) {
                        ///
                        ignored = 0,

                        /// Send auto IRQ response
                        send = 1,
                    } = .ignored,

                    /// [1:1] Read Wait
                    READ_WAIT: enum(u1) {
                        /// Clear SDIO read wait
                        clear = 0,

                        /// Assert SDIO read wait
                        assert = 1,
                    } = .clear,

                    /// [2:2] Abort Read Data
                    ABT_RDATA: enum(u1) {
                        ///
                        ignored = 0,

                        ///
                        abort = 1,
                    } = .ignored,

                    /// [3:31]
                    res0: u29 = 0,
                }), @ptrFromInt(0x4022044));

                /// Transferred Byte Count between Controller and Card
                pub const SMHC_TBC0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4022048));

                /// Transferred Byte Count between Host Memory and Internal FIFO
                pub const SMHC_TBC1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402204c));

                /// Current Debug Control Register
                pub const SMHC_DBGC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4022050));

                /// CRC Status Detect Control Registers
                pub const SMHC_CSDC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3]
                    CRC_DET_PARA: enum(u4) {
                        ///
                        HS400 = 0b110,

                        ///
                        Other = 0b011,
                    } = .HS400,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x4022054));

                /// Auto Command 12 Argument Register
                pub const SMHC_A12A = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    SD_A12A: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x4022058));

                /// SD New Timing Set Register
                pub const SMHC_NTSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    HS400_NEW_SAMPLE_EN: enum(u1) {
                        /// Disable hs400 new sample method
                        disable = 0,

                        /// Enable hs400 new sample method
                        enable = 1,
                    } = .disable,

                    /// [1:3]
                    res0: u3 = 0,

                    /// [4:5]
                    CMD_SAMPLE_TIMING_PHASE: enum(u2) {
                        /// Sample timing phase offset 90
                        O90 = 0b00,

                        /// Sample timing phase offset 180
                        O180 = 0b01,

                        /// Sample timing phase offset 270
                        O270 = 0b10,

                        /// Ignore
                        O0 = 0b11,
                    } = .O90,

                    /// [6:7]
                    res1: u2 = 0,

                    /// [8:9]
                    DAT_SAMPLE_TIMING_PHASE: enum(u2) {
                        /// Sample timing phase offset 90
                        O90 = 0b00,

                        /// Sample timing phase offset 180
                        O180 = 0b01,

                        /// Sample timing phase offset 270
                        O270 = 0b10,

                        /// Sample timing phase offset 0 (only for SD2 hs400 mode)
                        O0 = 0b11,
                    } = .O90,

                    /// [10:15]
                    res2: u6 = 0,

                    /// [16:16] Clear command rx phase before sending the command
                    CMD_SEND_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [17:19]
                    res3: u3 = 0,

                    /// [20:20] Clear the input phase of data lines before receiving the data
                    DAT_RECV_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [21:21] Clear the input phase of data lines before transferring the data
                    DAT_TRANS_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [22:22] Clear the input phase of data lines before receiving the CRC status
                    DAT_CRC_STATUS_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [23:23]
                    res4: u1 = 0,

                    /// [24:24] Clear the input phase of command lines and data lines during the update clock operation
                    CMD_DAT_RX_PHASE_CLR: enum(u1) {
                        /// Disabled
                        Disabled = 0,

                        /// Enabled
                        Enabled = 1,
                    } = .Disabled,

                    /// [25:30]
                    res5: u6 = 0,

                    /// [31:31]
                    MODE_SELECT: enum(u1) {
                        /// Old mode of Sample/Output Timing
                        old_mode = 0,

                        /// New mode of Sample/Output Timing
                        new_mode = 1,
                    } = .old_mode,
                }), @ptrFromInt(0x402205c));

                /// Hardware Reset Register
                pub const SMHC_HWRST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    HW_RST: enum(u1) {
                        /// Active mode
                        active = 0,

                        /// Reset
                        Reset = 1,
                    } = .active,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x4022078));

                /// IDMAC Control Register
                pub const SMHC_IDMAC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] DMA Reset
                    IDMAC_RST: u1 = 0,

                    /// [1:1] Fixed Burst
                    FIX_BUST_CTRL: u1 = 0,

                    /// [2:6]
                    res0: u5 = 0,

                    /// [7:7] IDMAC Enable
                    IDMAC_ENB: u1 = 0,

                    /// [8:30]
                    res1: u23 = 0,

                    /// [31:31]
                    DES_LOAD_CTRL: u1 = 0,
                }), @ptrFromInt(0x4022080));

                /// Descriptor List Base Address Register
                pub const SMHC_DLBA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4022084));

                /// IDMAC Status Register
                pub const SMHC_IDST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Transmit Interrupt
                    TX_INT: u1 = 0,

                    /// [1:1] Receive Interrupt
                    RX_INT: u1 = 0,

                    /// [2:2] Fatal Bus Error Interrupt
                    FATAL_BERR_INT: u1 = 0,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] Descriptor Unavailable Interrupt
                    DES_UNAVL_INT: u1 = 0,

                    /// [5:5] Card Error Summary
                    ERR_FLAG_SUM: u1 = 0,

                    /// [6:7]
                    res1: u2 = 0,

                    /// [8:8] Normal Interrupt Summary
                    NOR_INT_SUM: u1 = 0,

                    /// [9:9] Abnormal Interrupt Summary
                    ABN_INT_SUM: u1 = 0,

                    /// [10:12] Error Bits
                    IDMAC_ERR_STA: enum(u3) {
                        /// Host Abort received during the transmission
                        transmission = 0b001,

                        /// Host Abort received during the reception
                        reception = 0b010,
                    } = .transmission,

                    /// [13:31]
                    res2: u19 = 0,
                }), @ptrFromInt(0x4022088));

                /// IDMAC Interrupt Enable Register
                pub const SMHC_IDIE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Transmit Interrupt Enable
                    TX_INT_ENB: u1 = 0,

                    /// [1:1] Receive Interrupt Enables
                    RX_INT_ENB: u1 = 0,

                    /// [2:2] Fatal Bus Error Enable
                    FERR_INT_ENB: u1 = 0,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4]  Descriptor Unavailable Interrupt
                    DES_UNAVL_INT_ENB: u1 = 0,

                    /// [5:5] Card Error Summary Interrupt Enable
                    ERR_SUM_INT_ENB: u1 = 0,

                    /// [6:31]
                    res1: u26 = 0,
                }), @ptrFromInt(0x402208c));

                /// Card Threshold Control Register
                pub const SMHC_THLD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Card Read Threshold Enable
                    CARD_RD_THLD_ENB: enum(u1) {
                        /// Card read threshold disabled
                        disabled = 0,

                        /// Card read threshold enabled
                        enabled = 1,
                    } = .disabled,

                    /// [1:1] Busy Clear Interrupt Generation
                    BCIG: enum(u1) {
                        /// Busy clear interrupt disabled
                        disabled = 0,

                        /// Busy clear interrupt enabled
                        enabled = 1,
                    } = .disabled,

                    /// [2:2] Card Read/Write Threshold Enable
                    CARD_WR_THLD_ENB: enum(u1) {
                        /// Card write threshold disabled
                        disabled = 0,

                        /// Card write threshold enabled
                        enabled = 1,
                    } = .disabled,

                    /// [3:15]
                    res0: u13 = 0,

                    /// [16:27] Card Read/Write Threshold Size
                    CARD_WR_THLD: u12 = 0,

                    /// [28:31]
                    res1: u4 = 0,
                }), @ptrFromInt(0x4022100));

                /// Sample FIFO Control Register
                pub const SMHC_SFC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Bypass enable
                    BYPASS_EN: u1 = 0,

                    /// [1:4] Stop Clock Control
                    STOP_CLK_CTRL: u4 = 0,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x4022104));

                /// Auto Command 23 Argument Register
                pub const SMHC_A23A = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4022108));

                /// eMMC4.5 DDR Start Bit Detection Control Register
                pub const EMMC_DDR_SBIT_DET = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Control for start bit detection mechanism inside mstorage based on duration of start bit
                    HALF_START_BIT: enum(u1) {
                        /// Full cycle
                        full = 0,

                        /// Less than one full cycle
                        less = 1,
                    } = .full,

                    /// [1:30]
                    res0: u30 = 0,

                    /// [31:31] HS400 Mode Enable
                    HS400_MD_EN: enum(u1) {
                        /// Disabled
                        disabled = 0,

                        /// Enabled
                        enabled = 1,
                    } = .disabled,
                }), @ptrFromInt(0x402210c));

                /// Extended Command Register
                pub const SMHC_EXT_CMD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Send CMD23 Automatically
                    AUTO_CMD23_EN: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x4022138));

                /// Extended Response Register
                pub const SMHC_EXT_RESP = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402213c));

                /// Drive Delay Control Register
                pub const SMHC_DRV_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:16] Command Drive Phase Select
                    CMD_DRV_PH_SEL: u1 = 0,

                    /// [17:17] Data Drive Phase Select
                    DAT_DRV_PH_SEL: u1 = 0,

                    /// [18:31]
                    res1: u14 = 0,
                }), @ptrFromInt(0x4022140));

                /// Sample Delay Control Register
                pub const SMHC_SMAP_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] Sample Delay Software
                    SAMP_DL_SW: u6 = 0,

                    /// [6:6]
                    res0: u1 = 0,

                    /// [7:7] Sample Delay Software Enable
                    SAMP_DL_SW_EN: u1 = 0,

                    /// [8:13] Sample Delay
                    SAMP_DL: u6 = 0,

                    /// [14:14] Sample Delay Calibration Done
                    SAMP_DL_CAL_DONE: u1 = 0,

                    /// [15:15] Sample Delay Calibration Start
                    SAMP_DL_CAL_START: u1 = 0,

                    /// [16:31]
                    res1: u16 = 0,
                }), @ptrFromInt(0x4022144));

                /// Data Strobe Delay Control Register
                pub const SMHC_DS_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] Data Storbe Delay Software
                    DS_DL_SW: u6 = 0,

                    /// [6:6]
                    res0: u1 = 0,

                    /// [7:7] Sample Delay Software Enable
                    DS_DL_SW_EN: u1 = 0,

                    /// [8:13] Data Strobe Delay
                    DS_DL: u6 = 0,

                    /// [14:14] Data Strobe Delay Calibration Done
                    DS_DL_CAL_DONE: u1 = 0,

                    /// [15:15] Data Strobe Delay Calibration Start
                    DS_DL_CAL_START: u1 = 0,

                    /// [16:31]
                    res1: u16 = 0,
                }), @ptrFromInt(0x4022148));

                /// HS400 Delay Control Register
                pub const SMHC_HS400_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] HS400 Delay Software
                    HS400_DL_SW: u4 = 0,

                    /// [4:6]
                    res0: u3 = 0,

                    /// [7:7] Sample Delay Software Enable
                    HS400_DL_SW_EN: u1 = 0,

                    /// [8:11] HS400 Delay
                    HS400_DL: u4 = 0,

                    /// [12:13]
                    res1: u2 = 0,

                    /// [14:14] HS400 Delay Calibration Done
                    HS400_DL_CAL_DONE: u1 = 0,

                    /// [15:15] HS400 Delay Calibration Start
                    HS400_DL_CAL_START: u1 = 0,

                    /// [16:31]
                    res2: u16 = 0,
                }), @ptrFromInt(0x402214c));

                /// Read/Write FIFO
                pub const SMHC_FIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4022200));
            };

            /// I2S/PCM
            pub const I2S_PCM0 = struct {
                /// I2S/PCM Control Register
                pub const I2S_PCM_CTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032000));

                /// I2S/PCM Format Register 0
                pub const I2S_PCM_FMT0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032004));

                /// I2S/PCM Format Register 1
                pub const I2S_PCM_FMT1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032008));

                /// I2S/PCM Interrupt Status Register
                pub const I2S_PCM_ISTA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203200c));

                /// I2S/PCM RXFIFO Register
                pub const I2S_PCM_RXFIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032010));

                /// I2S/PCM FIFO Control Register
                pub const I2S_PCM_FCTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032014));

                /// I2S/PCM FIFO Status Register
                pub const I2S_PCM_FSTA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032018));

                /// I2S/PCM DMA and Interrupt Control Register
                pub const I2S_PCM_INT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203201c));

                /// I2S/PCM TXFIFO Register
                pub const I2S_PCM_TXFIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032020));

                /// I2S/PCM Clock Divide Register
                pub const I2S_PCM_CLKD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032024));

                /// I2S/PCM TX Sample Counter Register
                pub const I2S_PCM_TXCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032028));

                /// I2S/PCM RX Sample Counter Register
                pub const I2S_PCM_RXCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203202c));

                /// I2S/PCM Channel Configuration Register
                pub const I2S_PCM_CHCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032030));

                /// I2S/PCM TX0 Channel Select Register
                pub const I2S_PCM_TX0CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032034));

                /// I2S/PCM TX1 Channel Select Register
                pub const I2S_PCM_TX1CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032038));

                /// I2S/PCM TX2 Channel Select Register
                pub const I2S_PCM_TX2CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203203c));

                /// I2S/PCM TX3 Channel Select Register
                pub const I2S_PCM_TX3CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032040));

                /// I2S/PCM TX0 Channel Mapping Register0
                pub const I2S_PCM_TX0CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032044));

                /// I2S/PCM TX0 Channel Mapping Register1
                pub const I2S_PCM_TX0CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032048));

                /// I2S/PCM TX1 Channel Mapping Register0
                pub const I2S_PCM_TX1CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203204c));

                /// I2S/PCM TX1 Channel Mapping Register1
                pub const I2S_PCM_TX1CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032050));

                /// I2S/PCM TX2 Channel Mapping Register0
                pub const I2S_PCM_TX2CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032054));

                /// I2S/PCM TX2 Channel Mapping Register1
                pub const I2S_PCM_TX2CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032058));

                /// I2S/PCM TX3 Channel Mapping Register0
                pub const I2S_PCM_TX3CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203205c));

                /// I2S/PCM TX3 Channel Mapping Register1
                pub const I2S_PCM_TX3CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032060));

                /// I2S/PCM RX Channel Select Register
                pub const I2S_PCM_RXCHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032064));

                /// I2S/PCM RX Channel Mapping Register0
                pub const I2S_PCM_RXCHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032068));

                /// I2S/PCM RX Channel Mapping Register1
                pub const I2S_PCM_RXCHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203206c));

                /// I2S/PCM RX Channel Mapping Register2
                pub const I2S_PCM_RXCHMAP2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032070));

                /// I2S/PCM RX Channel Mapping Register3
                pub const I2S_PCM_RXCHMAP3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032074));

                /// ASRC MCLK Configuration Register
                pub const MCLKCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032080));

                /// ASRC Out Sample Rate Configuration Register
                pub const FsoutCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032084));

                /// ASRC Input Sample Pulse Extend Configuration Register
                pub const FsinEXTCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032088));

                /// ASRC Enable Register
                pub const ASRCCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203208c));

                /// ASRC Manual Ratio Configuration Register
                pub const ASRCMANCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032090));

                /// ASRC Status Register
                pub const ASRCRATIOSTAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032094));

                /// ASRC FIFO Level Status Register
                pub const ASRCFIFOSTAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2032098));

                /// ASRC MBIST Test Configuration Register
                pub const ASRCMBISTCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203209c));

                /// ASRC MBIST Test Status Register
                pub const ASRCMBISTSTAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20320a0));
            };

            /// I2S/PCM
            pub const I2S_PCM1 = struct {
                /// I2S/PCM Control Register
                pub const I2S_PCM_CTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033000));

                /// I2S/PCM Format Register 0
                pub const I2S_PCM_FMT0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033004));

                /// I2S/PCM Format Register 1
                pub const I2S_PCM_FMT1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033008));

                /// I2S/PCM Interrupt Status Register
                pub const I2S_PCM_ISTA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203300c));

                /// I2S/PCM RXFIFO Register
                pub const I2S_PCM_RXFIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033010));

                /// I2S/PCM FIFO Control Register
                pub const I2S_PCM_FCTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033014));

                /// I2S/PCM FIFO Status Register
                pub const I2S_PCM_FSTA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033018));

                /// I2S/PCM DMA and Interrupt Control Register
                pub const I2S_PCM_INT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203301c));

                /// I2S/PCM TXFIFO Register
                pub const I2S_PCM_TXFIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033020));

                /// I2S/PCM Clock Divide Register
                pub const I2S_PCM_CLKD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033024));

                /// I2S/PCM TX Sample Counter Register
                pub const I2S_PCM_TXCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033028));

                /// I2S/PCM RX Sample Counter Register
                pub const I2S_PCM_RXCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203302c));

                /// I2S/PCM Channel Configuration Register
                pub const I2S_PCM_CHCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033030));

                /// I2S/PCM TX0 Channel Select Register
                pub const I2S_PCM_TX0CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033034));

                /// I2S/PCM TX1 Channel Select Register
                pub const I2S_PCM_TX1CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033038));

                /// I2S/PCM TX2 Channel Select Register
                pub const I2S_PCM_TX2CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203303c));

                /// I2S/PCM TX3 Channel Select Register
                pub const I2S_PCM_TX3CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033040));

                /// I2S/PCM TX0 Channel Mapping Register0
                pub const I2S_PCM_TX0CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033044));

                /// I2S/PCM TX0 Channel Mapping Register1
                pub const I2S_PCM_TX0CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033048));

                /// I2S/PCM TX1 Channel Mapping Register0
                pub const I2S_PCM_TX1CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203304c));

                /// I2S/PCM TX1 Channel Mapping Register1
                pub const I2S_PCM_TX1CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033050));

                /// I2S/PCM TX2 Channel Mapping Register0
                pub const I2S_PCM_TX2CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033054));

                /// I2S/PCM TX2 Channel Mapping Register1
                pub const I2S_PCM_TX2CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033058));

                /// I2S/PCM TX3 Channel Mapping Register0
                pub const I2S_PCM_TX3CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203305c));

                /// I2S/PCM TX3 Channel Mapping Register1
                pub const I2S_PCM_TX3CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033060));

                /// I2S/PCM RX Channel Select Register
                pub const I2S_PCM_RXCHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033064));

                /// I2S/PCM RX Channel Mapping Register0
                pub const I2S_PCM_RXCHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033068));

                /// I2S/PCM RX Channel Mapping Register1
                pub const I2S_PCM_RXCHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203306c));

                /// I2S/PCM RX Channel Mapping Register2
                pub const I2S_PCM_RXCHMAP2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033070));

                /// I2S/PCM RX Channel Mapping Register3
                pub const I2S_PCM_RXCHMAP3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033074));

                /// ASRC MCLK Configuration Register
                pub const MCLKCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033080));

                /// ASRC Out Sample Rate Configuration Register
                pub const FsoutCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033084));

                /// ASRC Input Sample Pulse Extend Configuration Register
                pub const FsinEXTCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033088));

                /// ASRC Enable Register
                pub const ASRCCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203308c));

                /// ASRC Manual Ratio Configuration Register
                pub const ASRCMANCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033090));

                /// ASRC Status Register
                pub const ASRCRATIOSTAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033094));

                /// ASRC FIFO Level Status Register
                pub const ASRCFIFOSTAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2033098));

                /// ASRC MBIST Test Configuration Register
                pub const ASRCMBISTCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203309c));

                /// ASRC MBIST Test Status Register
                pub const ASRCMBISTSTAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20330a0));
            };

            /// I2S/PCM
            pub const I2S_PCM2 = struct {
                /// I2S/PCM Control Register
                pub const I2S_PCM_CTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034000));

                /// I2S/PCM Format Register 0
                pub const I2S_PCM_FMT0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034004));

                /// I2S/PCM Format Register 1
                pub const I2S_PCM_FMT1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034008));

                /// I2S/PCM Interrupt Status Register
                pub const I2S_PCM_ISTA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203400c));

                /// I2S/PCM RXFIFO Register
                pub const I2S_PCM_RXFIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034010));

                /// I2S/PCM FIFO Control Register
                pub const I2S_PCM_FCTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034014));

                /// I2S/PCM FIFO Status Register
                pub const I2S_PCM_FSTA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034018));

                /// I2S/PCM DMA and Interrupt Control Register
                pub const I2S_PCM_INT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203401c));

                /// I2S/PCM TXFIFO Register
                pub const I2S_PCM_TXFIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034020));

                /// I2S/PCM Clock Divide Register
                pub const I2S_PCM_CLKD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034024));

                /// I2S/PCM TX Sample Counter Register
                pub const I2S_PCM_TXCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034028));

                /// I2S/PCM RX Sample Counter Register
                pub const I2S_PCM_RXCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203402c));

                /// I2S/PCM Channel Configuration Register
                pub const I2S_PCM_CHCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034030));

                /// I2S/PCM TX0 Channel Select Register
                pub const I2S_PCM_TX0CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034034));

                /// I2S/PCM TX1 Channel Select Register
                pub const I2S_PCM_TX1CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034038));

                /// I2S/PCM TX2 Channel Select Register
                pub const I2S_PCM_TX2CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203403c));

                /// I2S/PCM TX3 Channel Select Register
                pub const I2S_PCM_TX3CHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034040));

                /// I2S/PCM TX0 Channel Mapping Register0
                pub const I2S_PCM_TX0CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034044));

                /// I2S/PCM TX0 Channel Mapping Register1
                pub const I2S_PCM_TX0CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034048));

                /// I2S/PCM TX1 Channel Mapping Register0
                pub const I2S_PCM_TX1CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203404c));

                /// I2S/PCM TX1 Channel Mapping Register1
                pub const I2S_PCM_TX1CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034050));

                /// I2S/PCM TX2 Channel Mapping Register0
                pub const I2S_PCM_TX2CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034054));

                /// I2S/PCM TX2 Channel Mapping Register1
                pub const I2S_PCM_TX2CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034058));

                /// I2S/PCM TX3 Channel Mapping Register0
                pub const I2S_PCM_TX3CHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203405c));

                /// I2S/PCM TX3 Channel Mapping Register1
                pub const I2S_PCM_TX3CHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034060));

                /// I2S/PCM RX Channel Select Register
                pub const I2S_PCM_RXCHSEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034064));

                /// I2S/PCM RX Channel Mapping Register0
                pub const I2S_PCM_RXCHMAP0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034068));

                /// I2S/PCM RX Channel Mapping Register1
                pub const I2S_PCM_RXCHMAP1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203406c));

                /// I2S/PCM RX Channel Mapping Register2
                pub const I2S_PCM_RXCHMAP2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034070));

                /// I2S/PCM RX Channel Mapping Register3
                pub const I2S_PCM_RXCHMAP3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034074));

                /// ASRC MCLK Configuration Register
                pub const MCLKCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034080));

                /// ASRC Out Sample Rate Configuration Register
                pub const FsoutCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034084));

                /// ASRC Input Sample Pulse Extend Configuration Register
                pub const FsinEXTCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034088));

                /// ASRC Enable Register
                pub const ASRCCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203408c));

                /// ASRC Manual Ratio Configuration Register
                pub const ASRCMANCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034090));

                /// ASRC Status Register
                pub const ASRCRATIOSTAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034094));

                /// ASRC FIFO Level Status Register
                pub const ASRCFIFOSTAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2034098));

                /// ASRC MBIST Test Configuration Register
                pub const ASRCMBISTCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203409c));

                /// ASRC MBIST Test Status Register
                pub const ASRCMBISTSTAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20340a0));
            };

            /// DMIC
            pub const DMIC = struct {
                /// DMIC Enable Control Register
                pub const DMIC_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031000));

                /// DMIC Sample Rate Register
                pub const DMIC_SR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031004));

                /// DMIC Control Register
                pub const DMIC_CTR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031008));

                /// DMIC Data Register
                pub const DMIC_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031010));

                /// DMIC Interrupt Control Register
                pub const DMIC_INTC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031014));

                /// DMIC Interrupt Status Register
                pub const DMIC_INTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031018));

                /// DMIC RXFIFO Control Register
                pub const DMIC_RXFIFO_CTR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203101c));

                /// DMIC RXFIFO Status Register
                pub const DMIC_RXFIFO_STA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031020));

                /// DMIC Channel Numbers Register
                pub const DMIC_CH_NUM = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031024));

                /// DMIC Channel Mapping Register
                pub const DMIC_CH_MAP = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031028));

                /// DMIC Counter Register
                pub const DMIC_CNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203102c));

                /// Data0 and Data1 Volume Control Register
                pub const DATA0_DATA1_VOL_CTR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031030));

                /// Data2 And Data3 Volume Control Register
                pub const DATA2_DATA3_VOL_CTR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031034));

                /// High Pass Filter Enable Control Register
                pub const HPF_EN_CTR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031038));

                /// High Pass Filter Coefficient Register
                pub const HPF_COEF_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203103c));

                /// High Pass Filter Gain Register
                pub const HPF_GAIN_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2031040));
            };

            /// One Wire Audio
            pub const OWA = struct {
                /// OWA General Control Register
                pub const OWA_GEN_CTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036000));

                /// OWA TX Configuration Register
                pub const OWA_TX_CFIG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036004));

                /// OWA RX Configuration Register
                pub const OWA_RX_CFIG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036008));

                /// OWA Interrupt Status Register
                pub const OWA_ISTA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203600c));

                /// OWA RXFIFO Register
                pub const OWA_RXFIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036010));

                /// OWA FIFO Control Register
                pub const OWA_FCTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036014));

                /// OWA FIFO Status Register
                pub const OWA_FSTA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036018));

                /// OWA Interrupt Control Register
                pub const OWA_INT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203601c));

                /// OWA TX FIFO Register
                pub const OWA_TX_FIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036020));

                /// OWA TX Counter Register
                pub const OWA_TX_CNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036024));

                /// OWA RX Counter Register
                pub const OWA_RX_CNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036028));

                /// OWA TX Channel Status Register0
                pub const OWA_TX_CHSTA0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203602c));

                /// OWA TX Channel Status Register1
                pub const OWA_TX_CHSTA1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036030));

                /// OWA RX Channel Status Register0
                pub const OWA_RXCHSTA0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036034));

                /// OWA RX Channel Status Register1
                pub const OWA_RXCHSTA1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036038));

                /// OWA Expand Control Register
                pub const OWA_EXP_CTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036040));

                /// OWA Expand Interrupt Status Register
                pub const OWA_EXP_ISTA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036044));

                /// OWA Expand Infomation Register0
                pub const OWA_EXP_INFO_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036048));

                /// OWA Expand Infomation Register1
                pub const OWA_EXP_INFO_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203604c));

                /// OWA Expand Debug Register0
                pub const OWA_EXP_DBG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036050));

                /// OWA Expand Debug Register1
                pub const OWA_EXP_DBG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2036054));
            };

            /// Audio Codec
            pub const AudioCodec = struct {
                /// DAC Digital Part Control Register
                pub const AC_DAC_DPC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030000));

                /// DAC Volume Control Register
                pub const DAC_VOL_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030004));

                /// DAC FIFO Control Register
                pub const AC_DAC_FIFOC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030010));

                /// DAC FIFO Status Register
                pub const AC_DAC_FIFOS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030014));

                /// DAC TX DATA Register
                pub const AC_DAC_TXDATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030020));

                /// DAC TX FIFO Counter Register
                pub const AC_DAC_CNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030024));

                /// DAC Debug Register
                pub const AC_DAC_DG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030028));

                /// ADC FIFO Control Register
                pub const AC_ADC_FIFOC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030030));

                /// ADC Volume Control1 Register
                pub const ADC_VOL_CTRL1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030034));

                /// ADC FIFO Status Register
                pub const AC_ADC_FIFOS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030038));

                /// ADC RX Data Register
                pub const AC_ADC_RXDATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030040));

                /// ADC RX Counter Register
                pub const AC_ADC_CNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030044));

                /// ADC Debug Register
                pub const AC_ADC_DG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203004c));

                /// ADC Digtial Control Register
                pub const ADC_DIG_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030050));

                /// VRA1 Speedup Down Control Register
                pub const VRA1SPEEDUP_DOWN_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030054));

                /// DAC DAP Control Register
                pub const AC_DAC_DAP_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20300f0));

                /// ADC DAP Control Register
                pub const AC_ADC_DAP_CTR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20300f8));

                /// DAC DRC High HPF Coef Register
                pub const AC_DAC_DRC_HHPFC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030100));

                /// DAC DRC Low HPF Coef Register
                pub const AC_DAC_DRC_LHPFC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030104));

                /// DAC DRC Control Register
                pub const AC_DAC_DRC_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030108));

                /// DAC DRC Left Peak Filter High Attack Time Coef Register
                pub const AC_DAC_DRC_LPFHAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203010c));

                /// DAC DRC Left Peak Filter Low Attack Time Coef Register
                pub const AC_DAC_DRC_LPFLAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030110));

                /// DAC DRC Right Peak Filter High Attack Time Coef Register
                pub const AC_DAC_DRC_RPFHAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030114));

                /// DAC DRC Peak Filter Low Attack Time Coef Register
                pub const AC_DAC_DRC_RPFLAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030118));

                /// DAC DRC Left Peak Filter High Release Time Coef Register
                pub const AC_DAC_DRC_LPFHRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203011c));

                /// DAC DRC Left Peak Filter Low Release Time Coef Register
                pub const AC_DAC_DRC_LPFLRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030120));

                /// DAC DRC Right Peak filter High Release Time Coef Register
                pub const AC_DAC_DRC_RPFHRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030124));

                /// DAC DRC Right Peak filter Low Release Time Coef Register
                pub const AC_DAC_DRC_RPFLRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030128));

                /// DAC DRC Left RMS Filter High Coef Register
                pub const AC_DAC_DRC_LRMSHAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203012c));

                /// DAC DRC Left RMS Filter Low Coef Register
                pub const AC_DAC_DRC_LRMSLAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030130));

                /// DAC DRC Right RMS Filter High Coef Register
                pub const AC_DAC_DRC_RRMSHAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030134));

                /// DAC DRC Right RMS Filter Low Coef Register
                pub const AC_DAC_DRC_RRMSLAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030138));

                /// DAC DRC Compressor Threshold High Setting Register
                pub const AC_DAC_DRC_HCT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203013c));

                /// DAC DRC Compressor Slope High Setting Register
                pub const AC_DAC_DRC_LCT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030140));

                /// DAC DRC Compressor Slope High Setting Register
                pub const AC_DAC_DRC_HKC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030144));

                /// DAC DRC Compressor Slope Low Setting Register
                pub const AC_DAC_DRC_LKC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030148));

                /// DAC DRC Compressor High Output at Compressor Threshold Register
                pub const AC_DAC_DRC_HOPC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203014c));

                /// DAC DRC Compressor Low Output at Compressor Threshold Register
                pub const AC_DAC_DRC_LOPC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030150));

                /// DAC DRC Limiter Threshold High Setting Register
                pub const AC_DAC_DRC_HLT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030154));

                /// DAC DRC Limiter Threshold Low Setting Register
                pub const AC_DAC_DRC_LLT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030158));

                /// DAC DRC Limiter Slope High Setting Register
                pub const AC_DAC_DRC_HKl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203015c));

                /// DAC DRC Limiter Slope Low Setting Register
                pub const AC_DAC_DRC_LKl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030160));

                /// DAC DRC Limiter High Output at Limiter Threshold
                pub const AC_DAC_DRC_HOPL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030164));

                /// DAC DRC Limiter Low Output at Limiter Threshold
                pub const AC_DAC_DRC_LOPL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030168));

                /// DAC DRC Expander Threshold High Setting Register
                pub const AC_DAC_DRC_HET = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203016c));

                /// DAC DRC Expander Threshold Low Setting Register
                pub const AC_DAC_DRC_LET = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030170));

                /// DAC DRC Expander Slope High Setting Register
                pub const AC_DAC_DRC_HKE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030174));

                /// DAC DRC Expander Slope Low Setting Register
                pub const AC_DAC_DRC_LKE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030178));

                /// DAC DRC Expander High Output at Expander Threshold
                pub const AC_DAC_DRC_HOPE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203017c));

                /// DAC DRC Expander Low Output at Expander Threshold
                pub const AC_DAC_DRC_LOPE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030180));

                /// DAC DRC Linear Slope High Setting Register
                pub const AC_DAC_DRC_HKN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030184));

                /// DAC DRC Linear Slope Low Setting Register
                pub const AC_DAC_DRC_LKN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030188));

                /// DAC DRC Smooth filter Gain High Attack Time Coef Register
                pub const AC_DAC_DRC_SFHAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203018c));

                /// DAC DRC Smooth filter Gain Low Attack Time Coef Register
                pub const AC_DAC_DRC_SFLAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030190));

                /// DAC DRC Smooth filter Gain High Release Time Coef Register
                pub const AC_DAC_DRC_SFHRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030194));

                /// DAC DRC Smooth filter Gain Low Release Time Coef Register
                pub const AC_DAC_DRC_SFLRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030198));

                /// DAC DRC MAX Gain High Setting Register
                pub const AC_DAC_DRC_MXGHS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203019c));

                /// DAC DRC MAX Gain Low Setting Register
                pub const AC_DAC_DRC_MXGLS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20301a0));

                /// DAC DRC MIN Gain High Setting Register
                pub const AC_DAC_DRC_MNGHS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20301a4));

                /// DAC DRC MIN Gain Low Setting Register
                pub const AC_DAC_DRC_MNGLS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20301a8));

                /// DAC DRC Expander Smooth Time High Coef Register
                pub const AC_DAC_DRC_EPSHC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20301ac));

                /// DAC DRC Expander Smooth Time Low Coef Register
                pub const AC_DAC_DRC_EPSLC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20301b0));

                /// DAC DRC HPF Gain High Coef Register
                pub const AC_DAC_DRC_HPFHGAIN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20301b8));

                /// DAC DRC HPF Gain Low Coef Register
                pub const AC_DAC_DRC_HPFLGAIN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20301bc));

                /// ADC DRC High HPF Coef Register
                pub const AC_ADC_DRC_HHPFC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030200));

                /// ADC DRC Low HPF Coef Register
                pub const AC_ADC_DRC_LHPFC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030204));

                /// ADC DRC Control Register
                pub const AC_ADC_DRC_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030208));

                /// ADC DRC Left Peak Filter High Attack Time Coef Register
                pub const AC_ADC_DRC_LPFHAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203020c));

                /// ADC DRC Left Peak Filter Low Attack Time Coef Register
                pub const AC_ADC_DRC_LPFLAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030210));

                /// ADC DRC Right Peak Filter High Attack Time Coef Register
                pub const AC_ADC_DRC_RPFHAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030214));

                /// ADC DRC Right Peak Filter Low Attack Time Coef Register
                pub const AC_ADC_DRC_RPFLAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030218));

                /// ADC DRC Left Peak Filter High Release Time Coef Register
                pub const AC_ADC_DRC_LPFHRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203021c));

                /// ADC DRC Left Peak Filter Low Release Time Coef Register
                pub const AC_ADC_DRC_LPFLRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030220));

                /// ADC DRC Right Peak Filter High Release Time Coef Register
                pub const AC_ADC_DRC_RPFHRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030224));

                /// ADC DRC Right Peak Filter Low Release Time Coef Register
                pub const AC_ADC_DRC_RPFLRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030228));

                /// ADC DRC Left RMS Filter High Coef Register
                pub const AC_ADC_DRC_LRMSHAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203022c));

                /// ADC DRC Left RMS Filter Low Coef Register
                pub const AC_ADC_DRC_LRMSLAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030230));

                /// ADC DRC Right RMS Filter High Coef Register
                pub const AC_ADC_DRC_RRMSHAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030234));

                /// ADC DRC Right RMS Filter Low Coef Register
                pub const AC_ADC_DRC_RRMSLAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030238));

                /// ADC DRC Compressor Threshold High Setting Register
                pub const AC_ADC_DRC_HCT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203023c));

                /// ADC DRC Compressor Slope High Setting Register
                pub const AC_ADC_DRC_LCT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030240));

                /// ADC DRC Compressor Slope High Setting Register
                pub const AC_ADC_DRC_HKC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030244));

                /// ADC DRC Compressor Slope Low Setting Register
                pub const AC_ADC_DRC_LKC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030248));

                /// ADC DRC Compressor High Output at Compressor Threshold Register
                pub const AC_ADC_DRC_HOPC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203024c));

                /// ADC DRC Compressor Low Output at Compressor Threshold Register
                pub const AC_ADC_DRC_LOPC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030250));

                /// ADC DRC Limiter Threshold High Setting Register
                pub const AC_ADC_DRC_HLT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030254));

                /// ADC DRC Limiter Threshold Low Setting Register
                pub const AC_ADC_DRC_LLT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030258));

                /// ADC DRC Limiter Slope High Setting Register
                pub const AC_ADC_DRC_HKl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203025c));

                /// ADC DRC Limiter Slope Low Setting Register
                pub const AC_ADC_DRC_LKl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030260));

                /// ADC DRC Limiter High Output at Limiter Threshold
                pub const AC_ADC_DRC_HOPL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030264));

                /// ADC DRC Limiter Low Output at Limiter Threshold
                pub const AC_ADC_DRC_LOPL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030268));

                /// ADC DRC Expander Threshold High Setting Register
                pub const AC_ADC_DRC_HET = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203026c));

                /// ADC DRC Expander Threshold Low Setting Register
                pub const AC_ADC_DRC_LET = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030270));

                /// ADC DRC Expander Slope High Setting Register
                pub const AC_ADC_DRC_HKE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030274));

                /// ADC DRC Expander Slope Low Setting Register
                pub const AC_ADC_DRC_LKE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030278));

                /// ADC DRC Expander High Output at Expander Threshold
                pub const AC_ADC_DRC_HOPE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203027c));

                /// ADC DRC Expander Low Output at Expander Threshold
                pub const AC_ADC_DRC_LOPE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030280));

                /// ADC DRC Linear Slope High Setting Register
                pub const AC_ADC_DRC_HKN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030284));

                /// ADC DRC Linear Slope Low Setting Register
                pub const AC_ADC_DRC_LKN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030288));

                /// ADC DRC Smooth filter Gain High Attack Time Coef Register
                pub const AC_ADC_DRC_SFHAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203028c));

                /// ADC DRC Smooth filter Gain Low Attack Time Coef Register
                pub const AC_ADC_DRC_SFLAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030290));

                /// ADC DRC Smooth filter Gain High Release Time Coef Register
                pub const AC_ADC_DRC_SFHRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030294));

                /// ADC DRC Smooth filter Gain Low Release Time Coef Register
                pub const AC_ADC_DRC_SFLRT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030298));

                /// ADC DRC MAX Gain High Setting Register
                pub const AC_ADC_DRC_MXGHS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203029c));

                /// ADC DRC MAX Gain Low Setting Register
                pub const AC_ADC_DRC_MXGLS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20302a0));

                /// ADC DRC MIN Gain High Setting Register
                pub const AC_ADC_DRC_MNGHS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20302a4));

                /// ADC DRC MIN Gain Low Setting Register
                pub const AC_ADC_DRC_MNGLS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20302a8));

                /// ADC DRC Expander Smooth Time High Coef Register
                pub const AC_ADC_DRC_EPSHC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20302ac));

                /// ADC DRC Expander Smooth Time Low Coef Register
                pub const AC_ADC_DRC_EPSLC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20302b0));

                /// ADC DRC HPF Gain High Coef Register
                pub const AC_ADC_DRC_HPFHGAIN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20302b8));

                /// ADC DRC HPF Gain Low Coef Register
                pub const AC_ADC_DRC_HPFLGAIN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20302bc));

                /// ADC1 Analog Control Register
                pub const ADC1_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030300));

                /// ADC2 Analog Control Register
                pub const ADC2_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030304));

                /// ADC3 Analog Control Register
                pub const ADC3_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030308));

                /// DAC Analog Control Register
                pub const DAC_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030310));

                /// MICBIAS Analog Control Register
                pub const MICBIAS_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030318));

                /// BIAS Analog Control Register
                pub const RAMP_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x203031c));

                /// BIAS Analog Control Register
                pub const BIAS_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030320));

                /// ADC5 Analog Control Register
                pub const ADC5_REG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2030330));
            };

            /// Two Wire Interface
            pub const TWI0 = struct {
                /// TWI Slave Address Register
                pub const TWI_ADDR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    GCE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:7] Slave Address
                    SLA: u7 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502000));

                /// TWI Extended Slave Address Register
                pub const TWI_XADDR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Extend Slave Address\n\nSLAX[7:0]
                    SLAX: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502004));

                /// TWI Data Byte Register
                pub const TWI_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Data byte transmitted or received
                    data: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502008));

                /// TWI Control Register
                pub const TWI_CNTR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    clk_count_mode: enum(u1) {
                        /// scl clock high period count on oscl
                        oscl = 0,

                        /// scl clock high period count on iscl
                        iscl = 1,
                    } = .oscl,

                    /// [1:1]
                    res0: u1 = 0,

                    /// [2:2] Assert Acknowledge
                    a_ack: u1 = 0,

                    /// [3:3] Interrupt Flag
                    int_flag: u1 = 0,

                    /// [4:4] Master Mode Stop
                    m_stp: u1 = 0,

                    /// [5:5] Master Mode Start
                    m_sta: u1 = 0,

                    /// [6:6] TWI Bus Enable
                    bus_en: enum(u1) {
                        ///
                        ignored = 0,

                        ///
                        respond = 1,
                    } = .ignored,

                    /// [7:7] Interrupt Enable
                    int_en: enum(u1) {
                        /// The interrupt line always low
                        low = 0,

                        /// The interrupt line will go high when INT_FLAG is set
                        high = 1,
                    } = .low,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x250200c));

                /// TWI Status Register
                pub const TWI_STAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    sta: enum(u8) {
                        /// Bus error
                        be = 0x00,

                        /// START condition transmitted
                        sct = 0x08,

                        /// Repeated START condition transmitted
                        rsct = 0x10,

                        /// Address + Write bit transmitted, ACK received
                        awbt_ar = 0x18,

                        /// Address + Write bit transmitted, ACK not received
                        awbt_anr = 0x20,

                        /// Data byte transmitted in master mode, ACK received
                        dbtm_ar = 0x28,

                        /// Data byte transmitted in master mode, ACK not received
                        dbtm_anr = 0x30,

                        /// Arbitration lost in address or data byte
                        al_a_db = 0x38,

                        /// Address + Read bit transmitted, ACK received
                        arbt_ar = 0x40,

                        /// Address + Read bit transmitted, ACK not received
                        arbt_anr = 0x48,

                        /// Data byte received in master mode, ACK transmitted
                        dbrm_at = 0x50,

                        /// Data byte received in master mode, not ACK transmitted
                        dbrm_ant = 0x58,

                        /// Slave address + Write bit received, ACK transmitted
                        sawr_at = 0x60,

                        /// Arbitration lost in the address as master, slave address + Write bit received, ACK transmitted
                        al_am_sawr_at = 0x68,

                        /// General Call address received, ACK transmitted
                        gcar_at = 0x70,

                        /// Arbitration lost in the address as master, General Call address received, ACK transmitted
                        al_am_gcar_at = 0x78,

                        /// Data byte received after slave address received, ACK transmitted
                        dbr_sar_at = 0x80,

                        /// Data byte received after slave address received, not ACK transmitted
                        dbr_sar_ant = 0x88,

                        /// Data byte received after General Call received, ACK transmitted
                        dbr_gcr_at = 0x90,

                        /// Data byte received after General Call received, not ACK transmitted
                        dbr_gcr_ant = 0x98,

                        /// STOP or repeated START condition received in slave mode
                        srscrs = 0xA0,

                        /// Slave address + Read bit received, ACK transmitted
                        sarr_at = 0xA8,

                        /// Arbitration lost in the address as master, slave address + Read bit received, ACK transmitted
                        al_am_sarr_at = 0xB0,

                        /// Data byte transmitted in slave mode, ACK received
                        dbts_ar = 0xB8,

                        /// Data byte transmitted in slave mode, ACK not received
                        dbts_anr = 0xC0,

                        /// The Last byte transmitted in slave mode, ACK received
                        lbts_ar = 0xC8,

                        /// Second Address byte + Write bit transmitted, ACK received
                        sawt_ar = 0xD0,

                        /// Second Address byte + Write bit transmitted, ACK not received
                        sawt_anr = 0xD8,

                        /// No relevant status information, INT_FLAG=0
                        nrsi = 0xF8,
                    } = .be,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502010));

                /// TWI Clock Control Register
                pub const TWI_CCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:2]
                    clk_n: u3 = 0,

                    /// [3:6]
                    clk_m: u4 = 0,

                    /// [7:7] Setting duty cycle of clock as master
                    clk_duty: enum(u1) {
                        /// 50%
                        P50 = 0,

                        /// 40%
                        P40 = 1,
                    } = .P50,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502014));

                /// TWI Software Reset Register
                pub const TWI_SRST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Soft Reset
                    soft_rst: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x2502018));

                /// TWI Enhance Feature Register
                pub const TWI_EFR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Data Byte Number Follow Read Command Control
                    dbn: enum(u2) {
                        /// No data byte can be written after the read command
                        B0 = 0b00,

                        /// 1-byte data can be written after the read command
                        B1 = 0b01,

                        /// 2-byte data can be written after the read command
                        B2 = 0b10,

                        /// 3-byte data can be written after the read command
                        B3 = 0b11,
                    } = .B0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x250201c));

                /// TWI Line Control Register
                pub const TWI_LCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] TWI_SDA Line State Control Enable
                    sda_ctl_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] TWI_SDA Line State Control Bit
                    sda_ctl: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [2:2] TWI_SCL Line State Control Enable
                    scl_ctl_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] TWI_SCL Line State Control Bit
                    scl_ctl: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [4:4] Current State of TWI_SDA
                    sda_state: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [5:5] Current State of TWI_SCL
                    scl_state: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [6:31]
                    res0: u26 = 0,
                }), @ptrFromInt(0x2502020));

                /// TWI_DRV Control Register
                pub const TWI_DRV_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    twi_drv_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] Software reset
                    soft_reset: enum(u1) {
                        ///
                        normal = 0,

                        ///
                        reset = 1,
                    } = .normal,

                    /// [2:7]
                    res0: u6 = 0,

                    /// [8:15] Timeout number
                    timeout_n: u8 = 0,

                    /// [16:23] TWI status
                    twi_sta: enum(u8) {
                        /// bus error
                        be = 0x00,

                        /// START condition transmitted
                        sct = 0x08,

                        /// Repeated START condition transmitted
                        rsct = 0x10,

                        /// Address + Write bit transmitted, ACK received
                        awbt_ar = 0x18,

                        /// Address + Write bit transmitted, ACK not received
                        awbt_anr = 0x20,

                        /// Data byte transmitted in master mode, ACK received
                        dbtm_ar = 0x28,

                        /// Data byte transmitted in master mode, ACK not received
                        dbtm_anr = 0x30,

                        /// Arbitration lost in address or data byte
                        al_a_db = 0x38,

                        /// Address + Read bit transmitted, ACK received
                        arbt_ar = 0x40,

                        /// Address + Read bit transmitted, ACK not received
                        arbt_anr = 0x48,

                        /// Data byte received in master mode, ACK received
                        dbrm_ar = 0x50,

                        /// Data byte received in master mode, ACK not received
                        dbrm_anr = 0x58,

                        /// Timeout when sending the 9th SCL clock
                        t_s9sc = 0x01,
                    } = .be,

                    /// [24:27] Transition result
                    tran_result: enum(u4) {
                        ///
                        ok = 0,

                        ///
                        fail = 1,
                    } = .ok,

                    /// [28:28] Read transition mode
                    read_tran_mode: enum(u1) {
                        ///
                        send = 0,

                        ///
                        not_send = 1,
                    } = .send,

                    /// [29:29] Restart mode
                    restart_mode: enum(u1) {
                        ///
                        restart = 0,

                        ///
                        stop_restart = 1,
                    } = .restart,

                    /// [30:30]
                    res1: u1 = 0,

                    /// [31:31] Start transmission
                    start_tran: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        start = 1,
                    } = .idle,
                }), @ptrFromInt(0x2502200));

                /// TWI_DRV Transmission Configuration Register
                pub const TWI_DRV_CFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    packet_cnt: u16 = 0,

                    /// [16:31]
                    pkt_interval: u16 = 0,
                }), @ptrFromInt(0x2502204));

                /// TWI_DRV Slave ID Register
                pub const TWI_DRV_SLV = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] SLAX[7:0]
                    slv_id_x: u8 = 0,

                    /// [8:8] R/W operation to slave device
                    cmd: enum(u1) {
                        ///
                        write = 0,

                        ///
                        read = 1,
                    } = .write,

                    /// [9:15] Slave device ID
                    slv_id: u7 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2502208));

                /// TWI_DRV Packet Format Register
                pub const TWI_DRV_FMT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    data_byte: u16 = 0,

                    /// [16:23]
                    addr_byte: u8 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x250220c));

                /// TWI_DRV Bus Control Register
                pub const TWI_DRV_BUS_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] SDA manual output enable
                    sda_moe: u1 = 0,

                    /// [1:1] SCL manual output enable
                    scl_moe: u1 = 0,

                    /// [2:2] SDA manual output value
                    sda_mov: u1 = 0,

                    /// [3:3] SCL manual output value
                    scl_mov: u1 = 0,

                    /// [4:5]
                    res0: u2 = 0,

                    /// [6:6] SDA current status
                    sda_sta: u1 = 0,

                    /// [7:7] SCL current status
                    scl_sta: u1 = 0,

                    /// [8:11]
                    clk_m: u4 = 0,

                    /// [12:14]
                    clk_n: u3 = 0,

                    /// [15:15] Setting duty cycle of clock as master
                    clk_duty: enum(u1) {
                        /// 50%
                        P50 = 0,

                        /// 40%
                        P40 = 1,
                    } = .P50,

                    /// [16:16]
                    clk_count_mode: enum(u1) {
                        /// scl clock high period count on oscl
                        oscl = 0,

                        /// scl clock high period count on iscl
                        iscl = 1,
                    } = .oscl,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2502210));

                /// TWI_DRV Interrupt Control Register
                pub const TWI_DRV_INT_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    tran_com_pd: u1 = 0,

                    /// [1:1]
                    tran_err_pd: u1 = 0,

                    /// [2:2]
                    tx_req_pd: u1 = 0,

                    /// [3:3]
                    rx_req_pd: u1 = 0,

                    /// [4:15]
                    res0: u12 = 0,

                    /// [16:16]
                    tran_com_int_en: u1 = 0,

                    /// [17:17]
                    tran_err_int_en: u1 = 0,

                    /// [18:18]
                    tx_req_int_en: u1 = 0,

                    /// [19:19]
                    rx_req_int_en: u1 = 0,

                    /// [20:31]
                    res1: u12 = 0,
                }), @ptrFromInt(0x2502214));

                /// TWI_DRV DMA Configure Register
                pub const TWI_DRV_DMA_CFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5]
                    tx_trig: u6 = 0,

                    /// [6:7]
                    res0: u2 = 0,

                    /// [8:8]
                    dma_tx_en: u1 = 0,

                    /// [9:15]
                    res1: u7 = 0,

                    /// [16:21]
                    rx_trig: u6 = 0,

                    /// [22:22]
                    res2: u1 = 0,

                    /// [23:24]
                    dma_rx_en: u2 = 0,

                    /// [25:31]
                    res3: u7 = 0,
                }), @ptrFromInt(0x2502218));

                /// TWI_DRV FIFO Content Register
                pub const TWI_DRV_FIFO_CON = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5]
                    send_fifo_content: u6 = 0,

                    /// [6:6]
                    send_fifo_clear: u1 = 0,

                    /// [7:15]
                    res0: u9 = 0,

                    /// [16:21]
                    recv_fifo_content: u6 = 0,

                    /// [22:22]
                    recv_fifo_clear: u1 = 0,

                    /// [23:31]
                    res1: u9 = 0,
                }), @ptrFromInt(0x250221c));

                /// TWI_DRV Send Data FIFO Access Register
                pub const TWI_DRV_SEND_FIFO_ACC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    send_data_fifo: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502300));

                /// TWI_DRV Receive Data FIFO Access Register
                pub const TWI_DRV_RECV_FIFO_ACC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    recv_data_fifo: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502304));
            };

            /// Two Wire Interface
            pub const TWI1 = struct {
                /// TWI Slave Address Register
                pub const TWI_ADDR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    GCE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:7] Slave Address
                    SLA: u7 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502400));

                /// TWI Extended Slave Address Register
                pub const TWI_XADDR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Extend Slave Address\n\nSLAX[7:0]
                    SLAX: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502404));

                /// TWI Data Byte Register
                pub const TWI_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Data byte transmitted or received
                    data: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502408));

                /// TWI Control Register
                pub const TWI_CNTR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    clk_count_mode: enum(u1) {
                        /// scl clock high period count on oscl
                        oscl = 0,

                        /// scl clock high period count on iscl
                        iscl = 1,
                    } = .oscl,

                    /// [1:1]
                    res0: u1 = 0,

                    /// [2:2] Assert Acknowledge
                    a_ack: u1 = 0,

                    /// [3:3] Interrupt Flag
                    int_flag: u1 = 0,

                    /// [4:4] Master Mode Stop
                    m_stp: u1 = 0,

                    /// [5:5] Master Mode Start
                    m_sta: u1 = 0,

                    /// [6:6] TWI Bus Enable
                    bus_en: enum(u1) {
                        ///
                        ignored = 0,

                        ///
                        respond = 1,
                    } = .ignored,

                    /// [7:7] Interrupt Enable
                    int_en: enum(u1) {
                        /// The interrupt line always low
                        low = 0,

                        /// The interrupt line will go high when INT_FLAG is set
                        high = 1,
                    } = .low,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x250240c));

                /// TWI Status Register
                pub const TWI_STAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    sta: enum(u8) {
                        /// Bus error
                        be = 0x00,

                        /// START condition transmitted
                        sct = 0x08,

                        /// Repeated START condition transmitted
                        rsct = 0x10,

                        /// Address + Write bit transmitted, ACK received
                        awbt_ar = 0x18,

                        /// Address + Write bit transmitted, ACK not received
                        awbt_anr = 0x20,

                        /// Data byte transmitted in master mode, ACK received
                        dbtm_ar = 0x28,

                        /// Data byte transmitted in master mode, ACK not received
                        dbtm_anr = 0x30,

                        /// Arbitration lost in address or data byte
                        al_a_db = 0x38,

                        /// Address + Read bit transmitted, ACK received
                        arbt_ar = 0x40,

                        /// Address + Read bit transmitted, ACK not received
                        arbt_anr = 0x48,

                        /// Data byte received in master mode, ACK transmitted
                        dbrm_at = 0x50,

                        /// Data byte received in master mode, not ACK transmitted
                        dbrm_ant = 0x58,

                        /// Slave address + Write bit received, ACK transmitted
                        sawr_at = 0x60,

                        /// Arbitration lost in the address as master, slave address + Write bit received, ACK transmitted
                        al_am_sawr_at = 0x68,

                        /// General Call address received, ACK transmitted
                        gcar_at = 0x70,

                        /// Arbitration lost in the address as master, General Call address received, ACK transmitted
                        al_am_gcar_at = 0x78,

                        /// Data byte received after slave address received, ACK transmitted
                        dbr_sar_at = 0x80,

                        /// Data byte received after slave address received, not ACK transmitted
                        dbr_sar_ant = 0x88,

                        /// Data byte received after General Call received, ACK transmitted
                        dbr_gcr_at = 0x90,

                        /// Data byte received after General Call received, not ACK transmitted
                        dbr_gcr_ant = 0x98,

                        /// STOP or repeated START condition received in slave mode
                        srscrs = 0xA0,

                        /// Slave address + Read bit received, ACK transmitted
                        sarr_at = 0xA8,

                        /// Arbitration lost in the address as master, slave address + Read bit received, ACK transmitted
                        al_am_sarr_at = 0xB0,

                        /// Data byte transmitted in slave mode, ACK received
                        dbts_ar = 0xB8,

                        /// Data byte transmitted in slave mode, ACK not received
                        dbts_anr = 0xC0,

                        /// The Last byte transmitted in slave mode, ACK received
                        lbts_ar = 0xC8,

                        /// Second Address byte + Write bit transmitted, ACK received
                        sawt_ar = 0xD0,

                        /// Second Address byte + Write bit transmitted, ACK not received
                        sawt_anr = 0xD8,

                        /// No relevant status information, INT_FLAG=0
                        nrsi = 0xF8,
                    } = .be,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502410));

                /// TWI Clock Control Register
                pub const TWI_CCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:2]
                    clk_n: u3 = 0,

                    /// [3:6]
                    clk_m: u4 = 0,

                    /// [7:7] Setting duty cycle of clock as master
                    clk_duty: enum(u1) {
                        /// 50%
                        P50 = 0,

                        /// 40%
                        P40 = 1,
                    } = .P50,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502414));

                /// TWI Software Reset Register
                pub const TWI_SRST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Soft Reset
                    soft_rst: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x2502418));

                /// TWI Enhance Feature Register
                pub const TWI_EFR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Data Byte Number Follow Read Command Control
                    dbn: enum(u2) {
                        /// No data byte can be written after the read command
                        B0 = 0b00,

                        /// 1-byte data can be written after the read command
                        B1 = 0b01,

                        /// 2-byte data can be written after the read command
                        B2 = 0b10,

                        /// 3-byte data can be written after the read command
                        B3 = 0b11,
                    } = .B0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x250241c));

                /// TWI Line Control Register
                pub const TWI_LCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] TWI_SDA Line State Control Enable
                    sda_ctl_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] TWI_SDA Line State Control Bit
                    sda_ctl: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [2:2] TWI_SCL Line State Control Enable
                    scl_ctl_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] TWI_SCL Line State Control Bit
                    scl_ctl: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [4:4] Current State of TWI_SDA
                    sda_state: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [5:5] Current State of TWI_SCL
                    scl_state: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [6:31]
                    res0: u26 = 0,
                }), @ptrFromInt(0x2502420));

                /// TWI_DRV Control Register
                pub const TWI_DRV_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    twi_drv_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] Software reset
                    soft_reset: enum(u1) {
                        ///
                        normal = 0,

                        ///
                        reset = 1,
                    } = .normal,

                    /// [2:7]
                    res0: u6 = 0,

                    /// [8:15] Timeout number
                    timeout_n: u8 = 0,

                    /// [16:23] TWI status
                    twi_sta: enum(u8) {
                        /// bus error
                        be = 0x00,

                        /// START condition transmitted
                        sct = 0x08,

                        /// Repeated START condition transmitted
                        rsct = 0x10,

                        /// Address + Write bit transmitted, ACK received
                        awbt_ar = 0x18,

                        /// Address + Write bit transmitted, ACK not received
                        awbt_anr = 0x20,

                        /// Data byte transmitted in master mode, ACK received
                        dbtm_ar = 0x28,

                        /// Data byte transmitted in master mode, ACK not received
                        dbtm_anr = 0x30,

                        /// Arbitration lost in address or data byte
                        al_a_db = 0x38,

                        /// Address + Read bit transmitted, ACK received
                        arbt_ar = 0x40,

                        /// Address + Read bit transmitted, ACK not received
                        arbt_anr = 0x48,

                        /// Data byte received in master mode, ACK received
                        dbrm_ar = 0x50,

                        /// Data byte received in master mode, ACK not received
                        dbrm_anr = 0x58,

                        /// Timeout when sending the 9th SCL clock
                        t_s9sc = 0x01,
                    } = .be,

                    /// [24:27] Transition result
                    tran_result: enum(u4) {
                        ///
                        ok = 0,

                        ///
                        fail = 1,
                    } = .ok,

                    /// [28:28] Read transition mode
                    read_tran_mode: enum(u1) {
                        ///
                        send = 0,

                        ///
                        not_send = 1,
                    } = .send,

                    /// [29:29] Restart mode
                    restart_mode: enum(u1) {
                        ///
                        restart = 0,

                        ///
                        stop_restart = 1,
                    } = .restart,

                    /// [30:30]
                    res1: u1 = 0,

                    /// [31:31] Start transmission
                    start_tran: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        start = 1,
                    } = .idle,
                }), @ptrFromInt(0x2502600));

                /// TWI_DRV Transmission Configuration Register
                pub const TWI_DRV_CFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    packet_cnt: u16 = 0,

                    /// [16:31]
                    pkt_interval: u16 = 0,
                }), @ptrFromInt(0x2502604));

                /// TWI_DRV Slave ID Register
                pub const TWI_DRV_SLV = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] SLAX[7:0]
                    slv_id_x: u8 = 0,

                    /// [8:8] R/W operation to slave device
                    cmd: enum(u1) {
                        ///
                        write = 0,

                        ///
                        read = 1,
                    } = .write,

                    /// [9:15] Slave device ID
                    slv_id: u7 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2502608));

                /// TWI_DRV Packet Format Register
                pub const TWI_DRV_FMT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    data_byte: u16 = 0,

                    /// [16:23]
                    addr_byte: u8 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x250260c));

                /// TWI_DRV Bus Control Register
                pub const TWI_DRV_BUS_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] SDA manual output enable
                    sda_moe: u1 = 0,

                    /// [1:1] SCL manual output enable
                    scl_moe: u1 = 0,

                    /// [2:2] SDA manual output value
                    sda_mov: u1 = 0,

                    /// [3:3] SCL manual output value
                    scl_mov: u1 = 0,

                    /// [4:5]
                    res0: u2 = 0,

                    /// [6:6] SDA current status
                    sda_sta: u1 = 0,

                    /// [7:7] SCL current status
                    scl_sta: u1 = 0,

                    /// [8:11]
                    clk_m: u4 = 0,

                    /// [12:14]
                    clk_n: u3 = 0,

                    /// [15:15] Setting duty cycle of clock as master
                    clk_duty: enum(u1) {
                        /// 50%
                        P50 = 0,

                        /// 40%
                        P40 = 1,
                    } = .P50,

                    /// [16:16]
                    clk_count_mode: enum(u1) {
                        /// scl clock high period count on oscl
                        oscl = 0,

                        /// scl clock high period count on iscl
                        iscl = 1,
                    } = .oscl,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2502610));

                /// TWI_DRV Interrupt Control Register
                pub const TWI_DRV_INT_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    tran_com_pd: u1 = 0,

                    /// [1:1]
                    tran_err_pd: u1 = 0,

                    /// [2:2]
                    tx_req_pd: u1 = 0,

                    /// [3:3]
                    rx_req_pd: u1 = 0,

                    /// [4:15]
                    res0: u12 = 0,

                    /// [16:16]
                    tran_com_int_en: u1 = 0,

                    /// [17:17]
                    tran_err_int_en: u1 = 0,

                    /// [18:18]
                    tx_req_int_en: u1 = 0,

                    /// [19:19]
                    rx_req_int_en: u1 = 0,

                    /// [20:31]
                    res1: u12 = 0,
                }), @ptrFromInt(0x2502614));

                /// TWI_DRV DMA Configure Register
                pub const TWI_DRV_DMA_CFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5]
                    tx_trig: u6 = 0,

                    /// [6:7]
                    res0: u2 = 0,

                    /// [8:8]
                    dma_tx_en: u1 = 0,

                    /// [9:15]
                    res1: u7 = 0,

                    /// [16:21]
                    rx_trig: u6 = 0,

                    /// [22:22]
                    res2: u1 = 0,

                    /// [23:24]
                    dma_rx_en: u2 = 0,

                    /// [25:31]
                    res3: u7 = 0,
                }), @ptrFromInt(0x2502618));

                /// TWI_DRV FIFO Content Register
                pub const TWI_DRV_FIFO_CON = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5]
                    send_fifo_content: u6 = 0,

                    /// [6:6]
                    send_fifo_clear: u1 = 0,

                    /// [7:15]
                    res0: u9 = 0,

                    /// [16:21]
                    recv_fifo_content: u6 = 0,

                    /// [22:22]
                    recv_fifo_clear: u1 = 0,

                    /// [23:31]
                    res1: u9 = 0,
                }), @ptrFromInt(0x250261c));

                /// TWI_DRV Send Data FIFO Access Register
                pub const TWI_DRV_SEND_FIFO_ACC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    send_data_fifo: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502700));

                /// TWI_DRV Receive Data FIFO Access Register
                pub const TWI_DRV_RECV_FIFO_ACC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    recv_data_fifo: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502704));
            };

            /// Two Wire Interface
            pub const TWI2 = struct {
                /// TWI Slave Address Register
                pub const TWI_ADDR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    GCE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:7] Slave Address
                    SLA: u7 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502800));

                /// TWI Extended Slave Address Register
                pub const TWI_XADDR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Extend Slave Address\n\nSLAX[7:0]
                    SLAX: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502804));

                /// TWI Data Byte Register
                pub const TWI_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Data byte transmitted or received
                    data: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502808));

                /// TWI Control Register
                pub const TWI_CNTR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    clk_count_mode: enum(u1) {
                        /// scl clock high period count on oscl
                        oscl = 0,

                        /// scl clock high period count on iscl
                        iscl = 1,
                    } = .oscl,

                    /// [1:1]
                    res0: u1 = 0,

                    /// [2:2] Assert Acknowledge
                    a_ack: u1 = 0,

                    /// [3:3] Interrupt Flag
                    int_flag: u1 = 0,

                    /// [4:4] Master Mode Stop
                    m_stp: u1 = 0,

                    /// [5:5] Master Mode Start
                    m_sta: u1 = 0,

                    /// [6:6] TWI Bus Enable
                    bus_en: enum(u1) {
                        ///
                        ignored = 0,

                        ///
                        respond = 1,
                    } = .ignored,

                    /// [7:7] Interrupt Enable
                    int_en: enum(u1) {
                        /// The interrupt line always low
                        low = 0,

                        /// The interrupt line will go high when INT_FLAG is set
                        high = 1,
                    } = .low,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x250280c));

                /// TWI Status Register
                pub const TWI_STAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    sta: enum(u8) {
                        /// Bus error
                        be = 0x00,

                        /// START condition transmitted
                        sct = 0x08,

                        /// Repeated START condition transmitted
                        rsct = 0x10,

                        /// Address + Write bit transmitted, ACK received
                        awbt_ar = 0x18,

                        /// Address + Write bit transmitted, ACK not received
                        awbt_anr = 0x20,

                        /// Data byte transmitted in master mode, ACK received
                        dbtm_ar = 0x28,

                        /// Data byte transmitted in master mode, ACK not received
                        dbtm_anr = 0x30,

                        /// Arbitration lost in address or data byte
                        al_a_db = 0x38,

                        /// Address + Read bit transmitted, ACK received
                        arbt_ar = 0x40,

                        /// Address + Read bit transmitted, ACK not received
                        arbt_anr = 0x48,

                        /// Data byte received in master mode, ACK transmitted
                        dbrm_at = 0x50,

                        /// Data byte received in master mode, not ACK transmitted
                        dbrm_ant = 0x58,

                        /// Slave address + Write bit received, ACK transmitted
                        sawr_at = 0x60,

                        /// Arbitration lost in the address as master, slave address + Write bit received, ACK transmitted
                        al_am_sawr_at = 0x68,

                        /// General Call address received, ACK transmitted
                        gcar_at = 0x70,

                        /// Arbitration lost in the address as master, General Call address received, ACK transmitted
                        al_am_gcar_at = 0x78,

                        /// Data byte received after slave address received, ACK transmitted
                        dbr_sar_at = 0x80,

                        /// Data byte received after slave address received, not ACK transmitted
                        dbr_sar_ant = 0x88,

                        /// Data byte received after General Call received, ACK transmitted
                        dbr_gcr_at = 0x90,

                        /// Data byte received after General Call received, not ACK transmitted
                        dbr_gcr_ant = 0x98,

                        /// STOP or repeated START condition received in slave mode
                        srscrs = 0xA0,

                        /// Slave address + Read bit received, ACK transmitted
                        sarr_at = 0xA8,

                        /// Arbitration lost in the address as master, slave address + Read bit received, ACK transmitted
                        al_am_sarr_at = 0xB0,

                        /// Data byte transmitted in slave mode, ACK received
                        dbts_ar = 0xB8,

                        /// Data byte transmitted in slave mode, ACK not received
                        dbts_anr = 0xC0,

                        /// The Last byte transmitted in slave mode, ACK received
                        lbts_ar = 0xC8,

                        /// Second Address byte + Write bit transmitted, ACK received
                        sawt_ar = 0xD0,

                        /// Second Address byte + Write bit transmitted, ACK not received
                        sawt_anr = 0xD8,

                        /// No relevant status information, INT_FLAG=0
                        nrsi = 0xF8,
                    } = .be,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502810));

                /// TWI Clock Control Register
                pub const TWI_CCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:2]
                    clk_n: u3 = 0,

                    /// [3:6]
                    clk_m: u4 = 0,

                    /// [7:7] Setting duty cycle of clock as master
                    clk_duty: enum(u1) {
                        /// 50%
                        P50 = 0,

                        /// 40%
                        P40 = 1,
                    } = .P50,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502814));

                /// TWI Software Reset Register
                pub const TWI_SRST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Soft Reset
                    soft_rst: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x2502818));

                /// TWI Enhance Feature Register
                pub const TWI_EFR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Data Byte Number Follow Read Command Control
                    dbn: enum(u2) {
                        /// No data byte can be written after the read command
                        B0 = 0b00,

                        /// 1-byte data can be written after the read command
                        B1 = 0b01,

                        /// 2-byte data can be written after the read command
                        B2 = 0b10,

                        /// 3-byte data can be written after the read command
                        B3 = 0b11,
                    } = .B0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x250281c));

                /// TWI Line Control Register
                pub const TWI_LCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] TWI_SDA Line State Control Enable
                    sda_ctl_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] TWI_SDA Line State Control Bit
                    sda_ctl: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [2:2] TWI_SCL Line State Control Enable
                    scl_ctl_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] TWI_SCL Line State Control Bit
                    scl_ctl: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [4:4] Current State of TWI_SDA
                    sda_state: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [5:5] Current State of TWI_SCL
                    scl_state: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [6:31]
                    res0: u26 = 0,
                }), @ptrFromInt(0x2502820));

                /// TWI_DRV Control Register
                pub const TWI_DRV_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    twi_drv_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] Software reset
                    soft_reset: enum(u1) {
                        ///
                        normal = 0,

                        ///
                        reset = 1,
                    } = .normal,

                    /// [2:7]
                    res0: u6 = 0,

                    /// [8:15] Timeout number
                    timeout_n: u8 = 0,

                    /// [16:23] TWI status
                    twi_sta: enum(u8) {
                        /// bus error
                        be = 0x00,

                        /// START condition transmitted
                        sct = 0x08,

                        /// Repeated START condition transmitted
                        rsct = 0x10,

                        /// Address + Write bit transmitted, ACK received
                        awbt_ar = 0x18,

                        /// Address + Write bit transmitted, ACK not received
                        awbt_anr = 0x20,

                        /// Data byte transmitted in master mode, ACK received
                        dbtm_ar = 0x28,

                        /// Data byte transmitted in master mode, ACK not received
                        dbtm_anr = 0x30,

                        /// Arbitration lost in address or data byte
                        al_a_db = 0x38,

                        /// Address + Read bit transmitted, ACK received
                        arbt_ar = 0x40,

                        /// Address + Read bit transmitted, ACK not received
                        arbt_anr = 0x48,

                        /// Data byte received in master mode, ACK received
                        dbrm_ar = 0x50,

                        /// Data byte received in master mode, ACK not received
                        dbrm_anr = 0x58,

                        /// Timeout when sending the 9th SCL clock
                        t_s9sc = 0x01,
                    } = .be,

                    /// [24:27] Transition result
                    tran_result: enum(u4) {
                        ///
                        ok = 0,

                        ///
                        fail = 1,
                    } = .ok,

                    /// [28:28] Read transition mode
                    read_tran_mode: enum(u1) {
                        ///
                        send = 0,

                        ///
                        not_send = 1,
                    } = .send,

                    /// [29:29] Restart mode
                    restart_mode: enum(u1) {
                        ///
                        restart = 0,

                        ///
                        stop_restart = 1,
                    } = .restart,

                    /// [30:30]
                    res1: u1 = 0,

                    /// [31:31] Start transmission
                    start_tran: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        start = 1,
                    } = .idle,
                }), @ptrFromInt(0x2502a00));

                /// TWI_DRV Transmission Configuration Register
                pub const TWI_DRV_CFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    packet_cnt: u16 = 0,

                    /// [16:31]
                    pkt_interval: u16 = 0,
                }), @ptrFromInt(0x2502a04));

                /// TWI_DRV Slave ID Register
                pub const TWI_DRV_SLV = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] SLAX[7:0]
                    slv_id_x: u8 = 0,

                    /// [8:8] R/W operation to slave device
                    cmd: enum(u1) {
                        ///
                        write = 0,

                        ///
                        read = 1,
                    } = .write,

                    /// [9:15] Slave device ID
                    slv_id: u7 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2502a08));

                /// TWI_DRV Packet Format Register
                pub const TWI_DRV_FMT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    data_byte: u16 = 0,

                    /// [16:23]
                    addr_byte: u8 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x2502a0c));

                /// TWI_DRV Bus Control Register
                pub const TWI_DRV_BUS_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] SDA manual output enable
                    sda_moe: u1 = 0,

                    /// [1:1] SCL manual output enable
                    scl_moe: u1 = 0,

                    /// [2:2] SDA manual output value
                    sda_mov: u1 = 0,

                    /// [3:3] SCL manual output value
                    scl_mov: u1 = 0,

                    /// [4:5]
                    res0: u2 = 0,

                    /// [6:6] SDA current status
                    sda_sta: u1 = 0,

                    /// [7:7] SCL current status
                    scl_sta: u1 = 0,

                    /// [8:11]
                    clk_m: u4 = 0,

                    /// [12:14]
                    clk_n: u3 = 0,

                    /// [15:15] Setting duty cycle of clock as master
                    clk_duty: enum(u1) {
                        /// 50%
                        P50 = 0,

                        /// 40%
                        P40 = 1,
                    } = .P50,

                    /// [16:16]
                    clk_count_mode: enum(u1) {
                        /// scl clock high period count on oscl
                        oscl = 0,

                        /// scl clock high period count on iscl
                        iscl = 1,
                    } = .oscl,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2502a10));

                /// TWI_DRV Interrupt Control Register
                pub const TWI_DRV_INT_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    tran_com_pd: u1 = 0,

                    /// [1:1]
                    tran_err_pd: u1 = 0,

                    /// [2:2]
                    tx_req_pd: u1 = 0,

                    /// [3:3]
                    rx_req_pd: u1 = 0,

                    /// [4:15]
                    res0: u12 = 0,

                    /// [16:16]
                    tran_com_int_en: u1 = 0,

                    /// [17:17]
                    tran_err_int_en: u1 = 0,

                    /// [18:18]
                    tx_req_int_en: u1 = 0,

                    /// [19:19]
                    rx_req_int_en: u1 = 0,

                    /// [20:31]
                    res1: u12 = 0,
                }), @ptrFromInt(0x2502a14));

                /// TWI_DRV DMA Configure Register
                pub const TWI_DRV_DMA_CFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5]
                    tx_trig: u6 = 0,

                    /// [6:7]
                    res0: u2 = 0,

                    /// [8:8]
                    dma_tx_en: u1 = 0,

                    /// [9:15]
                    res1: u7 = 0,

                    /// [16:21]
                    rx_trig: u6 = 0,

                    /// [22:22]
                    res2: u1 = 0,

                    /// [23:24]
                    dma_rx_en: u2 = 0,

                    /// [25:31]
                    res3: u7 = 0,
                }), @ptrFromInt(0x2502a18));

                /// TWI_DRV FIFO Content Register
                pub const TWI_DRV_FIFO_CON = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5]
                    send_fifo_content: u6 = 0,

                    /// [6:6]
                    send_fifo_clear: u1 = 0,

                    /// [7:15]
                    res0: u9 = 0,

                    /// [16:21]
                    recv_fifo_content: u6 = 0,

                    /// [22:22]
                    recv_fifo_clear: u1 = 0,

                    /// [23:31]
                    res1: u9 = 0,
                }), @ptrFromInt(0x2502a1c));

                /// TWI_DRV Send Data FIFO Access Register
                pub const TWI_DRV_SEND_FIFO_ACC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    send_data_fifo: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502b00));

                /// TWI_DRV Receive Data FIFO Access Register
                pub const TWI_DRV_RECV_FIFO_ACC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    recv_data_fifo: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502b04));
            };

            /// Two Wire Interface
            pub const TWI3 = struct {
                /// TWI Slave Address Register
                pub const TWI_ADDR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    GCE: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:7] Slave Address
                    SLA: u7 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502c00));

                /// TWI Extended Slave Address Register
                pub const TWI_XADDR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Extend Slave Address\n\nSLAX[7:0]
                    SLAX: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502c04));

                /// TWI Data Byte Register
                pub const TWI_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Data byte transmitted or received
                    data: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502c08));

                /// TWI Control Register
                pub const TWI_CNTR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    clk_count_mode: enum(u1) {
                        /// scl clock high period count on oscl
                        oscl = 0,

                        /// scl clock high period count on iscl
                        iscl = 1,
                    } = .oscl,

                    /// [1:1]
                    res0: u1 = 0,

                    /// [2:2] Assert Acknowledge
                    a_ack: u1 = 0,

                    /// [3:3] Interrupt Flag
                    int_flag: u1 = 0,

                    /// [4:4] Master Mode Stop
                    m_stp: u1 = 0,

                    /// [5:5] Master Mode Start
                    m_sta: u1 = 0,

                    /// [6:6] TWI Bus Enable
                    bus_en: enum(u1) {
                        ///
                        ignored = 0,

                        ///
                        respond = 1,
                    } = .ignored,

                    /// [7:7] Interrupt Enable
                    int_en: enum(u1) {
                        /// The interrupt line always low
                        low = 0,

                        /// The interrupt line will go high when INT_FLAG is set
                        high = 1,
                    } = .low,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2502c0c));

                /// TWI Status Register
                pub const TWI_STAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    sta: enum(u8) {
                        /// Bus error
                        be = 0x00,

                        /// START condition transmitted
                        sct = 0x08,

                        /// Repeated START condition transmitted
                        rsct = 0x10,

                        /// Address + Write bit transmitted, ACK received
                        awbt_ar = 0x18,

                        /// Address + Write bit transmitted, ACK not received
                        awbt_anr = 0x20,

                        /// Data byte transmitted in master mode, ACK received
                        dbtm_ar = 0x28,

                        /// Data byte transmitted in master mode, ACK not received
                        dbtm_anr = 0x30,

                        /// Arbitration lost in address or data byte
                        al_a_db = 0x38,

                        /// Address + Read bit transmitted, ACK received
                        arbt_ar = 0x40,

                        /// Address + Read bit transmitted, ACK not received
                        arbt_anr = 0x48,

                        /// Data byte received in master mode, ACK transmitted
                        dbrm_at = 0x50,

                        /// Data byte received in master mode, not ACK transmitted
                        dbrm_ant = 0x58,

                        /// Slave address + Write bit received, ACK transmitted
                        sawr_at = 0x60,

                        /// Arbitration lost in the address as master, slave address + Write bit received, ACK transmitted
                        al_am_sawr_at = 0x68,

                        /// General Call address received, ACK transmitted
                        gcar_at = 0x70,

                        /// Arbitration lost in the address as master, General Call address received, ACK transmitted
                        al_am_gcar_at = 0x78,

                        /// Data byte received after slave address received, ACK transmitted
                        dbr_sar_at = 0x80,

                        /// Data byte received after slave address received, not ACK transmitted
                        dbr_sar_ant = 0x88,

                        /// Data byte received after General Call received, ACK transmitted
                        dbr_gcr_at = 0x90,

                        /// Data byte received after General Call received, not ACK transmitted
                        dbr_gcr_ant = 0x98,

                        /// STOP or repeated START condition received in slave mode
                        srscrs = 0xA0,

                        /// Slave address + Read bit received, ACK transmitted
                        sarr_at = 0xA8,

                        /// Arbitration lost in the address as master, slave address + Read bit received, ACK transmitted
                        al_am_sarr_at = 0xB0,

                        /// Data byte transmitted in slave mode, ACK received
                        dbts_ar = 0xB8,

                        /// Data byte transmitted in slave mode, ACK not received
                        dbts_anr = 0xC0,

                        /// The Last byte transmitted in slave mode, ACK received
                        lbts_ar = 0xC8,

                        /// Second Address byte + Write bit transmitted, ACK received
                        sawt_ar = 0xD0,

                        /// Second Address byte + Write bit transmitted, ACK not received
                        sawt_anr = 0xD8,

                        /// No relevant status information, INT_FLAG=0
                        nrsi = 0xF8,
                    } = .be,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502c10));

                /// TWI Clock Control Register
                pub const TWI_CCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:2]
                    clk_n: u3 = 0,

                    /// [3:6]
                    clk_m: u4 = 0,

                    /// [7:7] Setting duty cycle of clock as master
                    clk_duty: enum(u1) {
                        /// 50%
                        P50 = 0,

                        /// 40%
                        P40 = 1,
                    } = .P50,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502c14));

                /// TWI Software Reset Register
                pub const TWI_SRST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Soft Reset
                    soft_rst: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x2502c18));

                /// TWI Enhance Feature Register
                pub const TWI_EFR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Data Byte Number Follow Read Command Control
                    dbn: enum(u2) {
                        /// No data byte can be written after the read command
                        B0 = 0b00,

                        /// 1-byte data can be written after the read command
                        B1 = 0b01,

                        /// 2-byte data can be written after the read command
                        B2 = 0b10,

                        /// 3-byte data can be written after the read command
                        B3 = 0b11,
                    } = .B0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2502c1c));

                /// TWI Line Control Register
                pub const TWI_LCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] TWI_SDA Line State Control Enable
                    sda_ctl_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] TWI_SDA Line State Control Bit
                    sda_ctl: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [2:2] TWI_SCL Line State Control Enable
                    scl_ctl_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] TWI_SCL Line State Control Bit
                    scl_ctl: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [4:4] Current State of TWI_SDA
                    sda_state: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [5:5] Current State of TWI_SCL
                    scl_state: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [6:31]
                    res0: u26 = 0,
                }), @ptrFromInt(0x2502c20));

                /// TWI_DRV Control Register
                pub const TWI_DRV_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    twi_drv_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] Software reset
                    soft_reset: enum(u1) {
                        ///
                        normal = 0,

                        ///
                        reset = 1,
                    } = .normal,

                    /// [2:7]
                    res0: u6 = 0,

                    /// [8:15] Timeout number
                    timeout_n: u8 = 0,

                    /// [16:23] TWI status
                    twi_sta: enum(u8) {
                        /// bus error
                        be = 0x00,

                        /// START condition transmitted
                        sct = 0x08,

                        /// Repeated START condition transmitted
                        rsct = 0x10,

                        /// Address + Write bit transmitted, ACK received
                        awbt_ar = 0x18,

                        /// Address + Write bit transmitted, ACK not received
                        awbt_anr = 0x20,

                        /// Data byte transmitted in master mode, ACK received
                        dbtm_ar = 0x28,

                        /// Data byte transmitted in master mode, ACK not received
                        dbtm_anr = 0x30,

                        /// Arbitration lost in address or data byte
                        al_a_db = 0x38,

                        /// Address + Read bit transmitted, ACK received
                        arbt_ar = 0x40,

                        /// Address + Read bit transmitted, ACK not received
                        arbt_anr = 0x48,

                        /// Data byte received in master mode, ACK received
                        dbrm_ar = 0x50,

                        /// Data byte received in master mode, ACK not received
                        dbrm_anr = 0x58,

                        /// Timeout when sending the 9th SCL clock
                        t_s9sc = 0x01,
                    } = .be,

                    /// [24:27] Transition result
                    tran_result: enum(u4) {
                        ///
                        ok = 0,

                        ///
                        fail = 1,
                    } = .ok,

                    /// [28:28] Read transition mode
                    read_tran_mode: enum(u1) {
                        ///
                        send = 0,

                        ///
                        not_send = 1,
                    } = .send,

                    /// [29:29] Restart mode
                    restart_mode: enum(u1) {
                        ///
                        restart = 0,

                        ///
                        stop_restart = 1,
                    } = .restart,

                    /// [30:30]
                    res1: u1 = 0,

                    /// [31:31] Start transmission
                    start_tran: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        start = 1,
                    } = .idle,
                }), @ptrFromInt(0x2502e00));

                /// TWI_DRV Transmission Configuration Register
                pub const TWI_DRV_CFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    packet_cnt: u16 = 0,

                    /// [16:31]
                    pkt_interval: u16 = 0,
                }), @ptrFromInt(0x2502e04));

                /// TWI_DRV Slave ID Register
                pub const TWI_DRV_SLV = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] SLAX[7:0]
                    slv_id_x: u8 = 0,

                    /// [8:8] R/W operation to slave device
                    cmd: enum(u1) {
                        ///
                        write = 0,

                        ///
                        read = 1,
                    } = .write,

                    /// [9:15] Slave device ID
                    slv_id: u7 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2502e08));

                /// TWI_DRV Packet Format Register
                pub const TWI_DRV_FMT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    data_byte: u16 = 0,

                    /// [16:23]
                    addr_byte: u8 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x2502e0c));

                /// TWI_DRV Bus Control Register
                pub const TWI_DRV_BUS_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] SDA manual output enable
                    sda_moe: u1 = 0,

                    /// [1:1] SCL manual output enable
                    scl_moe: u1 = 0,

                    /// [2:2] SDA manual output value
                    sda_mov: u1 = 0,

                    /// [3:3] SCL manual output value
                    scl_mov: u1 = 0,

                    /// [4:5]
                    res0: u2 = 0,

                    /// [6:6] SDA current status
                    sda_sta: u1 = 0,

                    /// [7:7] SCL current status
                    scl_sta: u1 = 0,

                    /// [8:11]
                    clk_m: u4 = 0,

                    /// [12:14]
                    clk_n: u3 = 0,

                    /// [15:15] Setting duty cycle of clock as master
                    clk_duty: enum(u1) {
                        /// 50%
                        P50 = 0,

                        /// 40%
                        P40 = 1,
                    } = .P50,

                    /// [16:16]
                    clk_count_mode: enum(u1) {
                        /// scl clock high period count on oscl
                        oscl = 0,

                        /// scl clock high period count on iscl
                        iscl = 1,
                    } = .oscl,

                    /// [17:31]
                    res1: u15 = 0,
                }), @ptrFromInt(0x2502e10));

                /// TWI_DRV Interrupt Control Register
                pub const TWI_DRV_INT_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    tran_com_pd: u1 = 0,

                    /// [1:1]
                    tran_err_pd: u1 = 0,

                    /// [2:2]
                    tx_req_pd: u1 = 0,

                    /// [3:3]
                    rx_req_pd: u1 = 0,

                    /// [4:15]
                    res0: u12 = 0,

                    /// [16:16]
                    tran_com_int_en: u1 = 0,

                    /// [17:17]
                    tran_err_int_en: u1 = 0,

                    /// [18:18]
                    tx_req_int_en: u1 = 0,

                    /// [19:19]
                    rx_req_int_en: u1 = 0,

                    /// [20:31]
                    res1: u12 = 0,
                }), @ptrFromInt(0x2502e14));

                /// TWI_DRV DMA Configure Register
                pub const TWI_DRV_DMA_CFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5]
                    tx_trig: u6 = 0,

                    /// [6:7]
                    res0: u2 = 0,

                    /// [8:8]
                    dma_tx_en: u1 = 0,

                    /// [9:15]
                    res1: u7 = 0,

                    /// [16:21]
                    rx_trig: u6 = 0,

                    /// [22:22]
                    res2: u1 = 0,

                    /// [23:24]
                    dma_rx_en: u2 = 0,

                    /// [25:31]
                    res3: u7 = 0,
                }), @ptrFromInt(0x2502e18));

                /// TWI_DRV FIFO Content Register
                pub const TWI_DRV_FIFO_CON = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5]
                    send_fifo_content: u6 = 0,

                    /// [6:6]
                    send_fifo_clear: u1 = 0,

                    /// [7:15]
                    res0: u9 = 0,

                    /// [16:21]
                    recv_fifo_content: u6 = 0,

                    /// [22:22]
                    recv_fifo_clear: u1 = 0,

                    /// [23:31]
                    res1: u9 = 0,
                }), @ptrFromInt(0x2502e1c));

                /// TWI_DRV Send Data FIFO Access Register
                pub const TWI_DRV_SEND_FIFO_ACC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    send_data_fifo: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502f00));

                /// TWI_DRV Receive Data FIFO Access Register
                pub const TWI_DRV_RECV_FIFO_ACC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    recv_data_fifo: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2502f04));
            };

            /// Universal Asynchronous Receiver Transmitter
            pub const UART0 = struct {
                /// UART Receive Buffer Register
                pub const RBR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    rbr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500000));

                /// UART Transmit Holding Register
                pub const THR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    thr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500000));

                /// UART Divisor Latch Low Register
                pub const DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dll: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500000));

                /// UART Divisor Latch High Register
                pub const DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dlh: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500004));

                /// UART Interrupt Enable Register
                pub const IER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Enable Received Data Available Interrupt
                    erbfi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] Enable Transmit Holding Register Empty Interrupt
                    etbei: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] Enable Receiver Line Status Interrupt
                    elsi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] Enable Modem Status Interrupt
                    edssi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] RS485 Interrupt Enable
                    rs485_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:6]
                    res0: u2 = 0,

                    /// [7:7] Programmable THRE Interrupt Mode Enable
                    ptime: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500004));

                /// UART Interrupt Identity Register
                pub const IIR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Interrupt ID
                    iid: enum(u4) {
                        ///
                        modem_status = 0b0000,

                        ///
                        no_interrupt_pending = 0b0001,

                        ///
                        thr_empty = 0b0010,

                        ///
                        rs485_interrupt = 0b0011,

                        ///
                        received_data_available = 0b0100,

                        ///
                        receiver_line_status = 0b0110,

                        ///
                        busy_detect = 0b0111,

                        ///
                        character_timeout = 0b1100,
                    } = .modem_status,

                    /// [4:5]
                    res0: u2 = 0,

                    /// [6:7] FIFOs Enable Flag
                    feflag: enum(u2) {
                        ///
                        disable = 0b00,

                        ///
                        enable = 0b11,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500008));

                /// UART FIFO Control Register
                pub const FCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    fifoe: u1 = 0,

                    /// [1:1]
                    rfifor: u1 = 0,

                    /// [2:2]
                    xfifor: u1 = 0,

                    /// [3:3]
                    dmam: enum(u1) {
                        ///
                        mode_0 = 0,

                        ///
                        mode_1 = 1,
                    } = .mode_0,

                    /// [4:5]
                    tft: enum(u2) {
                        ///
                        empty = 0b00,

                        ///
                        two_characters = 0b01,

                        ///
                        quarter_full = 0b10,

                        ///
                        half_full = 0b11,
                    } = .empty,

                    /// [6:7]
                    rt: enum(u2) {
                        ///
                        one_character = 0b00,

                        ///
                        quarter_full = 0b01,

                        ///
                        half_full = 0b10,

                        ///
                        two_less_than_full = 0b11,
                    } = .one_character,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500008));

                /// UART Line Control Register
                pub const LCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Data Length Select
                    dls: enum(u2) {
                        /// 5 bits
                        five = 0b00,

                        /// 6 bits
                        six = 0b01,

                        /// 7 bits
                        seven = 0b10,

                        /// 8 bits
                        eight = 0b11,
                    } = .five,

                    /// [2:2] Number of stop bits
                    stop: enum(u1) {
                        /// 1 stop bit
                        one = 0,

                        /// 1.5 stop bits when DLS(LCR[1:0]) is zero, else 2 stop bits
                        two = 1,
                    } = .one,

                    /// [3:3] Parity Enable
                    pen: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [4:5] Even Parity Select
                    eps: enum(u2) {
                        ///
                        odd = 0,

                        ///
                        even = 1,

                        ///
                        rs485_data = 0b10,

                        ///
                        rs485_addr = 0b11,
                    } = .odd,

                    /// [6:6] Break Control Bit
                    bc: u1 = 0,

                    /// [7:7] Divisor Latch Access Bit
                    dlab: enum(u1) {
                        ///
                        rx_buffer = 0,

                        ///
                        divisor_latch = 1,
                    } = .rx_buffer,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x250000c));

                /// UART Modem Control Register
                pub const MCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Terminal Ready
                    dtr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [1:1] Request to Send
                    rts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:4] Loop Back Mode
                    loop: enum(u1) {
                        ///
                        normal = 0,

                        ///
                        loop_back = 1,
                    } = .normal,

                    /// [5:5] Auto Flow Control Enable
                    afce: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [6:7] UART Function: Select IrDA or RS485
                    function: enum(u2) {
                        ///
                        UART = 0b00,

                        ///
                        IrDA_SIR = 0b01,

                        ///
                        RS485 = 0b10,

                        ///
                        reserved = 0b11,
                    } = .UART,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500010));

                /// UART Line Status Register
                pub const LSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Ready
                    dr: enum(u1) {
                        ///
                        ready = 1,
                    } = .ready,

                    /// [1:1] Overrun Error
                    oe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [2:2] Parity Error
                    pe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [3:3] Framing Error
                    fe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [4:4] Break Interrupt
                    bi: u1 = 0,

                    /// [5:5] TX Holding Register Empty
                    thre: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [6:6] Transmitter Empty
                    temt: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [7:7] RX Data Error in FIFO
                    fifoerr: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500014));

                /// UART Modem Status Register
                pub const MSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Delta Clear to Send
                    dcts: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [1:1] Delta Data Set Ready
                    ddsr: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [2:2] Trailing Edge Ring Indicator
                    teri: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [3:3] Delta Data Carrier Detect
                    ddcd: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [4:4] Line State of Clear To Send
                    cts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [5:5] Line State of Data Set Ready
                    dsr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [6:6] Line State of Ring Indicator
                    ri: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [7:7] Line State of Data Carrier Detect
                    dcd: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500018));

                /// UART Scratch Register
                pub const SCH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    scratch: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x250001c));

                /// UART Status Register
                pub const USR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] UART Busy Bit
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1] TX FIFO Not Full
                    tfnf: enum(u1) {
                        ///
                        full = 0,

                        ///
                        not_full = 1,
                    } = .full,

                    /// [2:2] TX FIFO Empty
                    tfe: enum(u1) {
                        ///
                        not_empty = 0,

                        ///
                        empty = 1,
                    } = .not_empty,

                    /// [3:3] RX FIFO Not Empty
                    rfne: enum(u1) {
                        ///
                        empty = 0,

                        ///
                        not_empty = 1,
                    } = .empty,

                    /// [4:4] RX FIFO Full
                    rff: enum(u1) {
                        ///
                        not_full = 0,

                        ///
                        full = 1,
                    } = .not_full,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x250007c));

                /// UART Transmit FIFO Level Register
                pub const TFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] TX FIFO Level
                    tfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2500080));

                /// UART Receive FIFO Level Register
                pub const RFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] RX FIFO Level
                    rfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2500084));

                /// UART DMA Handshake Configuration Register
                pub const HSK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Handshake configuration
                    hsk: enum(u8) {
                        ///
                        wait_cycle = 0xA5,

                        ///
                        handshake = 0xE5,
                    } = .wait_cycle,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500088));

                /// UART DMA Request Enable Register
                pub const DMA_REQ_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] DMA RX REQ Enable
                    rx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] DMA TX REQ Enable
                    tx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] DMA Timeout Enable
                    timeout_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:31]
                    res0: u29 = 0,
                }), @ptrFromInt(0x250008c));

                /// UART Halt TX Register
                pub const HALT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    halt_tx: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [1:1]
                    chcfg_at_busy: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    change_update: enum(u1) {
                        ///
                        finished = 0,

                        ///
                        update_trigger = 1,
                    } = .finished,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] SIR TX Pulse Polarity Invert
                    sir_tx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [5:5] SIR RX Pulse Polarity Invert
                    sir_rx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [6:6] The Transmission of RX_DRQ
                    dma_pte_rx: u1 = 0,

                    /// [7:7] The sending of TX_REQ
                    pte: u1 = 0,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x25000a4));

                /// UART Debug DLL Register
                pub const DBG_DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLL: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x25000b0));

                /// UART Debug DLH Register
                pub const DBG_DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLH: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x25000b4));

                /// UART FIFO Clock Control Register
                pub const FCC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    rx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1]
                    tx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    rx_fifo_clock_mode: enum(u1) {
                        /// Sync mode, writing/reading clocks use apb clock
                        wr_apb = 0,

                        /// Sync mode, writing clock uses apb clock, reading clock uses ahb clock
                        w_apb_r_ahb = 1,
                    } = .wr_apb,

                    /// [3:7]
                    res0: u5 = 0,

                    /// [8:31]
                    fifo_depth: u24 = 0,
                }), @ptrFromInt(0x25000f0));

                /// UART RXDMA Control Register
                pub const RXDMA_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    enable: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [1:1]
                    mode: enum(u1) {
                        ///
                        Continous = 0,

                        ///
                        Limited = 1,
                    } = .Continous,

                    /// [2:3]
                    blk_size: enum(u2) {
                        ///
                        B8 = 0b00,

                        ///
                        B16 = 0b01,

                        ///
                        B32 = 0b10,

                        ///
                        B64 = 0b11,
                    } = .B8,

                    /// [4:5] Set for AHB port burst supported
                    ahb_burst_mode: enum(u2) {
                        ///
                        SINGLE = 0b00,

                        ///
                        INCR4 = 0b01,

                        ///
                        INCR8 = 0b10,

                        ///
                        INCR16 = 0b11,
                    } = .SINGLE,

                    /// [6:6] RXDMA Timeout Enable
                    timeout_enable: u1 = 0,

                    /// [7:7]
                    res0: u1 = 0,

                    /// [8:23] RXDMA Timeout Threshold\n\nUnit is 1 UART bit time
                    timeout_threshold: u16 = 0,

                    /// [24:31]
                    res1: u8 = 0,
                }), @ptrFromInt(0x2500100));

                /// UART RXDMA Start Register
                pub const RXDMA_STR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    start: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x2500104));

                /// UART RXDMA Status Register
                pub const RXDMA_STA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1]
                    buffer_read_address_updating: enum(u1) {
                        ///
                        ready = 0,

                        ///
                        busy = 1,
                    } = .ready,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500108));

                /// UART RXDMA Limit Register
                pub const RXDMA_LMT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    limit_size: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x250010c));

                /// UART RXDMA Buffer Start Address Low Register
                pub const RXDMA_SADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500110));

                /// UART RXDMA Buffer Start Address High Register
                pub const RXDMA_SADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Buffer Start Address [33:32]
                    saddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500114));

                /// UART RXDMA Buffer Length Register
                pub const RXDMA_BL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    buffer_length: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2500118));

                /// UART RXDMA Interrupt Enable Register
                pub const RXDMA_IE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2500120));

                /// UART RXDMA Interrupt Status Register
                pub const RXDMA_IS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2500124));

                /// UART RXDMA Write Address Low Register
                pub const RXDMA_WADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500128));

                /// UART RXDMA Write Address High Register
                pub const RXDMA_WADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Write Address [33:32]
                    waddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x250012c));

                /// UART RXDMA Read Address Low Register
                pub const RXDMA_RADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500130));

                /// UART RXDMA Read Address High Register
                pub const RXDMA_RADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Read Address [33:32]
                    raddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500134));

                /// UART RXDMA Data Count Register
                pub const RXDMA_DCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    data_count: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2500138));
            };

            /// Universal Asynchronous Receiver Transmitter
            pub const UART1 = struct {
                /// UART Receive Buffer Register
                pub const RBR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    rbr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500400));

                /// UART Transmit Holding Register
                pub const THR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    thr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500400));

                /// UART Divisor Latch Low Register
                pub const DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dll: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500400));

                /// UART Divisor Latch High Register
                pub const DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dlh: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500404));

                /// UART Interrupt Enable Register
                pub const IER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Enable Received Data Available Interrupt
                    erbfi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] Enable Transmit Holding Register Empty Interrupt
                    etbei: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] Enable Receiver Line Status Interrupt
                    elsi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] Enable Modem Status Interrupt
                    edssi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] RS485 Interrupt Enable
                    rs485_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:6]
                    res0: u2 = 0,

                    /// [7:7] Programmable THRE Interrupt Mode Enable
                    ptime: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500404));

                /// UART Interrupt Identity Register
                pub const IIR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Interrupt ID
                    iid: enum(u4) {
                        ///
                        modem_status = 0b0000,

                        ///
                        no_interrupt_pending = 0b0001,

                        ///
                        thr_empty = 0b0010,

                        ///
                        rs485_interrupt = 0b0011,

                        ///
                        received_data_available = 0b0100,

                        ///
                        receiver_line_status = 0b0110,

                        ///
                        busy_detect = 0b0111,

                        ///
                        character_timeout = 0b1100,
                    } = .modem_status,

                    /// [4:5]
                    res0: u2 = 0,

                    /// [6:7] FIFOs Enable Flag
                    feflag: enum(u2) {
                        ///
                        disable = 0b00,

                        ///
                        enable = 0b11,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500408));

                /// UART FIFO Control Register
                pub const FCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    fifoe: u1 = 0,

                    /// [1:1]
                    rfifor: u1 = 0,

                    /// [2:2]
                    xfifor: u1 = 0,

                    /// [3:3]
                    dmam: enum(u1) {
                        ///
                        mode_0 = 0,

                        ///
                        mode_1 = 1,
                    } = .mode_0,

                    /// [4:5]
                    tft: enum(u2) {
                        ///
                        empty = 0b00,

                        ///
                        two_characters = 0b01,

                        ///
                        quarter_full = 0b10,

                        ///
                        half_full = 0b11,
                    } = .empty,

                    /// [6:7]
                    rt: enum(u2) {
                        ///
                        one_character = 0b00,

                        ///
                        quarter_full = 0b01,

                        ///
                        half_full = 0b10,

                        ///
                        two_less_than_full = 0b11,
                    } = .one_character,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500408));

                /// UART Line Control Register
                pub const LCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Data Length Select
                    dls: enum(u2) {
                        /// 5 bits
                        five = 0b00,

                        /// 6 bits
                        six = 0b01,

                        /// 7 bits
                        seven = 0b10,

                        /// 8 bits
                        eight = 0b11,
                    } = .five,

                    /// [2:2] Number of stop bits
                    stop: enum(u1) {
                        /// 1 stop bit
                        one = 0,

                        /// 1.5 stop bits when DLS(LCR[1:0]) is zero, else 2 stop bits
                        two = 1,
                    } = .one,

                    /// [3:3] Parity Enable
                    pen: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [4:5] Even Parity Select
                    eps: enum(u2) {
                        ///
                        odd = 0,

                        ///
                        even = 1,

                        ///
                        rs485_data = 0b10,

                        ///
                        rs485_addr = 0b11,
                    } = .odd,

                    /// [6:6] Break Control Bit
                    bc: u1 = 0,

                    /// [7:7] Divisor Latch Access Bit
                    dlab: enum(u1) {
                        ///
                        rx_buffer = 0,

                        ///
                        divisor_latch = 1,
                    } = .rx_buffer,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x250040c));

                /// UART Modem Control Register
                pub const MCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Terminal Ready
                    dtr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [1:1] Request to Send
                    rts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:4] Loop Back Mode
                    loop: enum(u1) {
                        ///
                        normal = 0,

                        ///
                        loop_back = 1,
                    } = .normal,

                    /// [5:5] Auto Flow Control Enable
                    afce: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [6:7] UART Function: Select IrDA or RS485
                    function: enum(u2) {
                        ///
                        UART = 0b00,

                        ///
                        IrDA_SIR = 0b01,

                        ///
                        RS485 = 0b10,

                        ///
                        reserved = 0b11,
                    } = .UART,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500410));

                /// UART Line Status Register
                pub const LSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Ready
                    dr: enum(u1) {
                        ///
                        ready = 1,
                    } = .ready,

                    /// [1:1] Overrun Error
                    oe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [2:2] Parity Error
                    pe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [3:3] Framing Error
                    fe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [4:4] Break Interrupt
                    bi: u1 = 0,

                    /// [5:5] TX Holding Register Empty
                    thre: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [6:6] Transmitter Empty
                    temt: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [7:7] RX Data Error in FIFO
                    fifoerr: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500414));

                /// UART Modem Status Register
                pub const MSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Delta Clear to Send
                    dcts: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [1:1] Delta Data Set Ready
                    ddsr: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [2:2] Trailing Edge Ring Indicator
                    teri: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [3:3] Delta Data Carrier Detect
                    ddcd: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [4:4] Line State of Clear To Send
                    cts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [5:5] Line State of Data Set Ready
                    dsr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [6:6] Line State of Ring Indicator
                    ri: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [7:7] Line State of Data Carrier Detect
                    dcd: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500418));

                /// UART Scratch Register
                pub const SCH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    scratch: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x250041c));

                /// UART Status Register
                pub const USR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] UART Busy Bit
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1] TX FIFO Not Full
                    tfnf: enum(u1) {
                        ///
                        full = 0,

                        ///
                        not_full = 1,
                    } = .full,

                    /// [2:2] TX FIFO Empty
                    tfe: enum(u1) {
                        ///
                        not_empty = 0,

                        ///
                        empty = 1,
                    } = .not_empty,

                    /// [3:3] RX FIFO Not Empty
                    rfne: enum(u1) {
                        ///
                        empty = 0,

                        ///
                        not_empty = 1,
                    } = .empty,

                    /// [4:4] RX FIFO Full
                    rff: enum(u1) {
                        ///
                        not_full = 0,

                        ///
                        full = 1,
                    } = .not_full,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x250047c));

                /// UART Transmit FIFO Level Register
                pub const TFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] TX FIFO Level
                    tfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2500480));

                /// UART Receive FIFO Level Register
                pub const RFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] RX FIFO Level
                    rfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2500484));

                /// UART DMA Handshake Configuration Register
                pub const HSK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Handshake configuration
                    hsk: enum(u8) {
                        ///
                        wait_cycle = 0xA5,

                        ///
                        handshake = 0xE5,
                    } = .wait_cycle,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500488));

                /// UART DMA Request Enable Register
                pub const DMA_REQ_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] DMA RX REQ Enable
                    rx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] DMA TX REQ Enable
                    tx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] DMA Timeout Enable
                    timeout_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:31]
                    res0: u29 = 0,
                }), @ptrFromInt(0x250048c));

                /// UART Halt TX Register
                pub const HALT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    halt_tx: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [1:1]
                    chcfg_at_busy: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    change_update: enum(u1) {
                        ///
                        finished = 0,

                        ///
                        update_trigger = 1,
                    } = .finished,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] SIR TX Pulse Polarity Invert
                    sir_tx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [5:5] SIR RX Pulse Polarity Invert
                    sir_rx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [6:6] The Transmission of RX_DRQ
                    dma_pte_rx: u1 = 0,

                    /// [7:7] The sending of TX_REQ
                    pte: u1 = 0,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x25004a4));

                /// UART Debug DLL Register
                pub const DBG_DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLL: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x25004b0));

                /// UART Debug DLH Register
                pub const DBG_DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLH: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x25004b4));

                /// UART FIFO Clock Control Register
                pub const FCC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    rx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1]
                    tx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    rx_fifo_clock_mode: enum(u1) {
                        /// Sync mode, writing/reading clocks use apb clock
                        wr_apb = 0,

                        /// Sync mode, writing clock uses apb clock, reading clock uses ahb clock
                        w_apb_r_ahb = 1,
                    } = .wr_apb,

                    /// [3:7]
                    res0: u5 = 0,

                    /// [8:31]
                    fifo_depth: u24 = 0,
                }), @ptrFromInt(0x25004f0));

                /// UART RXDMA Control Register
                pub const RXDMA_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    enable: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [1:1]
                    mode: enum(u1) {
                        ///
                        Continous = 0,

                        ///
                        Limited = 1,
                    } = .Continous,

                    /// [2:3]
                    blk_size: enum(u2) {
                        ///
                        B8 = 0b00,

                        ///
                        B16 = 0b01,

                        ///
                        B32 = 0b10,

                        ///
                        B64 = 0b11,
                    } = .B8,

                    /// [4:5] Set for AHB port burst supported
                    ahb_burst_mode: enum(u2) {
                        ///
                        SINGLE = 0b00,

                        ///
                        INCR4 = 0b01,

                        ///
                        INCR8 = 0b10,

                        ///
                        INCR16 = 0b11,
                    } = .SINGLE,

                    /// [6:6] RXDMA Timeout Enable
                    timeout_enable: u1 = 0,

                    /// [7:7]
                    res0: u1 = 0,

                    /// [8:23] RXDMA Timeout Threshold\n\nUnit is 1 UART bit time
                    timeout_threshold: u16 = 0,

                    /// [24:31]
                    res1: u8 = 0,
                }), @ptrFromInt(0x2500500));

                /// UART RXDMA Start Register
                pub const RXDMA_STR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    start: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x2500504));

                /// UART RXDMA Status Register
                pub const RXDMA_STA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1]
                    buffer_read_address_updating: enum(u1) {
                        ///
                        ready = 0,

                        ///
                        busy = 1,
                    } = .ready,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500508));

                /// UART RXDMA Limit Register
                pub const RXDMA_LMT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    limit_size: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x250050c));

                /// UART RXDMA Buffer Start Address Low Register
                pub const RXDMA_SADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500510));

                /// UART RXDMA Buffer Start Address High Register
                pub const RXDMA_SADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Buffer Start Address [33:32]
                    saddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500514));

                /// UART RXDMA Buffer Length Register
                pub const RXDMA_BL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    buffer_length: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2500518));

                /// UART RXDMA Interrupt Enable Register
                pub const RXDMA_IE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2500520));

                /// UART RXDMA Interrupt Status Register
                pub const RXDMA_IS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2500524));

                /// UART RXDMA Write Address Low Register
                pub const RXDMA_WADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500528));

                /// UART RXDMA Write Address High Register
                pub const RXDMA_WADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Write Address [33:32]
                    waddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x250052c));

                /// UART RXDMA Read Address Low Register
                pub const RXDMA_RADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500530));

                /// UART RXDMA Read Address High Register
                pub const RXDMA_RADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Read Address [33:32]
                    raddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500534));

                /// UART RXDMA Data Count Register
                pub const RXDMA_DCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    data_count: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2500538));
            };

            /// Universal Asynchronous Receiver Transmitter
            pub const UART2 = struct {
                /// UART Receive Buffer Register
                pub const RBR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    rbr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500800));

                /// UART Transmit Holding Register
                pub const THR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    thr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500800));

                /// UART Divisor Latch Low Register
                pub const DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dll: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500800));

                /// UART Divisor Latch High Register
                pub const DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dlh: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500804));

                /// UART Interrupt Enable Register
                pub const IER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Enable Received Data Available Interrupt
                    erbfi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] Enable Transmit Holding Register Empty Interrupt
                    etbei: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] Enable Receiver Line Status Interrupt
                    elsi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] Enable Modem Status Interrupt
                    edssi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] RS485 Interrupt Enable
                    rs485_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:6]
                    res0: u2 = 0,

                    /// [7:7] Programmable THRE Interrupt Mode Enable
                    ptime: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500804));

                /// UART Interrupt Identity Register
                pub const IIR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Interrupt ID
                    iid: enum(u4) {
                        ///
                        modem_status = 0b0000,

                        ///
                        no_interrupt_pending = 0b0001,

                        ///
                        thr_empty = 0b0010,

                        ///
                        rs485_interrupt = 0b0011,

                        ///
                        received_data_available = 0b0100,

                        ///
                        receiver_line_status = 0b0110,

                        ///
                        busy_detect = 0b0111,

                        ///
                        character_timeout = 0b1100,
                    } = .modem_status,

                    /// [4:5]
                    res0: u2 = 0,

                    /// [6:7] FIFOs Enable Flag
                    feflag: enum(u2) {
                        ///
                        disable = 0b00,

                        ///
                        enable = 0b11,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500808));

                /// UART FIFO Control Register
                pub const FCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    fifoe: u1 = 0,

                    /// [1:1]
                    rfifor: u1 = 0,

                    /// [2:2]
                    xfifor: u1 = 0,

                    /// [3:3]
                    dmam: enum(u1) {
                        ///
                        mode_0 = 0,

                        ///
                        mode_1 = 1,
                    } = .mode_0,

                    /// [4:5]
                    tft: enum(u2) {
                        ///
                        empty = 0b00,

                        ///
                        two_characters = 0b01,

                        ///
                        quarter_full = 0b10,

                        ///
                        half_full = 0b11,
                    } = .empty,

                    /// [6:7]
                    rt: enum(u2) {
                        ///
                        one_character = 0b00,

                        ///
                        quarter_full = 0b01,

                        ///
                        half_full = 0b10,

                        ///
                        two_less_than_full = 0b11,
                    } = .one_character,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500808));

                /// UART Line Control Register
                pub const LCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Data Length Select
                    dls: enum(u2) {
                        /// 5 bits
                        five = 0b00,

                        /// 6 bits
                        six = 0b01,

                        /// 7 bits
                        seven = 0b10,

                        /// 8 bits
                        eight = 0b11,
                    } = .five,

                    /// [2:2] Number of stop bits
                    stop: enum(u1) {
                        /// 1 stop bit
                        one = 0,

                        /// 1.5 stop bits when DLS(LCR[1:0]) is zero, else 2 stop bits
                        two = 1,
                    } = .one,

                    /// [3:3] Parity Enable
                    pen: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [4:5] Even Parity Select
                    eps: enum(u2) {
                        ///
                        odd = 0,

                        ///
                        even = 1,

                        ///
                        rs485_data = 0b10,

                        ///
                        rs485_addr = 0b11,
                    } = .odd,

                    /// [6:6] Break Control Bit
                    bc: u1 = 0,

                    /// [7:7] Divisor Latch Access Bit
                    dlab: enum(u1) {
                        ///
                        rx_buffer = 0,

                        ///
                        divisor_latch = 1,
                    } = .rx_buffer,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x250080c));

                /// UART Modem Control Register
                pub const MCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Terminal Ready
                    dtr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [1:1] Request to Send
                    rts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:4] Loop Back Mode
                    loop: enum(u1) {
                        ///
                        normal = 0,

                        ///
                        loop_back = 1,
                    } = .normal,

                    /// [5:5] Auto Flow Control Enable
                    afce: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [6:7] UART Function: Select IrDA or RS485
                    function: enum(u2) {
                        ///
                        UART = 0b00,

                        ///
                        IrDA_SIR = 0b01,

                        ///
                        RS485 = 0b10,

                        ///
                        reserved = 0b11,
                    } = .UART,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500810));

                /// UART Line Status Register
                pub const LSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Ready
                    dr: enum(u1) {
                        ///
                        ready = 1,
                    } = .ready,

                    /// [1:1] Overrun Error
                    oe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [2:2] Parity Error
                    pe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [3:3] Framing Error
                    fe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [4:4] Break Interrupt
                    bi: u1 = 0,

                    /// [5:5] TX Holding Register Empty
                    thre: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [6:6] Transmitter Empty
                    temt: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [7:7] RX Data Error in FIFO
                    fifoerr: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500814));

                /// UART Modem Status Register
                pub const MSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Delta Clear to Send
                    dcts: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [1:1] Delta Data Set Ready
                    ddsr: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [2:2] Trailing Edge Ring Indicator
                    teri: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [3:3] Delta Data Carrier Detect
                    ddcd: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [4:4] Line State of Clear To Send
                    cts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [5:5] Line State of Data Set Ready
                    dsr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [6:6] Line State of Ring Indicator
                    ri: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [7:7] Line State of Data Carrier Detect
                    dcd: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500818));

                /// UART Scratch Register
                pub const SCH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    scratch: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x250081c));

                /// UART Status Register
                pub const USR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] UART Busy Bit
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1] TX FIFO Not Full
                    tfnf: enum(u1) {
                        ///
                        full = 0,

                        ///
                        not_full = 1,
                    } = .full,

                    /// [2:2] TX FIFO Empty
                    tfe: enum(u1) {
                        ///
                        not_empty = 0,

                        ///
                        empty = 1,
                    } = .not_empty,

                    /// [3:3] RX FIFO Not Empty
                    rfne: enum(u1) {
                        ///
                        empty = 0,

                        ///
                        not_empty = 1,
                    } = .empty,

                    /// [4:4] RX FIFO Full
                    rff: enum(u1) {
                        ///
                        not_full = 0,

                        ///
                        full = 1,
                    } = .not_full,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x250087c));

                /// UART Transmit FIFO Level Register
                pub const TFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] TX FIFO Level
                    tfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2500880));

                /// UART Receive FIFO Level Register
                pub const RFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] RX FIFO Level
                    rfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2500884));

                /// UART DMA Handshake Configuration Register
                pub const HSK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Handshake configuration
                    hsk: enum(u8) {
                        ///
                        wait_cycle = 0xA5,

                        ///
                        handshake = 0xE5,
                    } = .wait_cycle,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500888));

                /// UART DMA Request Enable Register
                pub const DMA_REQ_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] DMA RX REQ Enable
                    rx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] DMA TX REQ Enable
                    tx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] DMA Timeout Enable
                    timeout_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:31]
                    res0: u29 = 0,
                }), @ptrFromInt(0x250088c));

                /// UART Halt TX Register
                pub const HALT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    halt_tx: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [1:1]
                    chcfg_at_busy: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    change_update: enum(u1) {
                        ///
                        finished = 0,

                        ///
                        update_trigger = 1,
                    } = .finished,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] SIR TX Pulse Polarity Invert
                    sir_tx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [5:5] SIR RX Pulse Polarity Invert
                    sir_rx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [6:6] The Transmission of RX_DRQ
                    dma_pte_rx: u1 = 0,

                    /// [7:7] The sending of TX_REQ
                    pte: u1 = 0,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x25008a4));

                /// UART Debug DLL Register
                pub const DBG_DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLL: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x25008b0));

                /// UART Debug DLH Register
                pub const DBG_DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLH: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x25008b4));

                /// UART FIFO Clock Control Register
                pub const FCC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    rx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1]
                    tx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    rx_fifo_clock_mode: enum(u1) {
                        /// Sync mode, writing/reading clocks use apb clock
                        wr_apb = 0,

                        /// Sync mode, writing clock uses apb clock, reading clock uses ahb clock
                        w_apb_r_ahb = 1,
                    } = .wr_apb,

                    /// [3:7]
                    res0: u5 = 0,

                    /// [8:31]
                    fifo_depth: u24 = 0,
                }), @ptrFromInt(0x25008f0));

                /// UART RXDMA Control Register
                pub const RXDMA_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    enable: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [1:1]
                    mode: enum(u1) {
                        ///
                        Continous = 0,

                        ///
                        Limited = 1,
                    } = .Continous,

                    /// [2:3]
                    blk_size: enum(u2) {
                        ///
                        B8 = 0b00,

                        ///
                        B16 = 0b01,

                        ///
                        B32 = 0b10,

                        ///
                        B64 = 0b11,
                    } = .B8,

                    /// [4:5] Set for AHB port burst supported
                    ahb_burst_mode: enum(u2) {
                        ///
                        SINGLE = 0b00,

                        ///
                        INCR4 = 0b01,

                        ///
                        INCR8 = 0b10,

                        ///
                        INCR16 = 0b11,
                    } = .SINGLE,

                    /// [6:6] RXDMA Timeout Enable
                    timeout_enable: u1 = 0,

                    /// [7:7]
                    res0: u1 = 0,

                    /// [8:23] RXDMA Timeout Threshold\n\nUnit is 1 UART bit time
                    timeout_threshold: u16 = 0,

                    /// [24:31]
                    res1: u8 = 0,
                }), @ptrFromInt(0x2500900));

                /// UART RXDMA Start Register
                pub const RXDMA_STR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    start: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x2500904));

                /// UART RXDMA Status Register
                pub const RXDMA_STA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1]
                    buffer_read_address_updating: enum(u1) {
                        ///
                        ready = 0,

                        ///
                        busy = 1,
                    } = .ready,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500908));

                /// UART RXDMA Limit Register
                pub const RXDMA_LMT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    limit_size: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x250090c));

                /// UART RXDMA Buffer Start Address Low Register
                pub const RXDMA_SADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500910));

                /// UART RXDMA Buffer Start Address High Register
                pub const RXDMA_SADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Buffer Start Address [33:32]
                    saddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500914));

                /// UART RXDMA Buffer Length Register
                pub const RXDMA_BL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    buffer_length: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2500918));

                /// UART RXDMA Interrupt Enable Register
                pub const RXDMA_IE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2500920));

                /// UART RXDMA Interrupt Status Register
                pub const RXDMA_IS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2500924));

                /// UART RXDMA Write Address Low Register
                pub const RXDMA_WADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500928));

                /// UART RXDMA Write Address High Register
                pub const RXDMA_WADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Write Address [33:32]
                    waddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x250092c));

                /// UART RXDMA Read Address Low Register
                pub const RXDMA_RADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500930));

                /// UART RXDMA Read Address High Register
                pub const RXDMA_RADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Read Address [33:32]
                    raddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500934));

                /// UART RXDMA Data Count Register
                pub const RXDMA_DCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    data_count: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2500938));
            };

            /// Universal Asynchronous Receiver Transmitter
            pub const UART3 = struct {
                /// UART Receive Buffer Register
                pub const RBR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    rbr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500c00));

                /// UART Transmit Holding Register
                pub const THR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    thr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500c00));

                /// UART Divisor Latch Low Register
                pub const DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dll: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500c00));

                /// UART Divisor Latch High Register
                pub const DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dlh: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500c04));

                /// UART Interrupt Enable Register
                pub const IER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Enable Received Data Available Interrupt
                    erbfi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] Enable Transmit Holding Register Empty Interrupt
                    etbei: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] Enable Receiver Line Status Interrupt
                    elsi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] Enable Modem Status Interrupt
                    edssi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] RS485 Interrupt Enable
                    rs485_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:6]
                    res0: u2 = 0,

                    /// [7:7] Programmable THRE Interrupt Mode Enable
                    ptime: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500c04));

                /// UART Interrupt Identity Register
                pub const IIR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Interrupt ID
                    iid: enum(u4) {
                        ///
                        modem_status = 0b0000,

                        ///
                        no_interrupt_pending = 0b0001,

                        ///
                        thr_empty = 0b0010,

                        ///
                        rs485_interrupt = 0b0011,

                        ///
                        received_data_available = 0b0100,

                        ///
                        receiver_line_status = 0b0110,

                        ///
                        busy_detect = 0b0111,

                        ///
                        character_timeout = 0b1100,
                    } = .modem_status,

                    /// [4:5]
                    res0: u2 = 0,

                    /// [6:7] FIFOs Enable Flag
                    feflag: enum(u2) {
                        ///
                        disable = 0b00,

                        ///
                        enable = 0b11,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500c08));

                /// UART FIFO Control Register
                pub const FCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    fifoe: u1 = 0,

                    /// [1:1]
                    rfifor: u1 = 0,

                    /// [2:2]
                    xfifor: u1 = 0,

                    /// [3:3]
                    dmam: enum(u1) {
                        ///
                        mode_0 = 0,

                        ///
                        mode_1 = 1,
                    } = .mode_0,

                    /// [4:5]
                    tft: enum(u2) {
                        ///
                        empty = 0b00,

                        ///
                        two_characters = 0b01,

                        ///
                        quarter_full = 0b10,

                        ///
                        half_full = 0b11,
                    } = .empty,

                    /// [6:7]
                    rt: enum(u2) {
                        ///
                        one_character = 0b00,

                        ///
                        quarter_full = 0b01,

                        ///
                        half_full = 0b10,

                        ///
                        two_less_than_full = 0b11,
                    } = .one_character,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500c08));

                /// UART Line Control Register
                pub const LCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Data Length Select
                    dls: enum(u2) {
                        /// 5 bits
                        five = 0b00,

                        /// 6 bits
                        six = 0b01,

                        /// 7 bits
                        seven = 0b10,

                        /// 8 bits
                        eight = 0b11,
                    } = .five,

                    /// [2:2] Number of stop bits
                    stop: enum(u1) {
                        /// 1 stop bit
                        one = 0,

                        /// 1.5 stop bits when DLS(LCR[1:0]) is zero, else 2 stop bits
                        two = 1,
                    } = .one,

                    /// [3:3] Parity Enable
                    pen: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [4:5] Even Parity Select
                    eps: enum(u2) {
                        ///
                        odd = 0,

                        ///
                        even = 1,

                        ///
                        rs485_data = 0b10,

                        ///
                        rs485_addr = 0b11,
                    } = .odd,

                    /// [6:6] Break Control Bit
                    bc: u1 = 0,

                    /// [7:7] Divisor Latch Access Bit
                    dlab: enum(u1) {
                        ///
                        rx_buffer = 0,

                        ///
                        divisor_latch = 1,
                    } = .rx_buffer,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500c0c));

                /// UART Modem Control Register
                pub const MCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Terminal Ready
                    dtr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [1:1] Request to Send
                    rts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:4] Loop Back Mode
                    loop: enum(u1) {
                        ///
                        normal = 0,

                        ///
                        loop_back = 1,
                    } = .normal,

                    /// [5:5] Auto Flow Control Enable
                    afce: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [6:7] UART Function: Select IrDA or RS485
                    function: enum(u2) {
                        ///
                        UART = 0b00,

                        ///
                        IrDA_SIR = 0b01,

                        ///
                        RS485 = 0b10,

                        ///
                        reserved = 0b11,
                    } = .UART,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500c10));

                /// UART Line Status Register
                pub const LSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Ready
                    dr: enum(u1) {
                        ///
                        ready = 1,
                    } = .ready,

                    /// [1:1] Overrun Error
                    oe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [2:2] Parity Error
                    pe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [3:3] Framing Error
                    fe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [4:4] Break Interrupt
                    bi: u1 = 0,

                    /// [5:5] TX Holding Register Empty
                    thre: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [6:6] Transmitter Empty
                    temt: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [7:7] RX Data Error in FIFO
                    fifoerr: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500c14));

                /// UART Modem Status Register
                pub const MSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Delta Clear to Send
                    dcts: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [1:1] Delta Data Set Ready
                    ddsr: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [2:2] Trailing Edge Ring Indicator
                    teri: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [3:3] Delta Data Carrier Detect
                    ddcd: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [4:4] Line State of Clear To Send
                    cts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [5:5] Line State of Data Set Ready
                    dsr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [6:6] Line State of Ring Indicator
                    ri: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [7:7] Line State of Data Carrier Detect
                    dcd: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500c18));

                /// UART Scratch Register
                pub const SCH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    scratch: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500c1c));

                /// UART Status Register
                pub const USR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] UART Busy Bit
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1] TX FIFO Not Full
                    tfnf: enum(u1) {
                        ///
                        full = 0,

                        ///
                        not_full = 1,
                    } = .full,

                    /// [2:2] TX FIFO Empty
                    tfe: enum(u1) {
                        ///
                        not_empty = 0,

                        ///
                        empty = 1,
                    } = .not_empty,

                    /// [3:3] RX FIFO Not Empty
                    rfne: enum(u1) {
                        ///
                        empty = 0,

                        ///
                        not_empty = 1,
                    } = .empty,

                    /// [4:4] RX FIFO Full
                    rff: enum(u1) {
                        ///
                        not_full = 0,

                        ///
                        full = 1,
                    } = .not_full,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x2500c7c));

                /// UART Transmit FIFO Level Register
                pub const TFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] TX FIFO Level
                    tfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2500c80));

                /// UART Receive FIFO Level Register
                pub const RFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] RX FIFO Level
                    rfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2500c84));

                /// UART DMA Handshake Configuration Register
                pub const HSK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Handshake configuration
                    hsk: enum(u8) {
                        ///
                        wait_cycle = 0xA5,

                        ///
                        handshake = 0xE5,
                    } = .wait_cycle,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500c88));

                /// UART DMA Request Enable Register
                pub const DMA_REQ_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] DMA RX REQ Enable
                    rx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] DMA TX REQ Enable
                    tx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] DMA Timeout Enable
                    timeout_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:31]
                    res0: u29 = 0,
                }), @ptrFromInt(0x2500c8c));

                /// UART Halt TX Register
                pub const HALT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    halt_tx: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [1:1]
                    chcfg_at_busy: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    change_update: enum(u1) {
                        ///
                        finished = 0,

                        ///
                        update_trigger = 1,
                    } = .finished,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] SIR TX Pulse Polarity Invert
                    sir_tx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [5:5] SIR RX Pulse Polarity Invert
                    sir_rx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [6:6] The Transmission of RX_DRQ
                    dma_pte_rx: u1 = 0,

                    /// [7:7] The sending of TX_REQ
                    pte: u1 = 0,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2500ca4));

                /// UART Debug DLL Register
                pub const DBG_DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLL: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500cb0));

                /// UART Debug DLH Register
                pub const DBG_DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLH: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2500cb4));

                /// UART FIFO Clock Control Register
                pub const FCC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    rx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1]
                    tx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    rx_fifo_clock_mode: enum(u1) {
                        /// Sync mode, writing/reading clocks use apb clock
                        wr_apb = 0,

                        /// Sync mode, writing clock uses apb clock, reading clock uses ahb clock
                        w_apb_r_ahb = 1,
                    } = .wr_apb,

                    /// [3:7]
                    res0: u5 = 0,

                    /// [8:31]
                    fifo_depth: u24 = 0,
                }), @ptrFromInt(0x2500cf0));

                /// UART RXDMA Control Register
                pub const RXDMA_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    enable: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [1:1]
                    mode: enum(u1) {
                        ///
                        Continous = 0,

                        ///
                        Limited = 1,
                    } = .Continous,

                    /// [2:3]
                    blk_size: enum(u2) {
                        ///
                        B8 = 0b00,

                        ///
                        B16 = 0b01,

                        ///
                        B32 = 0b10,

                        ///
                        B64 = 0b11,
                    } = .B8,

                    /// [4:5] Set for AHB port burst supported
                    ahb_burst_mode: enum(u2) {
                        ///
                        SINGLE = 0b00,

                        ///
                        INCR4 = 0b01,

                        ///
                        INCR8 = 0b10,

                        ///
                        INCR16 = 0b11,
                    } = .SINGLE,

                    /// [6:6] RXDMA Timeout Enable
                    timeout_enable: u1 = 0,

                    /// [7:7]
                    res0: u1 = 0,

                    /// [8:23] RXDMA Timeout Threshold\n\nUnit is 1 UART bit time
                    timeout_threshold: u16 = 0,

                    /// [24:31]
                    res1: u8 = 0,
                }), @ptrFromInt(0x2500d00));

                /// UART RXDMA Start Register
                pub const RXDMA_STR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    start: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x2500d04));

                /// UART RXDMA Status Register
                pub const RXDMA_STA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1]
                    buffer_read_address_updating: enum(u1) {
                        ///
                        ready = 0,

                        ///
                        busy = 1,
                    } = .ready,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500d08));

                /// UART RXDMA Limit Register
                pub const RXDMA_LMT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    limit_size: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2500d0c));

                /// UART RXDMA Buffer Start Address Low Register
                pub const RXDMA_SADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500d10));

                /// UART RXDMA Buffer Start Address High Register
                pub const RXDMA_SADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Buffer Start Address [33:32]
                    saddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500d14));

                /// UART RXDMA Buffer Length Register
                pub const RXDMA_BL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    buffer_length: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2500d18));

                /// UART RXDMA Interrupt Enable Register
                pub const RXDMA_IE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2500d20));

                /// UART RXDMA Interrupt Status Register
                pub const RXDMA_IS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2500d24));

                /// UART RXDMA Write Address Low Register
                pub const RXDMA_WADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500d28));

                /// UART RXDMA Write Address High Register
                pub const RXDMA_WADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Write Address [33:32]
                    waddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500d2c));

                /// UART RXDMA Read Address Low Register
                pub const RXDMA_RADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2500d30));

                /// UART RXDMA Read Address High Register
                pub const RXDMA_RADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Read Address [33:32]
                    raddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2500d34));

                /// UART RXDMA Data Count Register
                pub const RXDMA_DCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    data_count: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2500d38));
            };

            /// Universal Asynchronous Receiver Transmitter
            pub const UART4 = struct {
                /// UART Receive Buffer Register
                pub const RBR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    rbr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501000));

                /// UART Transmit Holding Register
                pub const THR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    thr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501000));

                /// UART Divisor Latch Low Register
                pub const DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dll: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501000));

                /// UART Divisor Latch High Register
                pub const DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dlh: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501004));

                /// UART Interrupt Enable Register
                pub const IER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Enable Received Data Available Interrupt
                    erbfi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] Enable Transmit Holding Register Empty Interrupt
                    etbei: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] Enable Receiver Line Status Interrupt
                    elsi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] Enable Modem Status Interrupt
                    edssi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] RS485 Interrupt Enable
                    rs485_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:6]
                    res0: u2 = 0,

                    /// [7:7] Programmable THRE Interrupt Mode Enable
                    ptime: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2501004));

                /// UART Interrupt Identity Register
                pub const IIR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Interrupt ID
                    iid: enum(u4) {
                        ///
                        modem_status = 0b0000,

                        ///
                        no_interrupt_pending = 0b0001,

                        ///
                        thr_empty = 0b0010,

                        ///
                        rs485_interrupt = 0b0011,

                        ///
                        received_data_available = 0b0100,

                        ///
                        receiver_line_status = 0b0110,

                        ///
                        busy_detect = 0b0111,

                        ///
                        character_timeout = 0b1100,
                    } = .modem_status,

                    /// [4:5]
                    res0: u2 = 0,

                    /// [6:7] FIFOs Enable Flag
                    feflag: enum(u2) {
                        ///
                        disable = 0b00,

                        ///
                        enable = 0b11,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2501008));

                /// UART FIFO Control Register
                pub const FCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    fifoe: u1 = 0,

                    /// [1:1]
                    rfifor: u1 = 0,

                    /// [2:2]
                    xfifor: u1 = 0,

                    /// [3:3]
                    dmam: enum(u1) {
                        ///
                        mode_0 = 0,

                        ///
                        mode_1 = 1,
                    } = .mode_0,

                    /// [4:5]
                    tft: enum(u2) {
                        ///
                        empty = 0b00,

                        ///
                        two_characters = 0b01,

                        ///
                        quarter_full = 0b10,

                        ///
                        half_full = 0b11,
                    } = .empty,

                    /// [6:7]
                    rt: enum(u2) {
                        ///
                        one_character = 0b00,

                        ///
                        quarter_full = 0b01,

                        ///
                        half_full = 0b10,

                        ///
                        two_less_than_full = 0b11,
                    } = .one_character,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501008));

                /// UART Line Control Register
                pub const LCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Data Length Select
                    dls: enum(u2) {
                        /// 5 bits
                        five = 0b00,

                        /// 6 bits
                        six = 0b01,

                        /// 7 bits
                        seven = 0b10,

                        /// 8 bits
                        eight = 0b11,
                    } = .five,

                    /// [2:2] Number of stop bits
                    stop: enum(u1) {
                        /// 1 stop bit
                        one = 0,

                        /// 1.5 stop bits when DLS(LCR[1:0]) is zero, else 2 stop bits
                        two = 1,
                    } = .one,

                    /// [3:3] Parity Enable
                    pen: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [4:5] Even Parity Select
                    eps: enum(u2) {
                        ///
                        odd = 0,

                        ///
                        even = 1,

                        ///
                        rs485_data = 0b10,

                        ///
                        rs485_addr = 0b11,
                    } = .odd,

                    /// [6:6] Break Control Bit
                    bc: u1 = 0,

                    /// [7:7] Divisor Latch Access Bit
                    dlab: enum(u1) {
                        ///
                        rx_buffer = 0,

                        ///
                        divisor_latch = 1,
                    } = .rx_buffer,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x250100c));

                /// UART Modem Control Register
                pub const MCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Terminal Ready
                    dtr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [1:1] Request to Send
                    rts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:4] Loop Back Mode
                    loop: enum(u1) {
                        ///
                        normal = 0,

                        ///
                        loop_back = 1,
                    } = .normal,

                    /// [5:5] Auto Flow Control Enable
                    afce: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [6:7] UART Function: Select IrDA or RS485
                    function: enum(u2) {
                        ///
                        UART = 0b00,

                        ///
                        IrDA_SIR = 0b01,

                        ///
                        RS485 = 0b10,

                        ///
                        reserved = 0b11,
                    } = .UART,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2501010));

                /// UART Line Status Register
                pub const LSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Ready
                    dr: enum(u1) {
                        ///
                        ready = 1,
                    } = .ready,

                    /// [1:1] Overrun Error
                    oe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [2:2] Parity Error
                    pe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [3:3] Framing Error
                    fe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [4:4] Break Interrupt
                    bi: u1 = 0,

                    /// [5:5] TX Holding Register Empty
                    thre: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [6:6] Transmitter Empty
                    temt: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [7:7] RX Data Error in FIFO
                    fifoerr: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501014));

                /// UART Modem Status Register
                pub const MSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Delta Clear to Send
                    dcts: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [1:1] Delta Data Set Ready
                    ddsr: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [2:2] Trailing Edge Ring Indicator
                    teri: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [3:3] Delta Data Carrier Detect
                    ddcd: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [4:4] Line State of Clear To Send
                    cts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [5:5] Line State of Data Set Ready
                    dsr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [6:6] Line State of Ring Indicator
                    ri: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [7:7] Line State of Data Carrier Detect
                    dcd: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501018));

                /// UART Scratch Register
                pub const SCH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    scratch: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x250101c));

                /// UART Status Register
                pub const USR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] UART Busy Bit
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1] TX FIFO Not Full
                    tfnf: enum(u1) {
                        ///
                        full = 0,

                        ///
                        not_full = 1,
                    } = .full,

                    /// [2:2] TX FIFO Empty
                    tfe: enum(u1) {
                        ///
                        not_empty = 0,

                        ///
                        empty = 1,
                    } = .not_empty,

                    /// [3:3] RX FIFO Not Empty
                    rfne: enum(u1) {
                        ///
                        empty = 0,

                        ///
                        not_empty = 1,
                    } = .empty,

                    /// [4:4] RX FIFO Full
                    rff: enum(u1) {
                        ///
                        not_full = 0,

                        ///
                        full = 1,
                    } = .not_full,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x250107c));

                /// UART Transmit FIFO Level Register
                pub const TFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] TX FIFO Level
                    tfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2501080));

                /// UART Receive FIFO Level Register
                pub const RFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] RX FIFO Level
                    rfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2501084));

                /// UART DMA Handshake Configuration Register
                pub const HSK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Handshake configuration
                    hsk: enum(u8) {
                        ///
                        wait_cycle = 0xA5,

                        ///
                        handshake = 0xE5,
                    } = .wait_cycle,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501088));

                /// UART DMA Request Enable Register
                pub const DMA_REQ_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] DMA RX REQ Enable
                    rx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] DMA TX REQ Enable
                    tx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] DMA Timeout Enable
                    timeout_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:31]
                    res0: u29 = 0,
                }), @ptrFromInt(0x250108c));

                /// UART Halt TX Register
                pub const HALT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    halt_tx: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [1:1]
                    chcfg_at_busy: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    change_update: enum(u1) {
                        ///
                        finished = 0,

                        ///
                        update_trigger = 1,
                    } = .finished,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] SIR TX Pulse Polarity Invert
                    sir_tx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [5:5] SIR RX Pulse Polarity Invert
                    sir_rx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [6:6] The Transmission of RX_DRQ
                    dma_pte_rx: u1 = 0,

                    /// [7:7] The sending of TX_REQ
                    pte: u1 = 0,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x25010a4));

                /// UART Debug DLL Register
                pub const DBG_DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLL: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x25010b0));

                /// UART Debug DLH Register
                pub const DBG_DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLH: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x25010b4));

                /// UART FIFO Clock Control Register
                pub const FCC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    rx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1]
                    tx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    rx_fifo_clock_mode: enum(u1) {
                        /// Sync mode, writing/reading clocks use apb clock
                        wr_apb = 0,

                        /// Sync mode, writing clock uses apb clock, reading clock uses ahb clock
                        w_apb_r_ahb = 1,
                    } = .wr_apb,

                    /// [3:7]
                    res0: u5 = 0,

                    /// [8:31]
                    fifo_depth: u24 = 0,
                }), @ptrFromInt(0x25010f0));

                /// UART RXDMA Control Register
                pub const RXDMA_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    enable: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [1:1]
                    mode: enum(u1) {
                        ///
                        Continous = 0,

                        ///
                        Limited = 1,
                    } = .Continous,

                    /// [2:3]
                    blk_size: enum(u2) {
                        ///
                        B8 = 0b00,

                        ///
                        B16 = 0b01,

                        ///
                        B32 = 0b10,

                        ///
                        B64 = 0b11,
                    } = .B8,

                    /// [4:5] Set for AHB port burst supported
                    ahb_burst_mode: enum(u2) {
                        ///
                        SINGLE = 0b00,

                        ///
                        INCR4 = 0b01,

                        ///
                        INCR8 = 0b10,

                        ///
                        INCR16 = 0b11,
                    } = .SINGLE,

                    /// [6:6] RXDMA Timeout Enable
                    timeout_enable: u1 = 0,

                    /// [7:7]
                    res0: u1 = 0,

                    /// [8:23] RXDMA Timeout Threshold\n\nUnit is 1 UART bit time
                    timeout_threshold: u16 = 0,

                    /// [24:31]
                    res1: u8 = 0,
                }), @ptrFromInt(0x2501100));

                /// UART RXDMA Start Register
                pub const RXDMA_STR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    start: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x2501104));

                /// UART RXDMA Status Register
                pub const RXDMA_STA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1]
                    buffer_read_address_updating: enum(u1) {
                        ///
                        ready = 0,

                        ///
                        busy = 1,
                    } = .ready,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2501108));

                /// UART RXDMA Limit Register
                pub const RXDMA_LMT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    limit_size: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x250110c));

                /// UART RXDMA Buffer Start Address Low Register
                pub const RXDMA_SADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2501110));

                /// UART RXDMA Buffer Start Address High Register
                pub const RXDMA_SADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Buffer Start Address [33:32]
                    saddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2501114));

                /// UART RXDMA Buffer Length Register
                pub const RXDMA_BL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    buffer_length: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2501118));

                /// UART RXDMA Interrupt Enable Register
                pub const RXDMA_IE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2501120));

                /// UART RXDMA Interrupt Status Register
                pub const RXDMA_IS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2501124));

                /// UART RXDMA Write Address Low Register
                pub const RXDMA_WADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2501128));

                /// UART RXDMA Write Address High Register
                pub const RXDMA_WADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Write Address [33:32]
                    waddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x250112c));

                /// UART RXDMA Read Address Low Register
                pub const RXDMA_RADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2501130));

                /// UART RXDMA Read Address High Register
                pub const RXDMA_RADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Read Address [33:32]
                    raddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2501134));

                /// UART RXDMA Data Count Register
                pub const RXDMA_DCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    data_count: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2501138));
            };

            /// Universal Asynchronous Receiver Transmitter
            pub const UART5 = struct {
                /// UART Receive Buffer Register
                pub const RBR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    rbr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501400));

                /// UART Transmit Holding Register
                pub const THR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    thr: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501400));

                /// UART Divisor Latch Low Register
                pub const DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dll: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501400));

                /// UART Divisor Latch High Register
                pub const DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    dlh: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501404));

                /// UART Interrupt Enable Register
                pub const IER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Enable Received Data Available Interrupt
                    erbfi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] Enable Transmit Holding Register Empty Interrupt
                    etbei: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] Enable Receiver Line Status Interrupt
                    elsi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] Enable Modem Status Interrupt
                    edssi: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] RS485 Interrupt Enable
                    rs485_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:6]
                    res0: u2 = 0,

                    /// [7:7] Programmable THRE Interrupt Mode Enable
                    ptime: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2501404));

                /// UART Interrupt Identity Register
                pub const IIR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] Interrupt ID
                    iid: enum(u4) {
                        ///
                        modem_status = 0b0000,

                        ///
                        no_interrupt_pending = 0b0001,

                        ///
                        thr_empty = 0b0010,

                        ///
                        rs485_interrupt = 0b0011,

                        ///
                        received_data_available = 0b0100,

                        ///
                        receiver_line_status = 0b0110,

                        ///
                        busy_detect = 0b0111,

                        ///
                        character_timeout = 0b1100,
                    } = .modem_status,

                    /// [4:5]
                    res0: u2 = 0,

                    /// [6:7] FIFOs Enable Flag
                    feflag: enum(u2) {
                        ///
                        disable = 0b00,

                        ///
                        enable = 0b11,
                    } = .disable,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2501408));

                /// UART FIFO Control Register
                pub const FCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    fifoe: u1 = 0,

                    /// [1:1]
                    rfifor: u1 = 0,

                    /// [2:2]
                    xfifor: u1 = 0,

                    /// [3:3]
                    dmam: enum(u1) {
                        ///
                        mode_0 = 0,

                        ///
                        mode_1 = 1,
                    } = .mode_0,

                    /// [4:5]
                    tft: enum(u2) {
                        ///
                        empty = 0b00,

                        ///
                        two_characters = 0b01,

                        ///
                        quarter_full = 0b10,

                        ///
                        half_full = 0b11,
                    } = .empty,

                    /// [6:7]
                    rt: enum(u2) {
                        ///
                        one_character = 0b00,

                        ///
                        quarter_full = 0b01,

                        ///
                        half_full = 0b10,

                        ///
                        two_less_than_full = 0b11,
                    } = .one_character,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501408));

                /// UART Line Control Register
                pub const LCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Data Length Select
                    dls: enum(u2) {
                        /// 5 bits
                        five = 0b00,

                        /// 6 bits
                        six = 0b01,

                        /// 7 bits
                        seven = 0b10,

                        /// 8 bits
                        eight = 0b11,
                    } = .five,

                    /// [2:2] Number of stop bits
                    stop: enum(u1) {
                        /// 1 stop bit
                        one = 0,

                        /// 1.5 stop bits when DLS(LCR[1:0]) is zero, else 2 stop bits
                        two = 1,
                    } = .one,

                    /// [3:3] Parity Enable
                    pen: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [4:5] Even Parity Select
                    eps: enum(u2) {
                        ///
                        odd = 0,

                        ///
                        even = 1,

                        ///
                        rs485_data = 0b10,

                        ///
                        rs485_addr = 0b11,
                    } = .odd,

                    /// [6:6] Break Control Bit
                    bc: u1 = 0,

                    /// [7:7] Divisor Latch Access Bit
                    dlab: enum(u1) {
                        ///
                        rx_buffer = 0,

                        ///
                        divisor_latch = 1,
                    } = .rx_buffer,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x250140c));

                /// UART Modem Control Register
                pub const MCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Terminal Ready
                    dtr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [1:1] Request to Send
                    rts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:4] Loop Back Mode
                    loop: enum(u1) {
                        ///
                        normal = 0,

                        ///
                        loop_back = 1,
                    } = .normal,

                    /// [5:5] Auto Flow Control Enable
                    afce: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [6:7] UART Function: Select IrDA or RS485
                    function: enum(u2) {
                        ///
                        UART = 0b00,

                        ///
                        IrDA_SIR = 0b01,

                        ///
                        RS485 = 0b10,

                        ///
                        reserved = 0b11,
                    } = .UART,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x2501410));

                /// UART Line Status Register
                pub const LSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Data Ready
                    dr: enum(u1) {
                        ///
                        ready = 1,
                    } = .ready,

                    /// [1:1] Overrun Error
                    oe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [2:2] Parity Error
                    pe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [3:3] Framing Error
                    fe: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [4:4] Break Interrupt
                    bi: u1 = 0,

                    /// [5:5] TX Holding Register Empty
                    thre: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [6:6] Transmitter Empty
                    temt: enum(u1) {
                        ///
                        empty = 1,
                    } = .empty,

                    /// [7:7] RX Data Error in FIFO
                    fifoerr: enum(u1) {
                        ///
                        @"error" = 1,
                    } = .@"error",

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501414));

                /// UART Modem Status Register
                pub const MSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Delta Clear to Send
                    dcts: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [1:1] Delta Data Set Ready
                    ddsr: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [2:2] Trailing Edge Ring Indicator
                    teri: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [3:3] Delta Data Carrier Detect
                    ddcd: enum(u1) {
                        ///
                        no_change = 0,

                        ///
                        change = 1,
                    } = .no_change,

                    /// [4:4] Line State of Clear To Send
                    cts: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [5:5] Line State of Data Set Ready
                    dsr: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [6:6] Line State of Ring Indicator
                    ri: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [7:7] Line State of Data Carrier Detect
                    dcd: enum(u1) {
                        ///
                        deasserted = 0,

                        ///
                        asserted = 1,
                    } = .deasserted,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501418));

                /// UART Scratch Register
                pub const SCH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    scratch: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x250141c));

                /// UART Status Register
                pub const USR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] UART Busy Bit
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1] TX FIFO Not Full
                    tfnf: enum(u1) {
                        ///
                        full = 0,

                        ///
                        not_full = 1,
                    } = .full,

                    /// [2:2] TX FIFO Empty
                    tfe: enum(u1) {
                        ///
                        not_empty = 0,

                        ///
                        empty = 1,
                    } = .not_empty,

                    /// [3:3] RX FIFO Not Empty
                    rfne: enum(u1) {
                        ///
                        empty = 0,

                        ///
                        not_empty = 1,
                    } = .empty,

                    /// [4:4] RX FIFO Full
                    rff: enum(u1) {
                        ///
                        not_full = 0,

                        ///
                        full = 1,
                    } = .not_full,

                    /// [5:31]
                    res0: u27 = 0,
                }), @ptrFromInt(0x250147c));

                /// UART Transmit FIFO Level Register
                pub const TFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] TX FIFO Level
                    tfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2501480));

                /// UART Receive FIFO Level Register
                pub const RFL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:8] RX FIFO Level
                    rfl: u9 = 0,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2501484));

                /// UART DMA Handshake Configuration Register
                pub const HSK = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Handshake configuration
                    hsk: enum(u8) {
                        ///
                        wait_cycle = 0xA5,

                        ///
                        handshake = 0xE5,
                    } = .wait_cycle,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2501488));

                /// UART DMA Request Enable Register
                pub const DMA_REQ_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] DMA RX REQ Enable
                    rx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] DMA TX REQ Enable
                    tx_req_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] DMA Timeout Enable
                    timeout_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:31]
                    res0: u29 = 0,
                }), @ptrFromInt(0x250148c));

                /// UART Halt TX Register
                pub const HALT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    halt_tx: enum(u1) {
                        ///
                        disabled = 0,

                        ///
                        enabled = 1,
                    } = .disabled,

                    /// [1:1]
                    chcfg_at_busy: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    change_update: enum(u1) {
                        ///
                        finished = 0,

                        ///
                        update_trigger = 1,
                    } = .finished,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] SIR TX Pulse Polarity Invert
                    sir_tx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [5:5] SIR RX Pulse Polarity Invert
                    sir_rx_invert: enum(u1) {
                        ///
                        not_invert = 0,

                        ///
                        invert = 1,
                    } = .not_invert,

                    /// [6:6] The Transmission of RX_DRQ
                    dma_pte_rx: u1 = 0,

                    /// [7:7] The sending of TX_REQ
                    pte: u1 = 0,

                    /// [8:31]
                    res1: u24 = 0,
                }), @ptrFromInt(0x25014a4));

                /// UART Debug DLL Register
                pub const DBG_DLL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLL: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x25014b0));

                /// UART Debug DLH Register
                pub const DBG_DLH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    DBG_DLH: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x25014b4));

                /// UART FIFO Clock Control Register
                pub const FCC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    rx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1]
                    tx_fifo_clock_enable: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2]
                    rx_fifo_clock_mode: enum(u1) {
                        /// Sync mode, writing/reading clocks use apb clock
                        wr_apb = 0,

                        /// Sync mode, writing clock uses apb clock, reading clock uses ahb clock
                        w_apb_r_ahb = 1,
                    } = .wr_apb,

                    /// [3:7]
                    res0: u5 = 0,

                    /// [8:31]
                    fifo_depth: u24 = 0,
                }), @ptrFromInt(0x25014f0));

                /// UART RXDMA Control Register
                pub const RXDMA_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    enable: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [1:1]
                    mode: enum(u1) {
                        ///
                        Continous = 0,

                        ///
                        Limited = 1,
                    } = .Continous,

                    /// [2:3]
                    blk_size: enum(u2) {
                        ///
                        B8 = 0b00,

                        ///
                        B16 = 0b01,

                        ///
                        B32 = 0b10,

                        ///
                        B64 = 0b11,
                    } = .B8,

                    /// [4:5] Set for AHB port burst supported
                    ahb_burst_mode: enum(u2) {
                        ///
                        SINGLE = 0b00,

                        ///
                        INCR4 = 0b01,

                        ///
                        INCR8 = 0b10,

                        ///
                        INCR16 = 0b11,
                    } = .SINGLE,

                    /// [6:6] RXDMA Timeout Enable
                    timeout_enable: u1 = 0,

                    /// [7:7]
                    res0: u1 = 0,

                    /// [8:23] RXDMA Timeout Threshold\n\nUnit is 1 UART bit time
                    timeout_threshold: u16 = 0,

                    /// [24:31]
                    res1: u8 = 0,
                }), @ptrFromInt(0x2501500));

                /// UART RXDMA Start Register
                pub const RXDMA_STR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    start: u1 = 0,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x2501504));

                /// UART RXDMA Status Register
                pub const RXDMA_STA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    busy: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        busy = 1,
                    } = .idle,

                    /// [1:1]
                    buffer_read_address_updating: enum(u1) {
                        ///
                        ready = 0,

                        ///
                        busy = 1,
                    } = .ready,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2501508));

                /// UART RXDMA Limit Register
                pub const RXDMA_LMT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    limit_size: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x250150c));

                /// UART RXDMA Buffer Start Address Low Register
                pub const RXDMA_SADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2501510));

                /// UART RXDMA Buffer Start Address High Register
                pub const RXDMA_SADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Buffer Start Address [33:32]
                    saddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2501514));

                /// UART RXDMA Buffer Length Register
                pub const RXDMA_BL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    buffer_length: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2501518));

                /// UART RXDMA Interrupt Enable Register
                pub const RXDMA_IE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2501520));

                /// UART RXDMA Interrupt Status Register
                pub const RXDMA_IS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    limit_done: u1 = 0,

                    /// [1:1]
                    blk_done: u1 = 0,

                    /// [2:2]
                    timeout_done: u1 = 0,

                    /// [3:3]
                    buffer_overrun: u1 = 0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x2501524));

                /// UART RXDMA Write Address Low Register
                pub const RXDMA_WADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2501528));

                /// UART RXDMA Write Address High Register
                pub const RXDMA_WADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Write Address [33:32]
                    waddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x250152c));

                /// UART RXDMA Read Address Low Register
                pub const RXDMA_RADDRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2501530));

                /// UART RXDMA Read Address High Register
                pub const RXDMA_RADDRH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] RXDMA Current Read Address [33:32]
                    raddr: u2 = 0,

                    /// [2:31]
                    res0: u30 = 0,
                }), @ptrFromInt(0x2501534));

                /// UART RXDMA Data Count Register
                pub const RXDMA_DCNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    data_count: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2501538));
            };

            /// Serial Peripheral Interface
            pub const SPI0 = struct {
                /// SPI Global Control Register
                pub const SPI_GCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] SPI Module Enable Control
                    en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] SPI Function Mode Select
                    mode: enum(u1) {
                        ///
                        slave = 0,

                        ///
                        master = 1,
                    } = .slave,

                    /// [2:2] Sample timing Mode Select
                    mode_selec: enum(u1) {
                        /// Old mode of Sample Timing
                        old_mode = 0,

                        /// New mode of Sample Timing
                        new_mode = 1,
                    } = .old_mode,

                    /// [3:6]
                    res0: u4 = 0,

                    /// [7:7] Transmit Pause Enable
                    tp_en: enum(u1) {
                        /// normal operation, ignore RXFIFO status
                        normal = 0,

                        /// Stop transmit data when RXFIFO full
                        stop_when_full = 1,
                    } = .normal,

                    /// [8:30]
                    res1: u23 = 0,

                    /// [31:31] Soft reset
                    srst: u1 = 0,
                }), @ptrFromInt(0x4025004));

                /// SPI Transfer Control Register
                pub const SPI_TCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] SPI Clock/Data Phase Control
                    cpha: enum(u1) {
                        /// Phase 0 (Leading edge for sample data)
                        P0 = 0,

                        /// Phase 1 (Leading edge for setup data)
                        P1 = 1,
                    } = .P0,

                    /// [1:1] SPI Clock Polarity Control
                    cpol: enum(u1) {
                        /// Active high polarity
                        high = 0,

                        /// Active low polarity
                        low = 1,
                    } = .high,

                    /// [2:2] SPI Chip Select Signal Polarity Control
                    spol: enum(u1) {
                        /// Active high polarity
                        high = 0,

                        /// Active low polarity
                        low = 1,
                    } = .high,

                    /// [3:3]
                    ssctl: enum(u1) {
                        /// SPI_SSx remains asserted between SPI bursts
                        assert = 0,

                        /// Negate SPI_SSx between SPI bursts
                        negate = 1,
                    } = .assert,

                    /// [4:5]
                    ss_sel: enum(u2) {
                        ///
                        ss0 = 0b00,

                        ///
                        ss1 = 0b01,

                        ///
                        ss2 = 0b10,

                        ///
                        ss3 = 0b11,
                    } = .ss0,

                    /// [6:6]
                    ss_owner: enum(u1) {
                        ///
                        spi_controller = 0,

                        ///
                        software = 1,
                    } = .spi_controller,

                    /// [7:7]
                    ss_level: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [8:8] Discard Hash Burst
                    dhb: enum(u1) {
                        /// Receiving all SPI bursts in the BC period
                        receive = 0,

                        /// Discard unused SPI bursts
                        discard = 1,
                    } = .receive,

                    /// [9:9] Dummy Burst Type
                    ddb: enum(u1) {
                        /// The bit value of dummy SPI burst is zero
                        zero = 0,

                        /// The bit value of dummy SPI burst is one
                        one = 1,
                    } = .zero,

                    /// [10:10] Rapids Mode Select
                    rpsm: enum(u1) {
                        /// Normal write mode
                        normal = 0,

                        /// Rapid write mode
                        rapid = 1,
                    } = .normal,

                    /// [11:11] Master Sample Data Control
                    sdc: enum(u1) {
                        /// Normal operation, do not delay the internal read sample point
                        normal = 0,

                        /// Delay the internal read sample point
                        delay = 1,
                    } = .normal,

                    /// [12:12] First Transmit Bit Select
                    fbs: enum(u1) {
                        /// MSB first
                        msb = 0,

                        /// LSB first
                        lsb = 1,
                    } = .msb,

                    /// [13:13] Master Sample Data Mode
                    sdm: enum(u1) {
                        /// delay sample mode
                        delay = 0,

                        /// normal sample mode
                        normal = 1,
                    } = .delay,

                    /// [14:14] Sending Data Delay Mode
                    sddm: enum(u1) {
                        /// normal sending
                        normal = 0,

                        /// delay sending
                        delay = 1,
                    } = .normal,

                    /// [15:15] Master Sample Data Control register1
                    sdc1: enum(u1) {
                        /// normal operation, do not delay the internal read sample point
                        normal = 0,

                        /// delay the internal read sample point
                        delay = 1,
                    } = .normal,

                    /// [16:30]
                    res0: u15 = 0,

                    /// [31:31] Exchange Burst
                    xch: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        initiate_exchange = 1,
                    } = .idle,
                }), @ptrFromInt(0x4025008));

                /// SPI Interrupt Control Register
                pub const SPI_IER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] RXFIFO Ready Request Interrupt Enable
                    rf_rdy_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] RXFIFO Empty Interrupt Enable
                    rf_emp_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] RXFIFO Full Interrupt Enable
                    rf_full_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] TXFIFO Empty Request Interrupt Enable
                    tf_erq_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:5] TXFIFO Empty Interrupt Enable
                    tf_emp_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [6:6] TXFIFO Full Interrupt Enable
                    tf_full_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [7:7]
                    res1: u1 = 0,

                    /// [8:8] RXFIFO Overflow Interrupt Enable
                    rf_ovf_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [9:9] RXFIFO Underrun Interrupt Enable
                    rf_udr_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [10:10] TXFIFO Overflow Interrupt Enable
                    tf_ovf_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [11:11] TXFIFO Underrun Interrupt Enable
                    tf_udr_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [12:12] Transfer Completed Interrupt Enable
                    tc_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [13:13] SSI Interrupt Enable
                    ss_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [14:31]
                    res2: u18 = 0,
                }), @ptrFromInt(0x4025010));

                /// SPI Interrupt Status Register
                pub const SPI_ISR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] RXFIFO Ready
                    rf_rdy: u1 = 0,

                    /// [1:1] RXFIFO Empty
                    rf_emp: enum(u1) {
                        ///
                        not_empty = 0,

                        ///
                        empty = 1,
                    } = .not_empty,

                    /// [2:2] RXFIFO Full
                    rf_full: enum(u1) {
                        ///
                        not_full = 0,

                        ///
                        full = 1,
                    } = .not_full,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] TXFIFO Ready
                    tf_ready: u1 = 0,

                    /// [5:5] TXFIFO Empty
                    tf_emp: enum(u1) {
                        ///
                        not_empty = 0,

                        ///
                        empty = 1,
                    } = .not_empty,

                    /// [6:6] TXFIFO Full
                    tf_full: enum(u1) {
                        ///
                        not_full = 0,

                        ///
                        full = 1,
                    } = .not_full,

                    /// [7:7]
                    res1: u1 = 0,

                    /// [8:8] RXFIFO Overflow
                    rf_ovf: enum(u1) {
                        ///
                        not_overflow = 0,

                        ///
                        overflow = 1,
                    } = .not_overflow,

                    /// [9:9] RXFIFO Underrun
                    rf_udr: enum(u1) {
                        ///
                        not_underrun = 0,

                        ///
                        underrun = 1,
                    } = .not_underrun,

                    /// [10:10] TXFIFO Overflow
                    tf_ovf: enum(u1) {
                        ///
                        not_overflow = 0,

                        ///
                        overflow = 1,
                    } = .not_overflow,

                    /// [11:11] TXFIFO Underrun
                    tf_udr: enum(u1) {
                        ///
                        not_underrun = 0,

                        ///
                        underrun = 1,
                    } = .not_underrun,

                    /// [12:12] Transfer Completed
                    tc: enum(u1) {
                        ///
                        busy = 0,

                        ///
                        transfer_completed = 1,
                    } = .busy,

                    /// [13:13] SS Invalid Enable
                    ssi: u1 = 0,

                    /// [14:31]
                    res2: u18 = 0,
                }), @ptrFromInt(0x4025014));

                /// SPI FIFO Control Register
                pub const SPI_FCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] RXFIFO Ready Request Trigger Level
                    rf_trig_level: u8 = 0,

                    /// [8:8] RXFIFO DMA Request Enable
                    rf_drq_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [9:13]
                    res0: u5 = 0,

                    /// [14:14] RXFIFO Test Mode Enable
                    rf_test_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [15:15] RXFIFO Reset
                    rf_rst: u1 = 0,

                    /// [16:23] TXFIFO Empty Request Trigger Level
                    tf_trig_level: u8 = 0,

                    /// [24:24] TXFIFO DMA Request Enable
                    tf_drq_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:29]
                    res1: u5 = 0,

                    /// [30:30] TXFIFO Test Mode Enable
                    tf_test_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [31:31] TXFIFO Reset
                    tf_rst: u1 = 0,
                }), @ptrFromInt(0x4025018));

                /// SPI FIFO Status Register
                pub const SPI_FSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] RXFIFO Counter\n\nThese bits indicate the number of bytes in RXFIFO
                    rf_cnt: u8 = 0,

                    /// [8:11]
                    res0: u4 = 0,

                    /// [12:14] RXFIFO Write Buffer Counter
                    rb_cnt: u3 = 0,

                    /// [15:15] RXFIFO Write Buffer Write Enable
                    rb_wr: u1 = 0,

                    /// [16:23] TXFIFO Counter\n\nThese bits indicate the number of bytes in TXFIFO
                    tf_cnt: u8 = 0,

                    /// [24:27]
                    res1: u4 = 0,

                    /// [28:30] TXFIFO Write Buffer Counter
                    tb_cnt: u3 = 0,

                    /// [31:31] TXFIFO Write Buffer Write Enable
                    tb_wr: u1 = 0,
                }), @ptrFromInt(0x402501c));

                /// SPI Wait Clock Register
                pub const SPI_WCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15] Wait clock counter
                    wwc: u16 = 0,

                    /// [16:19] Dual mode direction switch wait clock counter
                    swc: u4 = 0,

                    /// [20:31]
                    res0: u12 = 0,
                }), @ptrFromInt(0x4025020));

                /// SPI Sample Delay Control Register
                pub const SPI_SAMP_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] Sample Delay Software
                    samp_dl_sw: u6 = 0,

                    /// [6:6]
                    res0: u1 = 0,

                    /// [7:7] Sample Delay Software Enable
                    samp_dl_sw_en: u1 = 0,

                    /// [8:13] Sample Delay
                    samp_dl: u6 = 0,

                    /// [14:14] Sample Delay Calibration Dont
                    samp_dl_cal_done: u1 = 0,

                    /// [15:15] Sample Delay Calibration Start
                    samp_dl_cal_start: u1 = 0,

                    /// [16:31]
                    res1: u16 = 0,
                }), @ptrFromInt(0x4025028));

                /// SPI Master Burst Counter Register
                pub const SPI_MBC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23] Master Burst Counter
                    mbc: u24 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x4025030));

                /// SPI Master Transmit Counter Register
                pub const SPI_MTC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23] Master Write Transmit Counter
                    mwtc: u24 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x4025034));

                /// SPI Master Burst Control Register
                pub const SPI_BCC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23] Master Single Mode Transmit Counter
                    stc: u24 = 0,

                    /// [24:27] Master Dummy Burst Counter
                    dbc: u4 = 0,

                    /// [28:28] Master Dual Mode RX Enable
                    drm: enum(u1) {
                        ///
                        single = 0,

                        ///
                        dual = 1,
                    } = .single,

                    /// [29:29] Quad Mode Enable
                    quad_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [30:31]
                    res0: u2 = 0,
                }), @ptrFromInt(0x4025038));

                /// SPI Bit-Aligned Transfer Configure Register
                pub const SPI_BATC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Work Mode Select
                    wms: enum(u2) {
                        ///
                        byte_aligned = 0b00,

                        ///
                        reserved = 0b01,

                        ///
                        bit_aligned_3wire = 0b10,

                        ///
                        bit_aligned_standard = 0b11,
                    } = .byte_aligned,

                    /// [2:3] SPI Chip Select
                    ss_sel: enum(u2) {
                        ///
                        SS0 = 0b00,

                        ///
                        SS1 = 0b01,

                        ///
                        SS2 = 0b10,

                        ///
                        SS3 = 0b11,
                    } = .SS0,

                    /// [4:4]
                    res0: u1 = 0,

                    /// [5:5] SPI Chip Select Signal Polarity Control
                    spol: enum(u1) {
                        ///
                        high = 0,

                        ///
                        low = 1,
                    } = .high,

                    /// [6:6] SS Output Owner Select
                    ss_owner: enum(u1) {
                        ///
                        SPI_controller = 0,

                        ///
                        Software = 1,
                    } = .SPI_controller,

                    /// [7:7]
                    ss_level: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [8:13] Configure the length of serial data frame of TX
                    tx_frm_len: u6 = 0,

                    /// [14:15]
                    res1: u2 = 0,

                    /// [16:21] Configure the length of serial data frame of RX
                    rx_frm_len: u6 = 0,

                    /// [22:23]
                    res2: u2 = 0,

                    /// [24:24] Transfer Bits Completed Interrupt Enable
                    tbc_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:25] Transfer Bits Completed
                    tbc: enum(u1) {
                        ///
                        busy = 0,

                        ///
                        completed = 1,
                    } = .busy,

                    /// [26:29]
                    res3: u4 = 0,

                    /// [30:30] Master Sample Standard
                    msms: enum(u1) {
                        ///
                        delay = 0,

                        ///
                        standard = 1,
                    } = .delay,

                    /// [31:31] Transfer Control Enable
                    tce: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        init = 1,
                    } = .idle,
                }), @ptrFromInt(0x4025040));

                /// SPI Bit-Aligned Clock Configuration Register
                pub const SPI_BA_CCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Clock Divide Rate
                    cdr_n: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x4025044));

                /// SPI TX Bit Register\n\nVTB [31:0]: The Value of the Transmit Bits
                pub const SPI_TBR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4025048));

                /// SPI RX Bit Register\n\nVRB [31:0]: The Value of the Receive Bits
                pub const SPI_RBR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402504c));

                /// SPI Normal DMA Mode Control Register
                pub const SPI_NDMA_MODE_CTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    spi_dma_wait: u5 = 0,

                    /// [5:5] SPI NDMA Acknowledge Mode
                    spi_ack_m: enum(u1) {
                        ///
                        ignore = 0,

                        ///
                        after_detect = 1,
                    } = .ignore,

                    /// [6:7] SPI NDMA Active Mode
                    spi_act_m: enum(u2) {
                        ///
                        low = 0b00,

                        ///
                        high = 0b01,

                        ///
                        drq_control = 0b10,

                        ///
                        controller_control = 0b11,
                    } = .low,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x4025088));

                /// SPI TX Data Register\n\nTDATA [31:0]: Transmit Data
                pub const SPI_TXD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4025200));

                /// SPI RX Data Register\n\nRDATA [31:0]: Receive Data
                pub const SPI_RXD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4025300));
            };

            /// Serial Peripheral Interface Display Bus Interface
            pub const SPI_DBI = struct {
                /// SPI Global Control Register
                pub const SPI_GCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] SPI Module Enable Control
                    en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] SPI Function Mode Select
                    mode: enum(u1) {
                        ///
                        slave = 0,

                        ///
                        master = 1,
                    } = .slave,

                    /// [2:2] Sample timing Mode Select
                    mode_selec: enum(u1) {
                        /// Old mode of Sample Timing
                        old_mode = 0,

                        /// New mode of Sample Timing
                        new_mode = 1,
                    } = .old_mode,

                    /// [3:6]
                    res0: u4 = 0,

                    /// [7:7] Transmit Pause Enable
                    tp_en: enum(u1) {
                        /// normal operation, ignore RXFIFO status
                        normal = 0,

                        /// Stop transmit data when RXFIFO full
                        stop_when_full = 1,
                    } = .normal,

                    /// [8:30]
                    res1: u23 = 0,

                    /// [31:31] Soft reset
                    srst: u1 = 0,
                }), @ptrFromInt(0x4026004));

                /// SPI Transfer Control Register
                pub const SPI_TCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] SPI Clock/Data Phase Control
                    cpha: enum(u1) {
                        /// Phase 0 (Leading edge for sample data)
                        P0 = 0,

                        /// Phase 1 (Leading edge for setup data)
                        P1 = 1,
                    } = .P0,

                    /// [1:1] SPI Clock Polarity Control
                    cpol: enum(u1) {
                        /// Active high polarity
                        high = 0,

                        /// Active low polarity
                        low = 1,
                    } = .high,

                    /// [2:2] SPI Chip Select Signal Polarity Control
                    spol: enum(u1) {
                        /// Active high polarity
                        high = 0,

                        /// Active low polarity
                        low = 1,
                    } = .high,

                    /// [3:3]
                    ssctl: enum(u1) {
                        /// SPI_SSx remains asserted between SPI bursts
                        assert = 0,

                        /// Negate SPI_SSx between SPI bursts
                        negate = 1,
                    } = .assert,

                    /// [4:5]
                    ss_sel: enum(u2) {
                        ///
                        ss0 = 0b00,

                        ///
                        ss1 = 0b01,

                        ///
                        ss2 = 0b10,

                        ///
                        ss3 = 0b11,
                    } = .ss0,

                    /// [6:6]
                    ss_owner: enum(u1) {
                        ///
                        spi_controller = 0,

                        ///
                        software = 1,
                    } = .spi_controller,

                    /// [7:7]
                    ss_level: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [8:8] Discard Hash Burst
                    dhb: enum(u1) {
                        /// Receiving all SPI bursts in the BC period
                        receive = 0,

                        /// Discard unused SPI bursts
                        discard = 1,
                    } = .receive,

                    /// [9:9] Dummy Burst Type
                    ddb: enum(u1) {
                        /// The bit value of dummy SPI burst is zero
                        zero = 0,

                        /// The bit value of dummy SPI burst is one
                        one = 1,
                    } = .zero,

                    /// [10:10] Rapids Mode Select
                    rpsm: enum(u1) {
                        /// Normal write mode
                        normal = 0,

                        /// Rapid write mode
                        rapid = 1,
                    } = .normal,

                    /// [11:11] Master Sample Data Control
                    sdc: enum(u1) {
                        /// Normal operation, do not delay the internal read sample point
                        normal = 0,

                        /// Delay the internal read sample point
                        delay = 1,
                    } = .normal,

                    /// [12:12] First Transmit Bit Select
                    fbs: enum(u1) {
                        /// MSB first
                        msb = 0,

                        /// LSB first
                        lsb = 1,
                    } = .msb,

                    /// [13:13] Master Sample Data Mode
                    sdm: enum(u1) {
                        /// delay sample mode
                        delay = 0,

                        /// normal sample mode
                        normal = 1,
                    } = .delay,

                    /// [14:14] Sending Data Delay Mode
                    sddm: enum(u1) {
                        /// normal sending
                        normal = 0,

                        /// delay sending
                        delay = 1,
                    } = .normal,

                    /// [15:15] Master Sample Data Control register1
                    sdc1: enum(u1) {
                        /// normal operation, do not delay the internal read sample point
                        normal = 0,

                        /// delay the internal read sample point
                        delay = 1,
                    } = .normal,

                    /// [16:30]
                    res0: u15 = 0,

                    /// [31:31] Exchange Burst
                    xch: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        initiate_exchange = 1,
                    } = .idle,
                }), @ptrFromInt(0x4026008));

                /// SPI Interrupt Control Register
                pub const SPI_IER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] RXFIFO Ready Request Interrupt Enable
                    rf_rdy_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] RXFIFO Empty Interrupt Enable
                    rf_emp_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] RXFIFO Full Interrupt Enable
                    rf_full_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] TXFIFO Empty Request Interrupt Enable
                    tf_erq_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:5] TXFIFO Empty Interrupt Enable
                    tf_emp_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [6:6] TXFIFO Full Interrupt Enable
                    tf_full_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [7:7]
                    res1: u1 = 0,

                    /// [8:8] RXFIFO Overflow Interrupt Enable
                    rf_ovf_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [9:9] RXFIFO Underrun Interrupt Enable
                    rf_udr_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [10:10] TXFIFO Overflow Interrupt Enable
                    tf_ovf_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [11:11] TXFIFO Underrun Interrupt Enable
                    tf_udr_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [12:12] Transfer Completed Interrupt Enable
                    tc_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [13:13] SSI Interrupt Enable
                    ss_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [14:31]
                    res2: u18 = 0,
                }), @ptrFromInt(0x4026010));

                /// SPI Interrupt Status Register
                pub const SPI_ISR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] RXFIFO Ready
                    rf_rdy: u1 = 0,

                    /// [1:1] RXFIFO Empty
                    rf_emp: enum(u1) {
                        ///
                        not_empty = 0,

                        ///
                        empty = 1,
                    } = .not_empty,

                    /// [2:2] RXFIFO Full
                    rf_full: enum(u1) {
                        ///
                        not_full = 0,

                        ///
                        full = 1,
                    } = .not_full,

                    /// [3:3]
                    res0: u1 = 0,

                    /// [4:4] TXFIFO Ready
                    tf_ready: u1 = 0,

                    /// [5:5] TXFIFO Empty
                    tf_emp: enum(u1) {
                        ///
                        not_empty = 0,

                        ///
                        empty = 1,
                    } = .not_empty,

                    /// [6:6] TXFIFO Full
                    tf_full: enum(u1) {
                        ///
                        not_full = 0,

                        ///
                        full = 1,
                    } = .not_full,

                    /// [7:7]
                    res1: u1 = 0,

                    /// [8:8] RXFIFO Overflow
                    rf_ovf: enum(u1) {
                        ///
                        not_overflow = 0,

                        ///
                        overflow = 1,
                    } = .not_overflow,

                    /// [9:9] RXFIFO Underrun
                    rf_udr: enum(u1) {
                        ///
                        not_underrun = 0,

                        ///
                        underrun = 1,
                    } = .not_underrun,

                    /// [10:10] TXFIFO Overflow
                    tf_ovf: enum(u1) {
                        ///
                        not_overflow = 0,

                        ///
                        overflow = 1,
                    } = .not_overflow,

                    /// [11:11] TXFIFO Underrun
                    tf_udr: enum(u1) {
                        ///
                        not_underrun = 0,

                        ///
                        underrun = 1,
                    } = .not_underrun,

                    /// [12:12] Transfer Completed
                    tc: enum(u1) {
                        ///
                        busy = 0,

                        ///
                        transfer_completed = 1,
                    } = .busy,

                    /// [13:13] SS Invalid Enable
                    ssi: u1 = 0,

                    /// [14:31]
                    res2: u18 = 0,
                }), @ptrFromInt(0x4026014));

                /// SPI FIFO Control Register
                pub const SPI_FCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] RXFIFO Ready Request Trigger Level
                    rf_trig_level: u8 = 0,

                    /// [8:8] RXFIFO DMA Request Enable
                    rf_drq_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [9:13]
                    res0: u5 = 0,

                    /// [14:14] RXFIFO Test Mode Enable
                    rf_test_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [15:15] RXFIFO Reset
                    rf_rst: u1 = 0,

                    /// [16:23] TXFIFO Empty Request Trigger Level
                    tf_trig_level: u8 = 0,

                    /// [24:24] TXFIFO DMA Request Enable
                    tf_drq_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:29]
                    res1: u5 = 0,

                    /// [30:30] TXFIFO Test Mode Enable
                    tf_test_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [31:31] TXFIFO Reset
                    tf_rst: u1 = 0,
                }), @ptrFromInt(0x4026018));

                /// SPI FIFO Status Register
                pub const SPI_FSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] RXFIFO Counter\n\nThese bits indicate the number of bytes in RXFIFO
                    rf_cnt: u8 = 0,

                    /// [8:11]
                    res0: u4 = 0,

                    /// [12:14] RXFIFO Write Buffer Counter
                    rb_cnt: u3 = 0,

                    /// [15:15] RXFIFO Write Buffer Write Enable
                    rb_wr: u1 = 0,

                    /// [16:23] TXFIFO Counter\n\nThese bits indicate the number of bytes in TXFIFO
                    tf_cnt: u8 = 0,

                    /// [24:27]
                    res1: u4 = 0,

                    /// [28:30] TXFIFO Write Buffer Counter
                    tb_cnt: u3 = 0,

                    /// [31:31] TXFIFO Write Buffer Write Enable
                    tb_wr: u1 = 0,
                }), @ptrFromInt(0x402601c));

                /// SPI Wait Clock Register
                pub const SPI_WCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15] Wait clock counter
                    wwc: u16 = 0,

                    /// [16:19] Dual mode direction switch wait clock counter
                    swc: u4 = 0,

                    /// [20:31]
                    res0: u12 = 0,
                }), @ptrFromInt(0x4026020));

                /// SPI Sample Delay Control Register
                pub const SPI_SAMP_DL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5] Sample Delay Software
                    samp_dl_sw: u6 = 0,

                    /// [6:6]
                    res0: u1 = 0,

                    /// [7:7] Sample Delay Software Enable
                    samp_dl_sw_en: u1 = 0,

                    /// [8:13] Sample Delay
                    samp_dl: u6 = 0,

                    /// [14:14] Sample Delay Calibration Dont
                    samp_dl_cal_done: u1 = 0,

                    /// [15:15] Sample Delay Calibration Start
                    samp_dl_cal_start: u1 = 0,

                    /// [16:31]
                    res1: u16 = 0,
                }), @ptrFromInt(0x4026028));

                /// SPI Master Burst Counter Register
                pub const SPI_MBC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23] Master Burst Counter
                    mbc: u24 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x4026030));

                /// SPI Master Transmit Counter Register
                pub const SPI_MTC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23] Master Write Transmit Counter
                    mwtc: u24 = 0,

                    /// [24:31]
                    res0: u8 = 0,
                }), @ptrFromInt(0x4026034));

                /// SPI Master Burst Control Register
                pub const SPI_BCC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:23] Master Single Mode Transmit Counter
                    stc: u24 = 0,

                    /// [24:27] Master Dummy Burst Counter
                    dbc: u4 = 0,

                    /// [28:28] Master Dual Mode RX Enable
                    drm: enum(u1) {
                        ///
                        single = 0,

                        ///
                        dual = 1,
                    } = .single,

                    /// [29:29] Quad Mode Enable
                    quad_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [30:31]
                    res0: u2 = 0,
                }), @ptrFromInt(0x4026038));

                /// SPI Bit-Aligned Transfer Configure Register
                pub const SPI_BATC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] Work Mode Select
                    wms: enum(u2) {
                        ///
                        byte_aligned = 0b00,

                        ///
                        reserved = 0b01,

                        ///
                        bit_aligned_3wire = 0b10,

                        ///
                        bit_aligned_standard = 0b11,
                    } = .byte_aligned,

                    /// [2:3] SPI Chip Select
                    ss_sel: enum(u2) {
                        ///
                        SS0 = 0b00,

                        ///
                        SS1 = 0b01,

                        ///
                        SS2 = 0b10,

                        ///
                        SS3 = 0b11,
                    } = .SS0,

                    /// [4:4]
                    res0: u1 = 0,

                    /// [5:5] SPI Chip Select Signal Polarity Control
                    spol: enum(u1) {
                        ///
                        high = 0,

                        ///
                        low = 1,
                    } = .high,

                    /// [6:6] SS Output Owner Select
                    ss_owner: enum(u1) {
                        ///
                        SPI_controller = 0,

                        ///
                        Software = 1,
                    } = .SPI_controller,

                    /// [7:7]
                    ss_level: enum(u1) {
                        ///
                        low = 0,

                        ///
                        high = 1,
                    } = .low,

                    /// [8:13] Configure the length of serial data frame of TX
                    tx_frm_len: u6 = 0,

                    /// [14:15]
                    res1: u2 = 0,

                    /// [16:21] Configure the length of serial data frame of RX
                    rx_frm_len: u6 = 0,

                    /// [22:23]
                    res2: u2 = 0,

                    /// [24:24] Transfer Bits Completed Interrupt Enable
                    tbc_int_en: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:25] Transfer Bits Completed
                    tbc: enum(u1) {
                        ///
                        busy = 0,

                        ///
                        completed = 1,
                    } = .busy,

                    /// [26:29]
                    res3: u4 = 0,

                    /// [30:30] Master Sample Standard
                    msms: enum(u1) {
                        ///
                        delay = 0,

                        ///
                        standard = 1,
                    } = .delay,

                    /// [31:31] Transfer Control Enable
                    tce: enum(u1) {
                        ///
                        idle = 0,

                        ///
                        init = 1,
                    } = .idle,
                }), @ptrFromInt(0x4026040));

                /// SPI Bit-Aligned Clock Configuration Register
                pub const SPI_BA_CCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Clock Divide Rate
                    cdr_n: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x4026044));

                /// SPI TX Bit Register\n\nVTB [31:0]: The Value of the Transmit Bits
                pub const SPI_TBR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4026048));

                /// SPI RX Bit Register\n\nVRB [31:0]: The Value of the Receive Bits
                pub const SPI_RBR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x402604c));

                /// SPI Normal DMA Mode Control Register
                pub const SPI_NDMA_MODE_CTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    spi_dma_wait: u5 = 0,

                    /// [5:5] SPI NDMA Acknowledge Mode
                    spi_ack_m: enum(u1) {
                        ///
                        ignore = 0,

                        ///
                        after_detect = 1,
                    } = .ignore,

                    /// [6:7] SPI NDMA Active Mode
                    spi_act_m: enum(u2) {
                        ///
                        low = 0b00,

                        ///
                        high = 0b01,

                        ///
                        drq_control = 0b10,

                        ///
                        controller_control = 0b11,
                    } = .low,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x4026088));

                /// DBI Control Register 0
                pub const DBI_CTL_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Video Source Type
                    vi_src_type: enum(u1) {
                        ///
                        rgb32 = 0,

                        ///
                        rgb16 = 1,
                    } = .rgb32,

                    /// [1:1] Element A Position
                    element_a_pos: enum(u1) {
                        ///
                        @"31_24" = 0,

                        ///
                        @"7_0" = 1,
                    } = .@"31_24",

                    /// [2:2] RGB Bit Order
                    rgb_bo: enum(u1) {
                        ///
                        data = 0,

                        ///
                        swap = 1,
                    } = .data,

                    /// [3:3] Dummy Cycle Value
                    dum_val: u1 = 0,

                    /// [4:7] RGB Source Format
                    rgb_src_fmt: enum(u4) {
                        ///
                        RGB = 0b000,

                        ///
                        RBG = 0b001,

                        ///
                        GRB = 0b010,

                        ///
                        GBR = 0b011,

                        ///
                        BRG = 0b100,

                        ///
                        BGR = 0b101,

                        ///
                        GRBG_0 = 0b110,

                        ///
                        GBRG_0 = 0b111,

                        ///
                        GRBG_1 = 0b1000,

                        ///
                        GBRG_1 = 0b1001,
                    } = .RGB,

                    /// [8:10]
                    dbi_interface: enum(u3) {
                        /// 3 Line Interface I
                        L3I1 = 0b000,

                        /// 3 Line Interface II
                        L3I2 = 0b001,

                        /// 4 Line Interface I
                        L4I1 = 0b010,

                        /// 4 Line Interface II
                        L4I2 = 0b011,

                        /// 2 Data Lane Interface
                        D2LI = 0b100,
                    } = .L3I1,

                    /// [11:11]
                    res0: u1 = 0,

                    /// [12:14] Output Data Format
                    dat_fmt: enum(u3) {
                        ///
                        RGB111 = 0b000,

                        ///
                        RGB444 = 0b001,

                        ///
                        RGB565 = 0b010,

                        ///
                        RGB666 = 0b011,

                        ///
                        RGB888 = 0b100,
                    } = .RGB111,

                    /// [15:15] Transmit Mode
                    tran_mod: enum(u1) {
                        ///
                        command_parameter = 0,

                        ///
                        video = 1,
                    } = .command_parameter,

                    /// [16:18] Output RGB Sequence
                    rgb_seq: enum(u3) {
                        ///
                        RGB = 0b000,

                        ///
                        RBG = 0b001,

                        ///
                        GRB = 0b010,

                        ///
                        GBR = 0b011,

                        ///
                        BRG = 0b100,

                        ///
                        BGR = 0b101,
                    } = .RGB,

                    /// [19:19] Output Data Sequence
                    dat_seq: enum(u1) {
                        ///
                        msb = 0,

                        ///
                        lsb = 1,
                    } = .msb,

                    /// [20:30] Write Command Dummy Cycles
                    wcdc: u11 = 0,

                    /// [31:31] Command Type
                    cmdt: enum(u1) {
                        ///
                        write = 0,

                        ///
                        read = 1,
                    } = .write,
                }), @ptrFromInt(0x4026100));

                /// DBI Control Register 1
                pub const DBI_CTL_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7] Read Data Number of Bytes
                    rdbn: u8 = 0,

                    /// [8:15] Read Command Dummy Cycles
                    rcdc: u8 = 0,

                    /// [16:19]
                    res0: u4 = 0,

                    /// [20:20] Bit Order of Read Data
                    rdat_lsb: u1 = 0,

                    /// [21:21] RGB 16 Data Source Select
                    RGB16_data_source_select: u1 = 0,

                    /// [22:22] DCX Data Value
                    dcx_data: u1 = 0,

                    /// [23:23] DBI Clock Output Inverse
                    dbi_clko_inv: u1 = 0,

                    /// [24:24] DBI Output Clock Mode
                    dbi_clko_mod: enum(u1) {
                        ///
                        always_on = 0,

                        ///
                        auto_gating = 1,
                    } = .always_on,

                    /// [25:25] DBI RX Clock Inverse
                    dbi_rxclk_inv: enum(u1) {
                        ///
                        positive = 0,

                        ///
                        negative = 1,
                    } = .positive,

                    /// [26:27] 2 Data Lane RGB666 Format
                    RGB666_FMT: enum(u2) {
                        ///
                        normal = 0b00,

                        ///
                        special_ilitek = 0b01,

                        ///
                        special_new_vision = 0b10,
                    } = .normal,

                    /// [28:28]
                    res1: u1 = 0,

                    /// [29:30] DBI Enable Mode Select
                    dbi_en_mode_sel: enum(u2) {
                        ///
                        DBI = 0b00,

                        ///
                        Software = 0b01,

                        ///
                        Timer = 0b10,

                        ///
                        TE = 0b11,
                    } = .DBI,

                    /// [31:31] DBI Soft Trigger
                    dbi_soft_trg: u1 = 0,
                }), @ptrFromInt(0x4026104));

                /// DBI Control Register 2
                pub const DBI_CTL_2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] TE Enable
                    te_en: u1 = 0,

                    /// [1:1] TE edge trigger select
                    te_trig_sel: u1 = 0,

                    /// [2:2] TE debounce function select
                    te_dbc_sel: u1 = 0,

                    /// [3:4] DBI SDI PIN FUnction Select
                    dbi_sdi_sel: enum(u2) {
                        ///
                        dbi_sdi = 0b00,

                        ///
                        dbi_te = 0b01,

                        ///
                        dbi_dcx = 0b10,
                    } = .dbi_sdi,

                    /// [5:5] DBI DCX PIN Function Select
                    dbi_dcx_sel: u1 = 0,

                    /// [6:6] DBI SDI PIN Output Select
                    dbi_sdq_out_sel: u1 = 0,

                    /// [7:7]
                    res0: u1 = 0,

                    /// [8:14] DBI FIFO Empty Request Trigger Level
                    dbi_trig_level: u7 = 0,

                    /// [15:15] DBI FIFO DMA Request Enable
                    dbi_fifo_drq_en: u1 = 0,

                    /// [16:31]
                    res1: u16 = 0,
                }), @ptrFromInt(0x4026108));

                /// DBI Timer Control Register
                pub const DBI_TIMER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:30]
                    dbi_timer_value: u31 = 0,

                    /// [31:31] DBI Timer Enable
                    dbi_tm_en: enum(u1) {
                        ///
                        enable = 0,

                        ///
                        disable = 1,
                    } = .enable,
                }), @ptrFromInt(0x402610c));

                /// DBI Video Size Configuration Register
                pub const DBI_VIDEO_SZIE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:10]
                    h_size: u11 = 0,

                    /// [11:15]
                    res0: u5 = 0,

                    /// [16:26]
                    v_size: u11 = 0,

                    /// [27:31]
                    res1: u5 = 0,
                }), @ptrFromInt(0x4026110));

                /// DBI Interrupt Register
                pub const DBI_INT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    line_done_int_en: u1 = 0,

                    /// [1:1]
                    fram_done_int_en: u1 = 0,

                    /// [2:2]
                    te_int_en: u1 = 0,

                    /// [3:3]
                    rd_done_int_en: u1 = 0,

                    /// [4:4]
                    timer_int_en: u1 = 0,

                    /// [5:5]
                    dbi_fifo_full_int_en: u1 = 0,

                    /// [6:6]
                    dbi_fifo_empty_int_en: u1 = 0,

                    /// [7:7]
                    res0: u1 = 0,

                    /// [8:8]
                    line_done_int: u1 = 0,

                    /// [9:9]
                    fram_done_int: u1 = 0,

                    /// [10:10]
                    te_int: u1 = 0,

                    /// [11:11]
                    rd_done_int: u1 = 0,

                    /// [12:12]
                    timer_int: u1 = 0,

                    /// [13:13]
                    dbi_fifo_full_int: u1 = 0,

                    /// [14:14]
                    dbi_fifo_empty_int: u1 = 0,

                    /// [15:31]
                    res1: u17 = 0,
                }), @ptrFromInt(0x4026120));

                /// DBI BEBUG 0 Register
                pub const DBI_DEBUG_0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1]
                    mem_cs: u2 = 0,

                    /// [2:3]
                    dbi_txcs: u2 = 0,

                    /// [4:7]
                    sh_cs: u4 = 0,

                    /// [8:11]
                    dbi_rxcs: u4 = 0,

                    /// [12:12]
                    te_val: u1 = 0,

                    /// [13:15]
                    res0: u3 = 0,

                    /// [16:22]
                    dbi_fifo_avail: u7 = 0,

                    /// [23:31]
                    res1: u9 = 0,
                }), @ptrFromInt(0x4026124));

                /// DBI BEBUG 1 Register
                pub const DBI_DEBUG_1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:11]
                    ccnt: u12 = 0,

                    /// [12:15]
                    res0: u4 = 0,

                    /// [16:25]
                    lcnt: u10 = 0,

                    /// [26:31]
                    res1: u6 = 0,
                }), @ptrFromInt(0x4026128));

                /// SPI TX Data Register\n\nTDATA [31:0]: Transmit Data
                pub const SPI_TXD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4026200));

                /// SPI RX Data Register\n\nRDATA [31:0]: Receive Data
                pub const SPI_RXD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4026300));
            };

            /// USB2.0 DRD
            pub const USB0 = struct {};

            /// USB2.0 HOST
            pub const USB1 = struct {
                /// EHCI Capability Register Length Register
                pub const E_CAPLENGTH = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200000));

                /// EHCI Host Interface Version Number Register
                pub const E_HCIVERSION = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200002));

                /// EHCI Host Control Structural Parameter Register
                pub const E_HCSPARAMS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200004));

                /// EHCI Host Control Capability Parameter Register
                pub const E_HCCPARAMS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200008));

                /// EHCI Companion Port Route Description
                pub const E_HCSPPORTROUTE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x420000c));

                /// EHCI USB Command Register
                pub const E_USBCMD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200010));

                /// EHCI USB Status Register
                pub const E_USBSTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200014));

                /// EHCI USB Interrupt Enable Register
                pub const E_USBINTR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200018));

                /// EHCI USB Frame Index Register
                pub const E_FRINDEX = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x420001c));

                /// EHCI 4G Segment Selector Register
                pub const E_CTRLDSSEGMENT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200020));

                /// EHCI Frame List Base Address Register
                pub const E_PERIODICLISTBASE = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200024));

                /// EHCI Next Asynchronous List Address Register
                pub const E_ASYNCLISTADDR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200028));

                /// EHCI Configured Flag Register
                pub const E_CONFIGFLAG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200050));

                /// EHCI Port Status/Control Register
                pub const E_PORTSC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200054));

                /// OHCI Control Register
                pub const O_HcControl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200404));

                /// OHCI Command Status Register
                pub const O_HcCommandStatus = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200408));

                /// OHCI Interrupt Status Register
                pub const O_HcInterruptStatus = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x420040c));

                /// OHCI Interrupt Enable Register
                pub const O_HcInterruptEnable = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200410));

                /// OHCI Interrupt Disable Register
                pub const O_HcInterruptDisable = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200414));

                /// OHCI HCCA Base
                pub const O_HcHCCA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200418));

                /// OHCI Period Current ED Base
                pub const O_HcPeriodCurrentED = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x420041c));

                /// OHCI Control Head ED Base
                pub const O_HcControlHeadED = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200420));

                /// OHCI Control Current ED Base
                pub const O_HcControlCurrentED = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200424));

                /// OHCI Bulk Head ED Base
                pub const O_HcBulkHeadED = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200428));

                /// OHCI Bulk Current ED Base
                pub const O_HcBulkCurrentED = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x420042c));

                /// OHCI Done Head Base
                pub const O_HcDoneHead = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200430));

                /// OHCI Frame Interval Register
                pub const O_HcFmInterval = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200434));

                /// OHCI Frame Remaining Register
                pub const O_HcFmRemaining = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200438));

                /// OHCI Frame Number Register
                pub const O_HcFmNumber = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x420043c));

                /// OHCI Periodic Start Register
                pub const O_HcPerioddicStart = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200440));

                /// OHCI LS Threshold Register
                pub const O_HcLSThreshold = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200444));

                /// OHCI Root Hub Descriptor Register A
                pub const O_HcRhDescriptorA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200448));

                /// OHCI Root Hub Descriptor Register B
                pub const O_HcRhDesriptorB = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x420044c));

                /// OHCI Root Hub Status Register
                pub const O_HcRhStatus = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200450));

                /// OHCI Root Hub Port Status Register
                pub const O_HcRhPortStatus = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200454));

                /// HCI Interface Register
                pub const HCI_Interface = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200800));

                /// HCI Control Register
                pub const HCI_CTRL3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200808));

                /// PHY Control Register
                pub const PHY_Control = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200810));

                /// PHY Status Register
                pub const PHY_STATUS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200824));

                /// HCI SIE Port Disable Control Register
                pub const HCI_SIE_PORT_DISABLE_CONTROL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4200828));
            };

            /// Gerneral Purpose Input/Output
            pub const GPIO = struct {
                /// PB Configure Register 0
                pub const pb_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3]
                    pb0_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        pwm3 = 0b0010,

                        ///
                        ir_tx = 0b0011,

                        ///
                        twi2_sck = 0b0100,

                        ///
                        spi1_wp__dbi_te = 0b0101,

                        ///
                        uart0_tx = 0b0110,

                        ///
                        uart2_tx = 0b0111,

                        ///
                        owa_out = 0b1000,

                        ///
                        reserved = 0b1001,

                        ///
                        pb_eint0 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [4:7]
                    pb1_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        pwm4 = 0b0010,

                        ///
                        i2_s2_dout3 = 0b0011,

                        ///
                        twi2_sda = 0b0100,

                        ///
                        i2_s2_din3 = 0b0101,

                        ///
                        uart0_rx = 0b0110,

                        ///
                        uart2_rx = 0b0111,

                        ///
                        ir_rx = 0b1000,

                        ///
                        reserved = 0b1001,

                        ///
                        pb_eint1 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [8:11]
                    pb2_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        lcd0_d0 = 0b0010,

                        ///
                        i2_s2_dout2 = 0b0011,

                        ///
                        twi0_sda = 0b0100,

                        ///
                        i2_s2_din2 = 0b0101,

                        ///
                        lcd0_d18 = 0b0110,

                        ///
                        uart4_tx = 0b0111,

                        ///
                        reserved = 0b1000,

                        ///
                        reserved = 0b1001,

                        ///
                        pb_eint2 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [12:15]
                    pb3_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        lcd0_d1 = 0b0010,

                        ///
                        i2_s2_dout1 = 0b0011,

                        ///
                        twi0_sck = 0b0100,

                        ///
                        i2_s2_din0 = 0b0101,

                        ///
                        lcd0_d19 = 0b0110,

                        ///
                        uart4_rx = 0b0111,

                        ///
                        reserved = 0b1000,

                        ///
                        reserved = 0b1001,

                        ///
                        pb_eint3 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [16:19]
                    pb4_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        lcd0_d8 = 0b0010,

                        ///
                        i2_s2_dout0 = 0b0011,

                        ///
                        twi1_sck = 0b0100,

                        ///
                        i2_s2_din1 = 0b0101,

                        ///
                        lcd0_d20 = 0b0110,

                        ///
                        uart5_tx = 0b0111,

                        ///
                        reserved = 0b1000,

                        ///
                        reserved = 0b1001,

                        ///
                        pb_eint4 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [20:23]
                    pb5_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        lcd0_d9 = 0b0010,

                        ///
                        i2_s2_bclk = 0b0011,

                        ///
                        twi1_sda = 0b0100,

                        ///
                        pwm0 = 0b0101,

                        ///
                        lcd0_d21 = 0b0110,

                        ///
                        uart5_rx = 0b0111,

                        ///
                        reserved = 0b1000,

                        ///
                        reserved = 0b1001,

                        ///
                        pb_eint5 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [24:27]
                    pb6_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        lcd0_d16 = 0b0010,

                        ///
                        i2_s2_lrck = 0b0011,

                        ///
                        twi3_sck = 0b0100,

                        ///
                        pwm1 = 0b0101,

                        ///
                        lcd0_d22 = 0b0110,

                        ///
                        uart3_tx = 0b0111,

                        ///
                        cpubist0 = 0b1000,

                        ///
                        reserved = 0b1001,

                        ///
                        pb_eint6 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [28:31]
                    pb7_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        lcd0_d17 = 0b0010,

                        ///
                        i2_s2_mclk = 0b0011,

                        ///
                        twi3_sda = 0b0100,

                        ///
                        ir_rx = 0b0101,

                        ///
                        lcd0_d23 = 0b0110,

                        ///
                        uart3_rx = 0b0111,

                        ///
                        cpubist1 = 0b1000,

                        ///
                        reserved = 0b1001,

                        ///
                        pb_eint7 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,
                }), @ptrFromInt(0x2000030));

                /// PB Configure Register 1
                pub const pb_cfg1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3]
                    pb8_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        dmic_data3 = 0b0010,

                        ///
                        pwm5 = 0b0011,

                        ///
                        twi2_sck = 0b0100,

                        ///
                        spi1_hold_dbi_dcx_dbi_wrx = 0b0101,

                        ///
                        uart0_tx = 0b0110,

                        ///
                        uart1_tx = 0b0111,

                        ///
                        reserved0 = 0b1000,

                        ///
                        reserved1 = 0b1001,

                        ///
                        pb_eint8 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [4:7]
                    pb9_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        dmic_data2 = 0b0010,

                        ///
                        pwm6 = 0b0011,

                        ///
                        twi2_sda = 0b0100,

                        ///
                        spi1_miso__dbi_sdi__dbi_te__dbi_dcx = 0b0101,

                        ///
                        uart0_rx = 0b0110,

                        ///
                        uart1_rx = 0b0111,

                        ///
                        reserved0 = 0b1000,

                        ///
                        reserved1 = 0b1001,

                        ///
                        pb_eint9 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [8:11]
                    pb10_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        dmic_data1 = 0b0010,

                        ///
                        pwm7 = 0b0011,

                        ///
                        twi0_sck = 0b0100,

                        ///
                        spi1_mosi__dbi_sdo = 0b0101,

                        ///
                        clk_fanout0 = 0b0110,

                        ///
                        uart1_rts = 0b0111,

                        ///
                        reserved0 = 0b1000,

                        ///
                        reserved1 = 0b1001,

                        ///
                        pb_eint10 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [12:15]
                    pb11_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        dmic_data0 = 0b0010,

                        ///
                        pwm2 = 0b0011,

                        ///
                        twi0_sda = 0b0100,

                        ///
                        spi1_clk__dbi_sclk = 0b0101,

                        ///
                        clk_fanout1 = 0b0110,

                        ///
                        uart1_cts = 0b0111,

                        ///
                        reserved0 = 0b1000,

                        ///
                        reserved1 = 0b1001,

                        ///
                        pb_eint11 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [16:19]
                    pb12_select: enum(u4) {
                        ///
                        input = 0b0000,

                        ///
                        output = 0b0001,

                        ///
                        dmic_clk = 0b0010,

                        ///
                        pwm0 = 0b0011,

                        ///
                        owa_in = 0b0100,

                        ///
                        spi1_cs__dbi_csx = 0b0101,

                        ///
                        clk_fanout2 = 0b0110,

                        ///
                        ir_rx = 0b0111,

                        ///
                        reserved0 = 0b1000,

                        ///
                        reserved1 = 0b1001,

                        ///
                        pb_eint12 = 0b1110,

                        ///
                        io_disable = 0b1111,
                    } = .input,

                    /// [20:31]
                    res0: u12 = 0,
                }), @ptrFromInt(0x2000034));

                /// PB Data Register
                pub const pb_dat = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:12]
                    pb_dat: u13 = 0,

                    /// [13:31]
                    res0: u19 = 0,
                }), @ptrFromInt(0x2000040));

                /// PB Multi_Driving Register 0
                pub const pb_drv0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PB Multi_Driving Select
                    PB0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PB Multi_Driving Select
                    PB1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PB Multi_Driving Select
                    PB2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:7] PB Multi_Driving Select
                    PB3_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [8:9] PB Multi_Driving Select
                    PB4_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [10:11] PB Multi_Driving Select
                    PB5_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [12:13] PB Multi_Driving Select
                    PB6_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [14:15] PB Multi_Driving Select
                    PB7_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2000044));

                /// PB Multi_Driving Register 1
                pub const pb_drv1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PB Multi_Driving Select
                    PB0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PB Multi_Driving Select
                    PB1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PB Multi_Driving Select
                    PB2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:7] PB Multi_Driving Select
                    PB3_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [8:9] PB Multi_Driving Select
                    PB4_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [10:31]
                    res0: u22 = 0,
                }), @ptrFromInt(0x2000048));

                /// PB Pull Register 0
                pub const pb_pull0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PC Pull_up/down Select
                    PC0_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [2:3] PC Pull_up/down Select
                    PC1_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [4:5] PC Pull_up/down Select
                    PC2_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [6:7] PC Pull_up/down Select
                    PC3_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [8:9] PC Pull_up/down Select
                    PC4_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [10:11] PC Pull_up/down Select
                    PC5_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [12:13] PC Pull_up/down Select
                    PC6_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [14:15] PC Pull_up/down Select
                    PC7_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [16:17] PC Pull_up/down Select
                    PC8_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [18:19] PC Pull_up/down Select
                    PC9_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [20:21] PC Pull_up/down Select
                    PC10_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [22:23] PC Pull_up/down Select
                    PC11_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [24:25] PC Pull_up/down Select
                    PC12_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [26:31]
                    res0: u6 = 0,
                }), @ptrFromInt(0x2000054));

                /// PC Configure Register 0
                pub const pc_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] PC0 Select
                    PC0_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        UART2_TX = 0b0010,

                        ///
                        LEDC_DO = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PC_EINT0 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI2_SCK = 0b0011,

                        ///
                        Reserved = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [4:7] PC1 Select.
                    PC1_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        UART2_RX = 0b0010,

                        ///
                        Reserved = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PC_EINT1 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI2_SDA = 0b0011,

                        ///
                        Reserved = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [8:11] PC2 Select
                    PC2_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SPI0_CLK = 0b0010,

                        ///
                        Reserved = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PC_EINT2 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        SDC2_CLK = 0b0011,

                        ///
                        Reserved = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [12:15] PC3 Select
                    PC3_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SPI0_CS0 = 0b0010,

                        ///
                        Reserved = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PC_EINT3 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        SDC2_CMD = 0b0011,

                        ///
                        Reserved = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [16:19] PC4 Select
                    PC4_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SPI0_MOSI = 0b0010,

                        ///
                        BOOT_SEL0 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PC_EINT4 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        SDC2_D2 = 0b0011,

                        ///
                        Reserved = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [20:23] PC5 Select
                    PC5_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SPI0_MISO = 0b0010,

                        ///
                        BOOT_SEL1 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PC_EINT5 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        SDC2_D1 = 0b0011,

                        ///
                        Reserved = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [24:27] PC6 Select
                    PC6_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SPI0_WP = 0b0010,

                        ///
                        UART3_TX = 0b0100,

                        ///
                        DBG_CLK = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PC_EINT6 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        SDC2_D0 = 0b0011,

                        ///
                        TWI3_SCK = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [28:31] PC7 Select
                    PC7_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SPI0_HOLD = 0b0010,

                        ///
                        UART3_RX = 0b0100,

                        ///
                        TCON_TRIG = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PC_EINT7 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        SDC2_D3 = 0b0011,

                        ///
                        TWI3_SDA = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,
                }), @ptrFromInt(0x2000060));

                /// PC Data Register
                pub const pc_dat = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    PC_DAT: u8 = 0,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2000070));

                /// PC Multi_Driving Register 0
                pub const pc_drv0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PC Multi_Driving Select
                    PC0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PC Multi_Driving Select
                    PC1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PC Multi_Driving Select
                    PC2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:7] PC Multi_Driving Select
                    PC3_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [8:9] PC Multi_Driving Select
                    PC4_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [10:11] PC Multi_Driving Select
                    PC5_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [12:13] PC Multi_Driving Select
                    PC6_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [14:15] PC Multi_Driving Select
                    PC7_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2000074));

                /// PC Pull Register 0
                pub const pc_pull0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PC Pull_up/down Select
                    PC0_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [2:3] PC Pull_up/down Select
                    PC1_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [4:5] PC Pull_up/down Select
                    PC2_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [6:7] PC Pull_up/down Select
                    PC3_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [8:9] PC Pull_up/down Select
                    PC4_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [10:11] PC Pull_up/down Select
                    PC5_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [12:13] PC Pull_up/down Select
                    PC6_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [14:15] PC Pull_up/down Select
                    PC7_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2000084));

                /// PD Configure Register 0
                pub const pd_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] PD0 Select
                    PD0_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D2 = 0b0010,

                        ///
                        DSI_D0P = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT0 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS0_V0P = 0b0011,

                        ///
                        TWI0_SCK = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [4:7] PD1 Select
                    PD1_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D3 = 0b0010,

                        ///
                        DSI_D0N = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT1 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS0_V0N = 0b0011,

                        ///
                        UART2_TX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [8:11] PD2 Select
                    PD2_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D4 = 0b0010,

                        ///
                        DSI_D1P = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT2 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS0_V1P = 0b0011,

                        ///
                        UART2_RX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [12:15] PD3 Select
                    PD3_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D5 = 0b0010,

                        ///
                        DSI_D1N = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT3 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS0_V1N = 0b0011,

                        ///
                        UART2_RTS = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [16:19] PD4 Select
                    PD4_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D6 = 0b0010,

                        ///
                        DSI_CKP = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT4 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS0_V2P = 0b0011,

                        ///
                        UART2_CTS = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [20:23] PD5 Select
                    PD5_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D7 = 0b0010,

                        ///
                        DSI_CKN = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT5 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS0_V2N = 0b0011,

                        ///
                        UART5_TX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [24:27] PD6 Select
                    PD6_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D10 = 0b0010,

                        ///
                        DSI_D2P = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT6 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS0_CKP = 0b0011,

                        ///
                        UART5_RX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [28:31] PD7 Select
                    PD7_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D11 = 0b0010,

                        ///
                        DSI_D2N = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT7 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS0_CKN = 0b0011,

                        ///
                        UART4_TX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,
                }), @ptrFromInt(0x2000090));

                /// PD Configure Register 1
                pub const pd_cfg1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] PD8 Select
                    PD8_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D12 = 0b0010,

                        ///
                        DSI_D3P = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT8 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS0_V3P = 0b0011,

                        ///
                        UART4_RX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [4:7] PD9 Select
                    PD9_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D13 = 0b0010,

                        ///
                        DSI_D3N = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT9 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS0_V3N = 0b0011,

                        ///
                        PWM6 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [8:11] PD10 Select
                    PD10_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D14 = 0b0010,

                        ///
                        SPI1_CS_DBI_CSX = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT10 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS1_V0P = 0b0011,

                        ///
                        UART3_TX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [12:15] PD11 Select
                    PD11_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D15 = 0b0010,

                        ///
                        SPI1_CLK_DBI_SCLK = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT11 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS1_V0N = 0b0011,

                        ///
                        UART3_RX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [16:19] PD12 Select
                    PD12_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D18 = 0b0010,

                        ///
                        SPI1_MOSI_DBI_SDO = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT12 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS1_V1P = 0b0011,

                        ///
                        TWI0_SDA = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [20:23] PD13 Select
                    PD13_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        Output = 0b0001,

                        ///
                        LCD0_D19 = 0b0010,

                        ///
                        LVDS1_V1N = 0b0011,

                        ///
                        SPI1_MISO_DBI_SDI_DBI_TE_DBI_DCX = 0b0100,

                        ///
                        UART3_RTS = 0b0101,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT13 = 0b1110,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [24:27] PD14 Select
                    PD14_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D20 = 0b0010,

                        ///
                        SPI1_HOLD_DBI_DCX_DBI_WRX = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT14 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS1_V2P = 0b0011,

                        ///
                        UART3_CTS = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [28:31] PD15 Select
                    PD15_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D21 = 0b0010,

                        ///
                        SPI1_WP_DBI_TE = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT15 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS1_V2N = 0b0011,

                        ///
                        IR_RX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,
                }), @ptrFromInt(0x2000094));

                /// PD Configure Register 2
                pub const pd_cfg2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] PD16 Select
                    PD16_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D22 = 0b0010,

                        ///
                        DMIC_DATA3 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT16 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS1_CKP = 0b0011,

                        ///
                        PWM0 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [4:7] PD17 Select
                    PD17_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_D23 = 0b0010,

                        ///
                        DMIC_DATA2 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT17 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS1_CKN = 0b0011,

                        ///
                        PWM1 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [8:11] PD18 Select
                    PD18_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_CLK = 0b0010,

                        ///
                        DMIC_DATA1 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT18 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS1_V3P = 0b0011,

                        ///
                        PWM2 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [12:15] PD19 Select
                    PD19_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_DE = 0b0010,

                        ///
                        DMIC_DATA0 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT19 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        LVDS1_V3N = 0b0011,

                        ///
                        PWM3 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [16:19] PD20 Select
                    PD20_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_HSYNC = 0b0010,

                        ///
                        DMIC_CLK = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT20 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI2_SCK = 0b0011,

                        ///
                        PWM4 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [20:23] PD21 Select
                    PD21_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        LCD0_VSYNC = 0b0010,

                        ///
                        UART1_TX = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT21 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI2_SDA = 0b0011,

                        ///
                        PWM5 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [24:27] PD22 Select
                    PD22_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        OWA_OUT = 0b0010,

                        ///
                        UART1_RX = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PD_EINT22 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        IR_RX = 0b0011,

                        ///
                        PWM7 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [28:31]
                    res0: u4 = 0,
                }), @ptrFromInt(0x2000098));

                /// PD Data Register
                pub const pd_dat = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:22]
                    pd_dat: u23 = 0,

                    /// [23:31]
                    res0: u9 = 0,
                }), @ptrFromInt(0x20000a0));

                /// PD Multi_Driving Register 0
                pub const pd_drv0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PD Multi_Driving Select
                    PD0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PD Multi_Driving Select
                    PD1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PD Multi_Driving Select
                    PD2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:7] PD Multi_Driving Select
                    PD3_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [8:9] PD Multi_Driving Select
                    PD4_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [10:11] PD Multi_Driving Select
                    PD5_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [12:13] PD Multi_Driving Select
                    PD6_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [14:15] PD Multi_Driving Select
                    PD7_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x20000a4));

                /// PD Multi_Driving Register 1
                pub const pd_drv1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PD Multi_Driving Select
                    PD0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PD Multi_Driving Select
                    PD1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PD Multi_Driving Select
                    PD2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:7] PD Multi_Driving Select
                    PD3_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [8:9] PD Multi_Driving Select
                    PD4_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [10:11] PD Multi_Driving Select
                    PD5_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [12:13] PD Multi_Driving Select
                    PD6_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [14:15] PD Multi_Driving Select
                    PD7_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x20000a8));

                /// PD Multi_Driving Register 2
                pub const pd_drv2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PD Multi_Driving Select
                    PD0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PD Multi_Driving Select
                    PD1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PD Multi_Driving Select
                    PD2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:7] PD Multi_Driving Select
                    PD3_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [8:9] PD Multi_Driving Select
                    PD4_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [10:11] PD Multi_Driving Select
                    PD5_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [12:13] PD Multi_Driving Select
                    PD6_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [14:31]
                    res0: u18 = 0,
                }), @ptrFromInt(0x20000ac));

                /// PD Pull Register 0
                pub const pd_pull0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PD Pull_up/down Select
                    PD0_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [2:3] PD Pull_up/down Select
                    PD1_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [4:5] PD Pull_up/down Select
                    PD2_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [6:7] PD Pull_up/down Select
                    PD3_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [8:9] PD Pull_up/down Select
                    PD4_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [10:11] PD Pull_up/down Select
                    PD5_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [12:13] PD Pull_up/down Select
                    PD6_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [14:15] PD Pull_up/down Select
                    PD7_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [16:17] PD Pull_up/down Select
                    PD8_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [18:19] PD Pull_up/down Select
                    PD9_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [20:21] PD Pull_up/down Select
                    PD10_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [22:23] PD Pull_up/down Select
                    PD11_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [24:25] PD Pull_up/down Select
                    PD12_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [26:27] PD Pull_up/down Select
                    PD13_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [28:29] PD Pull_up/down Select
                    PD14_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [30:31] PD Pull_up/down Select
                    PD15_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,
                }), @ptrFromInt(0x20000b4));

                /// PD Pull Register 1
                pub const pd_pull1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PD Pull_up/down Select
                    PD0_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [2:3] PD Pull_up/down Select
                    PD1_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [4:5] PD Pull_up/down Select
                    PD2_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [6:7] PD Pull_up/down Select
                    PD3_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [8:9] PD Pull_up/down Select
                    PD4_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [10:11] PD Pull_up/down Select
                    PD5_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [12:13] PD Pull_up/down Select
                    PD6_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [14:31]
                    res0: u18 = 0,
                }), @ptrFromInt(0x20000b8));

                /// PE Configure Register 0
                pub const pe_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] PE0 Select
                    PE0_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_HSYNC = 0b0010,

                        ///
                        TWI1_SCK = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        RGMII_RXCTRL_RMII_CRS_DV = 0b1000,

                        ///
                        PE_EINT0 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART2_RTS = 0b0011,

                        ///
                        LCD0_HSYNC = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [4:7] PE1 Select
                    PE1_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_VSYNC = 0b0010,

                        ///
                        TWI1_SDA = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        RGMII_RXD0_RMII_RXD0 = 0b1000,

                        ///
                        PE_EINT1 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART2_CTS = 0b0011,

                        ///
                        LCD0_VSYNC = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [8:11] PE2 Select
                    PE2_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_PCLK = 0b0010,

                        ///
                        TWI0_SCK = 0b0100,

                        ///
                        UART0_TX = 0b0110,

                        ///
                        RGMII_RXD1_RMII_RXD1 = 0b1000,

                        ///
                        Reserved = 0b1001,

                        ///
                        PE_EINT2 = 0b1110,

                        ///
                        IO_Disable = 0b1111,

                        ///
                        Output = 0b0001,

                        ///
                        UART2_TX = 0b0011,

                        ///
                        CLK_FANOUT0 = 0b0101,

                        ///
                        Reserved = 0b0111,
                    } = .Input,

                    /// [12:15] PE3 Select
                    PE3_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_MCLK = 0b0010,

                        ///
                        TWI0_SDA = 0b0100,

                        ///
                        UART0_RX = 0b0110,

                        ///
                        RGMII_TXCK_RMII_TXCK = 0b1000,

                        ///
                        Reserved = 0b1001,

                        ///
                        PE_EINT3 = 0b1110,

                        ///
                        IO_Disable = 0b1111,

                        ///
                        Output = 0b0001,

                        ///
                        UART2_RX = 0b0011,

                        ///
                        CLK_FANOUT1 = 0b0101,

                        ///
                        Reserved = 0b0111,
                    } = .Input,

                    /// [16:19] PE4 Select
                    PE4_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_D0 = 0b0010,

                        ///
                        TWI2_SCK = 0b0100,

                        ///
                        D_JTAG_MS = 0b0110,

                        ///
                        RGMII_TXD0_RMII_TXD0 = 0b1000,

                        ///
                        Reserved = 0b1001,

                        ///
                        PE_EINT4 = 0b1110,

                        ///
                        IO_Disable = 0b1111,

                        ///
                        Output = 0b0001,

                        ///
                        UART4_TX = 0b0011,

                        ///
                        CLK_FANOUT2 = 0b0101,

                        ///
                        R_JTAG_MS = 0b0111,
                    } = .Input,

                    /// [20:23] PE5 Select
                    PE5_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_D1 = 0b0010,

                        ///
                        TWI2_SDA = 0b0100,

                        ///
                        D_JTAG_DI = 0b0110,

                        ///
                        RGMII_TXD1_RMII_TXD1 = 0b1000,

                        ///
                        Reserved = 0b1001,

                        ///
                        PE_EINT5 = 0b1110,

                        ///
                        IO_Disable = 0b1111,

                        ///
                        Output = 0b0001,

                        ///
                        UART4_RX = 0b0011,

                        ///
                        LEDC_DO = 0b0101,

                        ///
                        R_JTAG_DI = 0b0111,
                    } = .Input,

                    /// [24:27] PE6 Select
                    PE6_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_D2 = 0b0010,

                        ///
                        TWI3_SCK = 0b0100,

                        ///
                        D_JTAG_DO = 0b0110,

                        ///
                        RMII_TXCTRL_RMII_TXEN = 0b1000,

                        ///
                        Reserved = 0b1001,

                        ///
                        PE_EINT6 = 0b1110,

                        ///
                        IO_Disable = 0b1111,

                        ///
                        Output = 0b0001,

                        ///
                        UART5_TX = 0b0011,

                        ///
                        OWA_IN = 0b0101,

                        ///
                        R_JTAG_DO = 0b0111,
                    } = .Input,

                    /// [28:31] PE7 Select
                    PE7_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_D3 = 0b0010,

                        ///
                        TWI3_SDA = 0b0100,

                        ///
                        D_JTAG_CK = 0b0110,

                        ///
                        RGMII_CLKIN_RMII_RXER = 0b1000,

                        ///
                        Reserved = 0b1001,

                        ///
                        PE_EINT7 = 0b1110,

                        ///
                        IO_Disable = 0b1111,

                        ///
                        Output = 0b0001,

                        ///
                        UART5_RX = 0b0011,

                        ///
                        OWA_OUT = 0b0101,

                        ///
                        R_JTAG_CK = 0b0111,
                    } = .Input,
                }), @ptrFromInt(0x20000c0));

                /// PE Configure Register 1
                pub const pe_cfg1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] PE8 Select
                    PE8_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_D4 = 0b0010,

                        ///
                        PWM2 = 0b0100,

                        ///
                        JTAG_MS = 0b0110,

                        ///
                        MDC = 0b1000,

                        ///
                        PE_EINT8 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART1_RTS = 0b0011,

                        ///
                        UART3_TX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [4:7] PE9 Select
                    PE9_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_D5 = 0b0010,

                        ///
                        PWM3 = 0b0100,

                        ///
                        JTAG_DI = 0b0110,

                        ///
                        MDIO = 0b1000,

                        ///
                        PE_EINT9 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART1_CTS = 0b0011,

                        ///
                        UART3_RX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [8:11] PE10 Select
                    PE10_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_D6 = 0b0010,

                        ///
                        PWM4 = 0b0100,

                        ///
                        JTAG_DO = 0b0110,

                        ///
                        EPHY_25M = 0b1000,

                        ///
                        PE_EINT10 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART1_TX = 0b0011,

                        ///
                        IR_RX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [12:15] PE11 Select
                    PE11_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        NCSI0_D7 = 0b0010,

                        ///
                        I2S0_DOUT3 = 0b0100,

                        ///
                        JTAG_CK = 0b0110,

                        ///
                        RGMII_TXD2 = 0b1000,

                        ///
                        PE_EINT11 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART1_RX = 0b0011,

                        ///
                        I2S0_DIN3 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [16:19] PE12 Select
                    PE12_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        TWI2_SCK = 0b0010,

                        ///
                        I2S0_DOUT2 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        RGMII_TXD3 = 0b1000,

                        ///
                        PE_EINT12 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        NCSI0_FIELD = 0b0011,

                        ///
                        I2S0_DIN2 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [20:23] PE13 Select
                    PE13_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        TWI2_SDA = 0b0010,

                        ///
                        I2S0_DOUT0 = 0b0100,

                        ///
                        DMIC_DATA3 = 0b0110,

                        ///
                        RGMII_RXD2 = 0b1000,

                        ///
                        PE_EINT13 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        PWM5 = 0b0011,

                        ///
                        I2S0_DIN1 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [24:27] PE14 Select
                    PE14_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        TWI1_SCK = 0b0010,

                        ///
                        I2S0_DOUT1 = 0b0100,

                        ///
                        DMIC_DATA2 = 0b0110,

                        ///
                        RGMII_RXD3 = 0b1000,

                        ///
                        PE_EINT14 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        D_JTAG_MS = 0b0011,

                        ///
                        I2S0_DIN0 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [28:31] PE15 Select
                    PE15_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        TWI1_SDA = 0b0010,

                        ///
                        PWM6 = 0b0100,

                        ///
                        DMIC_DATA1 = 0b0110,

                        ///
                        RGMII_RXCK = 0b1000,

                        ///
                        PE_EINT15 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        D_JTAG_DI = 0b0011,

                        ///
                        I2S0_LRCK = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,
                }), @ptrFromInt(0x20000c4));

                /// PE Configure Register 2
                pub const pe_cfg2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] PE16 Select
                    PE16_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        TWI3_SCK = 0b0010,

                        ///
                        PWM7 = 0b0100,

                        ///
                        DMIC_DATA0 = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PE_EINT16 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        D_JTAG_DO = 0b0011,

                        ///
                        I2S0_BCLK = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [4:7] PE17 Select
                    PE17_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        TWI3_SDA = 0b0010,

                        ///
                        IR_TX = 0b0100,

                        ///
                        DMIC_CLK = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PE_EINT17 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        D_JTAG_CK = 0b0011,

                        ///
                        I2S0_MCLK = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x20000c8));

                /// PE Data Register
                pub const pe_dat = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:17] PE Data
                    PE_DAT: u18 = 0,

                    /// [18:31]
                    res0: u14 = 0,
                }), @ptrFromInt(0x20000d0));

                /// PE Multi_Driving Register 0
                pub const pe_drv0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PE Multi_Driving Select
                    PE0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PE Multi_Driving Select
                    PE1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PE Multi_Driving Select
                    PE2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:7] PE Multi_Driving Select
                    PE3_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [8:9] PE Multi_Driving Select
                    PE4_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [10:11] PE Multi_Driving Select
                    PE5_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [12:13] PE Multi_Driving Select
                    PE6_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [14:15] PE Multi_Driving Select
                    PE7_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x20000d4));

                /// PE Multi_Driving Register 1
                pub const pe_drv1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PE Multi_Driving Select
                    PE0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PE Multi_Driving Select
                    PE1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PE Multi_Driving Select
                    PE2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:7] PE Multi_Driving Select
                    PE3_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [8:9] PE Multi_Driving Select
                    PE4_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [10:11] PE Multi_Driving Select
                    PE5_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [12:13] PE Multi_Driving Select
                    PE6_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [14:15] PE Multi_Driving Select
                    PE7_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x20000d8));

                /// PE Multi_Driving Register 2
                pub const pe_drv2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PE Multi_Driving Select
                    PE0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PE Multi_Driving Select
                    PE1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x20000dc));

                /// PE Pull Register 0
                pub const pe_pull0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PE Pull_up/down Select
                    PE0_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [2:3] PE Pull_up/down Select
                    PE1_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [4:5] PE Pull_up/down Select
                    PE2_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [6:7] PE Pull_up/down Select
                    PE3_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [8:9] PE Pull_up/down Select
                    PE4_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [10:11] PE Pull_up/down Select
                    PE5_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [12:13] PE Pull_up/down Select
                    PE6_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [14:15] PE Pull_up/down Select
                    PE7_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [16:17] PE Pull_up/down Select
                    PE8_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [18:19] PE Pull_up/down Select
                    PE9_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [20:21] PE Pull_up/down Select
                    PE10_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [22:23] PE Pull_up/down Select
                    PE11_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [24:25] PE Pull_up/down Select
                    PE12_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [26:27] PE Pull_up/down Select
                    PE13_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [28:29] PE Pull_up/down Select
                    PE14_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [30:31] PE Pull_up/down Select
                    PE15_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,
                }), @ptrFromInt(0x20000e4));

                /// PE Pull Register 1
                pub const pe_pull1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PE Pull_up/down Select
                    PE0_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [2:3] PE Pull_up/down Select
                    PE1_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x20000e8));

                /// PF Configure Register 0
                pub const pf_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] PF0 Select
                    PF0_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC0_D1 = 0b0010,

                        ///
                        R_JTAG_MS = 0b0100,

                        ///
                        I2S2_DIN0 = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PF_EINT0 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        JTAG_MS = 0b0011,

                        ///
                        I2S2_DOUT1 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [4:7] PF1 Select
                    PF1_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC0_D0 = 0b0010,

                        ///
                        R_JTAG_DI = 0b0100,

                        ///
                        I2S2_DIN1 = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PF_EINT1 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        JTAG_DI = 0b0011,

                        ///
                        I2S2_DOUT0 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [8:11] PF2 Select
                    PF2_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC0_CLK = 0b0010,

                        ///
                        TWI0_SCK = 0b0100,

                        ///
                        OWA_IN = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PF_EINT2 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART0_TX = 0b0011,

                        ///
                        LEDC_DO = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [12:15] PF3 Select
                    PF3_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC0_CMD = 0b0010,

                        ///
                        R_JTAG_DO = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PF_EINT3 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        JTAG_DO = 0b0011,

                        ///
                        I2S2_BCLK = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [16:19] PF4 Select
                    PF4_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC0_D3 = 0b0010,

                        ///
                        TWI0_SDA = 0b0100,

                        ///
                        IR_TX = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PF_EINT4 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART0_RX = 0b0011,

                        ///
                        PWM6 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [20:23] PF5 Select
                    PF5_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC0_D2 = 0b0010,

                        ///
                        R_JTAG_CK = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PF_EINT5 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        JTAG_CK = 0b0011,

                        ///
                        I2S2_LRCK = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [24:27] PF6 Select
                    PF6_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        Reserved = 0b0010,

                        ///
                        IR_RX = 0b0100,

                        ///
                        PWM5 = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PF_EINT6 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        OWA_OUT = 0b0011,

                        ///
                        I2S2_MCLK = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [28:31]
                    res0: u4 = 0,
                }), @ptrFromInt(0x20000f0));

                /// PF Data Register
                pub const pf_dat = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:6] PF Data
                    PF_DAT: u7 = 0,

                    /// [7:31]
                    res0: u25 = 0,
                }), @ptrFromInt(0x2000100));

                /// PF Multi_Driving Register 0
                pub const pf_drv0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PF Multi_Driving Select
                    PF0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PF Multi_Driving Select
                    PF1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PF Multi_Driving Select
                    PF2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:7] PF Multi_Driving Select
                    PF3_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [8:9] PF Multi_Driving Select
                    PF4_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [10:11] PF Multi_Driving Select
                    PF5_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [12:13] PF Multi_Driving Select
                    PF6_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [14:31]
                    res0: u18 = 0,
                }), @ptrFromInt(0x2000104));

                /// PF Pull Register 0
                pub const pf_pull0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PF Pull_up/down Select
                    PF0_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [2:3] PF Pull_up/down Select
                    PF1_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [4:5] PF Pull_up/down Select
                    PF2_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [6:7] PF Pull_up/down Select
                    PF3_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [8:9] PF Pull_up/down Select
                    PF4_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [10:11] PF Pull_up/down Select
                    PF5_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [12:13] PF Pull_up/down Select
                    PF6_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [14:31]
                    res0: u18 = 0,
                }), @ptrFromInt(0x2000114));

                /// PG Configure Register 0
                pub const pg_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] PG0 Select
                    PG0_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC1_CLK = 0b0010,

                        ///
                        RGMII_RXCTRL_RMII_CRS_DV = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT0 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART3_TX = 0b0011,

                        ///
                        PWM7 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [4:7] PG1 Select
                    PG1_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC1_CMD = 0b0010,

                        ///
                        RGMII_RXD0_RMII_RXD0 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT1 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART3_RX = 0b0011,

                        ///
                        PWM6 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [8:11] PG2 Select
                    PG2_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC1_D0 = 0b0010,

                        ///
                        RGMII_RXD1_RMII_RXD1 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT2 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART3_RTS = 0b0011,

                        ///
                        UART4_TX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [12:15] PG3 Select
                    PG3_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC1_D1 = 0b0010,

                        ///
                        RGMII_TXCK_RMII_TXCK = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT3 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART3_CTS = 0b0011,

                        ///
                        UART4_RX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [16:19] PG4 Select
                    PG4_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC1_D2 = 0b0010,

                        ///
                        RGMII_TXD0_RMII_TXD0 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT4 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART5_TX = 0b0011,

                        ///
                        PWM5 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [20:23] PG5 Select
                    PG5_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        SDC1_D3 = 0b0010,

                        ///
                        RGMII_TXD1_RMII_TXD1 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT5 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        UART5_RX = 0b0011,

                        ///
                        PWM4 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [24:27] PG6 Select
                    PG6_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        UART1_TX = 0b0010,

                        ///
                        RGMII_TXD2 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT6 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI2_SCK = 0b0011,

                        ///
                        PWM1 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [28:31] PG7 Select
                    PG7_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        UART1_RX = 0b0010,

                        ///
                        RGMII_TXD3 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT7 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI2_SDA = 0b0011,

                        ///
                        OWA_IN = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,
                }), @ptrFromInt(0x2000120));

                /// PG Configure Register 1
                pub const pg_cfg1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] PG8 Select
                    PG8_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        UART1_RTS = 0b0010,

                        ///
                        RGMII_RXD2 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT8 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI1_SCK = 0b0011,

                        ///
                        UART3_TX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [4:7] PG9 Select
                    PG9_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        UART1_CTS = 0b0010,

                        ///
                        RGMII_RXD3 = 0b0100,

                        ///
                        Reserved = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT9 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI1_SDA = 0b0011,

                        ///
                        UART3_RX = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [8:11] PG10 Select
                    PG10_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        PWM3 = 0b0010,

                        ///
                        RGMII_RXCK = 0b0100,

                        ///
                        IR_RX = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT10 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI3_SCK = 0b0011,

                        ///
                        CLK_FANOUT0 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [12:15] PG11 Select
                    PG11_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        I2S1_MCLK = 0b0010,

                        ///
                        EPHY_25M = 0b0100,

                        ///
                        TCON_TRIG = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT11 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI3_SDA = 0b0011,

                        ///
                        CLK_FANOUT1 = 0b0101,

                        ///
                        Reserved = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [16:19] PG12 Select
                    PG12_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        Output = 0b0001,

                        ///
                        I2S1_LRCK = 0b0010,

                        ///
                        TWI0_SCK = 0b0011,

                        ///
                        RGMII_TXCTRL_RMII_TXEN = 0b0100,

                        ///
                        CLK_FANOUT2 = 0b0101,

                        ///
                        PWM0 = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT12 = 0b1110,

                        ///
                        UART1_TX = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [20:23] PG13 Select
                    PG13_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        I2S1_BCLK = 0b0010,

                        ///
                        RGMII_CLKIN_RMII_RXER = 0b0100,

                        ///
                        LEDC_DO = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT13 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI0_SDA = 0b0011,

                        ///
                        PWM2 = 0b0101,

                        ///
                        UART1_RX = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [24:27] PG14 Select
                    PG14_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        I2S1_DIN0 = 0b0010,

                        ///
                        MDC = 0b0100,

                        ///
                        SPI0_WP = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT14 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI2_SCK = 0b0011,

                        ///
                        I2S1_DOUT1 = 0b0101,

                        ///
                        UART1_RTS = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [28:31] PG15 Select
                    PG15_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        I2S1_DOUT0 = 0b0010,

                        ///
                        MDIO = 0b0100,

                        ///
                        SPI0_HOLD = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT15 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI2_SDA = 0b0011,

                        ///
                        I2S1_DIN1 = 0b0101,

                        ///
                        UART1_CTS = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,
                }), @ptrFromInt(0x2000124));

                /// PG Configure Register 2
                pub const pg_cfg2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] PG16 Select
                    PG16_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        IR_RX = 0b0010,

                        ///
                        PWM5 = 0b0100,

                        ///
                        OWA_IN = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT16 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TCON_TRIG = 0b0011,

                        ///
                        CLK_FANOUT2 = 0b0101,

                        ///
                        LEDC_DO = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [4:7] PG17 Select
                    PG17_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        UART2_TX = 0b0010,

                        ///
                        PWM7 = 0b0100,

                        ///
                        IR_TX = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT17 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI3_SCK = 0b0011,

                        ///
                        CLK_FANOUT0 = 0b0101,

                        ///
                        UART0_TX = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [8:11] PG18 Select
                    PG18_SELECT: enum(u4) {
                        ///
                        Input = 0b0000,

                        ///
                        UART2_RX = 0b0010,

                        ///
                        PWM6 = 0b0100,

                        ///
                        OWA_OUT = 0b0110,

                        ///
                        Reserved = 0b1000,

                        ///
                        PG_EINT18 = 0b1110,

                        ///
                        Output = 0b0001,

                        ///
                        TWI3_SDA = 0b0011,

                        ///
                        CLK_FANOUT1 = 0b0101,

                        ///
                        UART0_RX = 0b0111,

                        ///
                        Reserved = 0b1001,

                        ///
                        IO_Disable = 0b1111,
                    } = .Input,

                    /// [12:31]
                    res0: u20 = 0,
                }), @ptrFromInt(0x2000128));

                /// PG Data Register
                pub const pg_dat = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:18] PG Data
                    PG_DAT: u19 = 0,

                    /// [19:31]
                    res0: u13 = 0,
                }), @ptrFromInt(0x2000130));

                /// PG Multi_Driving Register 0
                pub const pg_drv0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PG Multi_Driving Select
                    PG0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PG Multi_Driving Select
                    PG1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PG Multi_Driving Select
                    PG2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:7] PG Multi_Driving Select
                    PG3_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [8:9] PG Multi_Driving Select
                    PG4_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [10:11] PG Multi_Driving Select
                    PG5_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [12:13] PG Multi_Driving Select
                    PG6_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [14:15] PG Multi_Driving Select
                    PG7_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2000134));

                /// PG Multi_Driving Register 1
                pub const pg_drv1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PG Multi_Driving Select
                    PG0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PG Multi_Driving Select
                    PG1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PG Multi_Driving Select
                    PG2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:7] PG Multi_Driving Select
                    PG3_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [8:9] PG Multi_Driving Select
                    PG4_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [10:11] PG Multi_Driving Select
                    PG5_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [12:13] PG Multi_Driving Select
                    PG6_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [14:15] PG Multi_Driving Select
                    PG7_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x2000138));

                /// PG Multi_Driving Register 2
                pub const pg_drv2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PG Multi_Driving Select
                    PG0_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [2:3] PG Multi_Driving Select
                    PG1_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [4:5] PG Multi_Driving Select
                    PG2_DRV: enum(u2) {
                        ///
                        L0 = 0,

                        ///
                        L1 = 1,

                        ///
                        L2 = 2,

                        ///
                        L3 = 3,
                    } = .L0,

                    /// [6:31]
                    res0: u26 = 0,
                }), @ptrFromInt(0x200013c));

                /// PG Pull Register 0
                pub const pg_pull0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PG Pull_up/down Select
                    PG0_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [2:3] PG Pull_up/down Select
                    PG1_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [4:5] PG Pull_up/down Select
                    PG2_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [6:7] PG Pull_up/down Select
                    PG3_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [8:9] PG Pull_up/down Select
                    PG4_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [10:11] PG Pull_up/down Select
                    PG5_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [12:13] PG Pull_up/down Select
                    PG6_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [14:15] PG Pull_up/down Select
                    PG7_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [16:17] PG Pull_up/down Select
                    PG8_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [18:19] PG Pull_up/down Select
                    PG9_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [20:21] PG Pull_up/down Select
                    PG10_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [22:23] PG Pull_up/down Select
                    PG11_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [24:25] PG Pull_up/down Select
                    PG12_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [26:27] PG Pull_up/down Select
                    PG13_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [28:29] PG Pull_up/down Select
                    PG14_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [30:31] PG Pull_up/down Select
                    PG15_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,
                }), @ptrFromInt(0x2000144));

                /// PG Pull Register 1
                pub const pg_pull1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1] PG Pull_up/down Select
                    PG0_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [2:3] PG Pull_up/down Select
                    PG1_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [4:5] PG Pull_up/down Select
                    PG2_PULL: enum(u2) {
                        ///
                        pull_disable = 0,

                        ///
                        pull_up = 1,

                        ///
                        pull_down = 2,

                        ///
                        reserved = 3,
                    } = .pull_disable,

                    /// [6:31]
                    res0: u26 = 0,
                }), @ptrFromInt(0x2000148));

                /// PB External Interrupt Configure Register 0
                pub const pb_eint_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:15] External INT Mode
                    EINT3_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [16:19] External INT Mode
                    EINT4_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [20:23] External INT Mode
                    EINT5_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [24:27] External INT Mode
                    EINT6_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [28:31] External INT Mode
                    EINT7_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,
                }), @ptrFromInt(0x2000220));

                /// PB External Interrupt Configure Register 1
                pub const pb_eint_cfg1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:15] External INT Mode
                    EINT3_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [16:19] External INT Mode
                    EINT4_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [20:31]
                    res0: u12 = 0,
                }), @ptrFromInt(0x2000224));

                /// PB External Interrupt Control Register
                pub const pb_eint_ctl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Enable
                    EINT0_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] External INT Enable
                    EINT1_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] External INT Enable
                    EINT2_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] External INT Enable
                    EINT3_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] External INT Enable
                    EINT4_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:5] External INT Enable
                    EINT5_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [6:6] External INT Enable
                    EINT6_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [7:7] External INT Enable
                    EINT7_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [8:8] External INT Enable
                    EINT8_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [9:9] External INT Enable
                    EINT9_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [10:10] External INT Enable
                    EINT10_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [11:11] External INT Enable
                    EINT11_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [12:31]
                    res0: u20 = 0,
                }), @ptrFromInt(0x2000230));

                /// PB External Interrupt Status Register
                pub const pb_eint_status = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Pending Bit
                    EINT0_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [1:1] External INT Pending Bit
                    EINT1_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [2:2] External INT Pending Bit
                    EINT2_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [3:3] External INT Pending Bit
                    EINT3_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [4:4] External INT Pending Bit
                    EINT4_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [5:5] External INT Pending Bit
                    EINT5_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [6:6] External INT Pending Bit
                    EINT6_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [7:7] External INT Pending Bit
                    EINT7_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [8:8] External INT Pending Bit
                    EINT8_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [9:9] External INT Pending Bit
                    EINT9_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [10:10] External INT Pending Bit
                    EINT10_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [11:11] External INT Pending Bit
                    EINT11_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [12:31]
                    res0: u20 = 0,
                }), @ptrFromInt(0x2000234));

                /// PB External Interrupt Debounce Register
                pub const pb_eint_deb = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PIO Interrupt Clock Select
                    PIO_INT_CLK_SELECT: enum(u1) {
                        ///
                        LOSC_32KHz = 0,

                        ///
                        HOSC_24MHz = 1,
                    } = .LOSC_32KHz,

                    /// [1:3]
                    res0: u3 = 0,

                    /// [4:6] Debounce Clock Pre_scale n
                    DEB_CLK_PRE_SCALE: u3 = 0,

                    /// [7:31]
                    res1: u25 = 0,
                }), @ptrFromInt(0x2000238));

                /// PC External Interrupt Configure Register 0
                pub const pc_eint_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:15] External INT Mode
                    EINT3_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [16:19] External INT Mode
                    EINT4_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [20:23] External INT Mode
                    EINT5_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [24:27] External INT Mode
                    EINT6_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [28:31] External INT Mode
                    EINT7_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,
                }), @ptrFromInt(0x2000240));

                /// PC External Interrupt Control Register
                pub const pc_eint_ctl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Enable
                    EINT0_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] External INT Enable
                    EINT1_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] External INT Enable
                    EINT2_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] External INT Enable
                    EINT3_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] External INT Enable
                    EINT4_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:5] External INT Enable
                    EINT5_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [6:6] External INT Enable
                    EINT6_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [7:7] External INT Enable
                    EINT7_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2000250));

                /// PC External Interrupt Status Register
                pub const pc_eint_status = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Pending Bit
                    EINT0_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [1:1] External INT Pending Bit
                    EINT1_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [2:2] External INT Pending Bit
                    EINT2_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [3:3] External INT Pending Bit
                    EINT3_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [4:4] External INT Pending Bit
                    EINT4_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [5:5] External INT Pending Bit
                    EINT5_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [6:6] External INT Pending Bit
                    EINT6_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [7:7] External INT Pending Bit
                    EINT7_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2000254));

                /// PC External Interrupt Debounce Register
                pub const pc_eint_deb = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PIO Interrupt Clock Select
                    PIO_INT_CLK_SELECT: enum(u1) {
                        ///
                        LOSC_32KHz = 0,

                        ///
                        HOSC_24MHz = 1,
                    } = .LOSC_32KHz,

                    /// [1:3]
                    res0: u3 = 0,

                    /// [4:6] Debounce Clock Pre_scale n
                    DEB_CLK_PRE_SCALE: u3 = 0,

                    /// [7:31]
                    res1: u25 = 0,
                }), @ptrFromInt(0x2000258));

                /// PD External Interrupt Configure Register 0
                pub const pd_eint_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:15] External INT Mode
                    EINT3_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [16:19] External INT Mode
                    EINT4_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [20:23] External INT Mode
                    EINT5_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [24:27] External INT Mode
                    EINT6_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [28:31] External INT Mode
                    EINT7_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,
                }), @ptrFromInt(0x2000260));

                /// PD External Interrupt Configure Register 1
                pub const pd_eint_cfg1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:15] External INT Mode
                    EINT3_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [16:19] External INT Mode
                    EINT4_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [20:23] External INT Mode
                    EINT5_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [24:27] External INT Mode
                    EINT6_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [28:31] External INT Mode
                    EINT7_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,
                }), @ptrFromInt(0x2000264));

                /// PD External Interrupt Configure Register 2
                pub const pd_eint_cfg2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:15] External INT Mode
                    EINT3_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [16:19] External INT Mode
                    EINT4_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [20:23] External INT Mode
                    EINT5_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [24:27] External INT Mode
                    EINT6_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [28:31]
                    res0: u4 = 0,
                }), @ptrFromInt(0x2000268));

                /// PD External Interrupt Control Register
                pub const pd_eint_ctl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Enable
                    EINT0_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] External INT Enable
                    EINT1_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] External INT Enable
                    EINT2_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] External INT Enable
                    EINT3_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] External INT Enable
                    EINT4_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:5] External INT Enable
                    EINT5_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [6:6] External INT Enable
                    EINT6_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [7:7] External INT Enable
                    EINT7_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [8:8] External INT Enable
                    EINT8_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [9:9] External INT Enable
                    EINT9_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [10:10] External INT Enable
                    EINT10_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [11:11] External INT Enable
                    EINT11_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [12:12] External INT Enable
                    EINT12_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [13:13] External INT Enable
                    EINT13_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [14:14] External INT Enable
                    EINT14_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [15:15] External INT Enable
                    EINT15_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [16:16] External INT Enable
                    EINT16_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [17:17] External INT Enable
                    EINT17_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [18:18] External INT Enable
                    EINT18_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [19:19] External INT Enable
                    EINT19_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [20:20] External INT Enable
                    EINT20_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [21:21] External INT Enable
                    EINT21_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [22:22] External INT Enable
                    EINT22_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [23:31]
                    res0: u9 = 0,
                }), @ptrFromInt(0x2000270));

                /// PD External Interrupt Status Register
                pub const pd_eint_status = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Pending Bit
                    EINT0_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [1:1] External INT Pending Bit
                    EINT1_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [2:2] External INT Pending Bit
                    EINT2_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [3:3] External INT Pending Bit
                    EINT3_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [4:4] External INT Pending Bit
                    EINT4_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [5:5] External INT Pending Bit
                    EINT5_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [6:6] External INT Pending Bit
                    EINT6_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [7:7] External INT Pending Bit
                    EINT7_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [8:8] External INT Pending Bit
                    EINT8_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [9:9] External INT Pending Bit
                    EINT9_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [10:10] External INT Pending Bit
                    EINT10_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [11:11] External INT Pending Bit
                    EINT11_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [12:12] External INT Pending Bit
                    EINT12_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [13:13] External INT Pending Bit
                    EINT13_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [14:14] External INT Pending Bit
                    EINT14_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [15:15] External INT Pending Bit
                    EINT15_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [16:16] External INT Pending Bit
                    EINT16_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [17:17] External INT Pending Bit
                    EINT17_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [18:18] External INT Pending Bit
                    EINT18_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [19:19] External INT Pending Bit
                    EINT19_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [20:20] External INT Pending Bit
                    EINT20_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [21:21] External INT Pending Bit
                    EINT21_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [22:22] External INT Pending Bit
                    EINT22_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [23:31]
                    res0: u9 = 0,
                }), @ptrFromInt(0x2000274));

                /// PD External Interrupt Debounce Register
                pub const pd_eint_deb = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PIO Interrupt Clock Select
                    PIO_INT_CLK_SELECT: enum(u1) {
                        ///
                        LOSC_32KHz = 0,

                        ///
                        HOSC_24MHz = 1,
                    } = .LOSC_32KHz,

                    /// [1:3]
                    res0: u3 = 0,

                    /// [4:6] Debounce Clock Pre_scale n
                    DEB_CLK_PRE_SCALE: u3 = 0,

                    /// [7:31]
                    res1: u25 = 0,
                }), @ptrFromInt(0x2000278));

                /// PE External Interrupt Configure Register 0
                pub const pe_eint_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:15] External INT Mode
                    EINT3_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [16:19] External INT Mode
                    EINT4_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [20:23] External INT Mode
                    EINT5_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [24:27] External INT Mode
                    EINT6_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [28:31] External INT Mode
                    EINT7_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,
                }), @ptrFromInt(0x2000280));

                /// PE External Interrupt Configure Register 1
                pub const pe_eint_cfg1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:15] External INT Mode
                    EINT3_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [16:19] External INT Mode
                    EINT4_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [20:23] External INT Mode
                    EINT5_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [24:27] External INT Mode
                    EINT6_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [28:31] External INT Mode
                    EINT7_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,
                }), @ptrFromInt(0x2000284));

                /// PE External Interrupt Configure Register 2
                pub const pe_eint_cfg2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:31]
                    res0: u24 = 0,
                }), @ptrFromInt(0x2000288));

                /// PE External Interrupt Control Register
                pub const pe_eint_ctl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Enable
                    EINT0_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] External INT Enable
                    EINT1_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] External INT Enable
                    EINT2_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] External INT Enable
                    EINT3_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] External INT Enable
                    EINT4_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:5] External INT Enable
                    EINT5_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [6:6] External INT Enable
                    EINT6_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [7:7] External INT Enable
                    EINT7_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [8:8] External INT Enable
                    EINT8_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [9:9] External INT Enable
                    EINT9_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [10:10] External INT Enable
                    EINT10_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [11:11] External INT Enable
                    EINT11_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [12:12] External INT Enable
                    EINT12_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [13:13] External INT Enable
                    EINT13_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [14:14] External INT Enable
                    EINT14_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [15:15] External INT Enable
                    EINT15_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [16:16] External INT Enable
                    EINT16_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [17:17] External INT Enable
                    EINT17_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [18:31]
                    res0: u14 = 0,
                }), @ptrFromInt(0x2000290));

                /// PE External Interrupt Status Register
                pub const pe_eint_status = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Pending Bit
                    EINT0_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [1:1] External INT Pending Bit
                    EINT1_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [2:2] External INT Pending Bit
                    EINT2_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [3:3] External INT Pending Bit
                    EINT3_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [4:4] External INT Pending Bit
                    EINT4_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [5:5] External INT Pending Bit
                    EINT5_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [6:6] External INT Pending Bit
                    EINT6_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [7:7] External INT Pending Bit
                    EINT7_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [8:8] External INT Pending Bit
                    EINT8_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [9:9] External INT Pending Bit
                    EINT9_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [10:10] External INT Pending Bit
                    EINT10_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [11:11] External INT Pending Bit
                    EINT11_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [12:12] External INT Pending Bit
                    EINT12_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [13:13] External INT Pending Bit
                    EINT13_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [14:14] External INT Pending Bit
                    EINT14_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [15:15] External INT Pending Bit
                    EINT15_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [16:16] External INT Pending Bit
                    EINT16_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [17:17] External INT Pending Bit
                    EINT17_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [18:31]
                    res0: u14 = 0,
                }), @ptrFromInt(0x2000294));

                /// PE External Interrupt Debounce Register
                pub const pe_eint_deb = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PIO Interrupt Clock Select
                    PIO_INT_CLK_SELECT: enum(u1) {
                        ///
                        LOSC_32KHz = 0,

                        ///
                        HOSC_24MHz = 1,
                    } = .LOSC_32KHz,

                    /// [1:3]
                    res0: u3 = 0,

                    /// [4:6] Debounce Clock Pre_scale n
                    DEB_CLK_PRE_SCALE: u3 = 0,

                    /// [7:31]
                    res1: u25 = 0,
                }), @ptrFromInt(0x2000298));

                /// PF External Interrupt Configure Register 0
                pub const pf_eint_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:15] External INT Mode
                    EINT3_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [16:19] External INT Mode
                    EINT4_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [20:23] External INT Mode
                    EINT5_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [24:27] External INT Mode
                    EINT6_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [28:31]
                    res0: u4 = 0,
                }), @ptrFromInt(0x20002a0));

                /// PF External Interrupt Control Register
                pub const pf_eint_ctl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Enable
                    EINT0_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] External INT Enable
                    EINT1_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] External INT Enable
                    EINT2_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] External INT Enable
                    EINT3_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] External INT Enable
                    EINT4_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:5] External INT Enable
                    EINT5_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [6:6] External INT Enable
                    EINT6_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [7:31]
                    res0: u25 = 0,
                }), @ptrFromInt(0x20002b0));

                /// PF External Interrupt Status Register
                pub const pf_eint_status = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Pending Bit
                    EINT0_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [1:1] External INT Pending Bit
                    EINT1_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [2:2] External INT Pending Bit
                    EINT2_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [3:3] External INT Pending Bit
                    EINT3_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [4:4] External INT Pending Bit
                    EINT4_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [5:5] External INT Pending Bit
                    EINT5_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [6:6] External INT Pending Bit
                    EINT6_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [7:31]
                    res0: u25 = 0,
                }), @ptrFromInt(0x20002b4));

                /// PF External Interrupt Debounce Register
                pub const pf_eint_deb = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PIO Interrupt Clock Select
                    PIO_INT_CLK_SELECT: enum(u1) {
                        ///
                        LOSC_32KHz = 0,

                        ///
                        HOSC_24MHz = 1,
                    } = .LOSC_32KHz,

                    /// [1:3]
                    res0: u3 = 0,

                    /// [4:6] Debounce Clock Pre_scale n
                    DEB_CLK_PRE_SCALE: u3 = 0,

                    /// [7:31]
                    res1: u25 = 0,
                }), @ptrFromInt(0x20002b8));

                /// PG External Interrupt Configure Register 0
                pub const pg_eint_cfg0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:15] External INT Mode
                    EINT3_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [16:19] External INT Mode
                    EINT4_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [20:23] External INT Mode
                    EINT5_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [24:27] External INT Mode
                    EINT6_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [28:31] External INT Mode
                    EINT7_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,
                }), @ptrFromInt(0x20002c0));

                /// PG External Interrupt Configure Register 1
                pub const pg_eint_cfg1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:15] External INT Mode
                    EINT3_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [16:19] External INT Mode
                    EINT4_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [20:23] External INT Mode
                    EINT5_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [24:27] External INT Mode
                    EINT6_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [28:31] External INT Mode
                    EINT7_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,
                }), @ptrFromInt(0x20002c4));

                /// PG External Interrupt Configure Register 2
                pub const pg_eint_cfg2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:3] External INT Mode
                    EINT0_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [4:7] External INT Mode
                    EINT1_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [8:11] External INT Mode
                    EINT2_CFG: enum(u4) {
                        ///
                        positive_edge = 0,

                        ///
                        negative_edge = 1,

                        ///
                        high_level = 2,

                        ///
                        low_level = 3,

                        ///
                        double_edge = 4,
                    } = .positive_edge,

                    /// [12:31]
                    res0: u20 = 0,
                }), @ptrFromInt(0x20002c8));

                /// PG External Interrupt Control Register
                pub const pg_eint_ctl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Enable
                    EINT0_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1] External INT Enable
                    EINT1_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:2] External INT Enable
                    EINT2_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [3:3] External INT Enable
                    EINT3_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [4:4] External INT Enable
                    EINT4_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [5:5] External INT Enable
                    EINT5_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [6:6] External INT Enable
                    EINT6_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [7:7] External INT Enable
                    EINT7_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [8:8] External INT Enable
                    EINT8_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [9:9] External INT Enable
                    EINT9_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [10:10] External INT Enable
                    EINT10_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [11:11] External INT Enable
                    EINT11_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [12:12] External INT Enable
                    EINT12_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [13:13] External INT Enable
                    EINT13_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [14:14] External INT Enable
                    EINT14_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [15:15] External INT Enable
                    EINT15_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [16:16] External INT Enable
                    EINT16_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [17:17] External INT Enable
                    EINT17_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [18:18] External INT Enable
                    EINT18_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [19:31]
                    res0: u13 = 0,
                }), @ptrFromInt(0x20002d0));

                /// PG External Interrupt Status Register
                pub const pg_eint_status = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] External INT Pending Bit
                    EINT0_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [1:1] External INT Pending Bit
                    EINT1_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [2:2] External INT Pending Bit
                    EINT2_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [3:3] External INT Pending Bit
                    EINT3_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [4:4] External INT Pending Bit
                    EINT4_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [5:5] External INT Pending Bit
                    EINT5_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [6:6] External INT Pending Bit
                    EINT6_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [7:7] External INT Pending Bit
                    EINT7_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [8:8] External INT Pending Bit
                    EINT8_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [9:9] External INT Pending Bit
                    EINT9_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [10:10] External INT Pending Bit
                    EINT10_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [11:11] External INT Pending Bit
                    EINT11_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [12:12] External INT Pending Bit
                    EINT12_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [13:13] External INT Pending Bit
                    EINT13_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [14:14] External INT Pending Bit
                    EINT14_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [15:15] External INT Pending Bit
                    EINT15_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [16:16] External INT Pending Bit
                    EINT16_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [17:17] External INT Pending Bit
                    EINT17_STATUS: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [18:31]
                    res0: u14 = 0,
                }), @ptrFromInt(0x20002d4));

                /// PG External Interrupt Debounce Register
                pub const pg_eint_deb = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] PIO Interrupt Clock Select
                    PIO_INT_CLK_SELECT: enum(u1) {
                        ///
                        LOSC_32KHz = 0,

                        ///
                        HOSC_24MHz = 1,
                    } = .LOSC_32KHz,

                    /// [1:3]
                    res0: u3 = 0,

                    /// [4:6] Debounce Clock Pre_scale n
                    DEB_CLK_PRE_SCALE: u3 = 0,

                    /// [7:31]
                    res1: u25 = 0,
                }), @ptrFromInt(0x20002d8));

                /// PIO Group Withstand Voltage Mode Select Register
                pub const pio_pow_mod_sel = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1]
                    res0: u2 = 0,

                    /// [2:2] PX_POWER POWER MODE Select
                    P0_PWR_MOD_SEL: enum(u1) {
                        /// 3.3 V
                        V33 = 0,

                        /// 1.8 V
                        V18 = 1,
                    } = .V33,

                    /// [3:3] PX_POWER POWER MODE Select
                    P1_PWR_MOD_SEL: enum(u1) {
                        /// 3.3 V
                        V33 = 0,

                        /// 1.8 V
                        V18 = 1,
                    } = .V33,

                    /// [4:4] PX_POWER POWER MODE Select
                    P2_PWR_MOD_SEL: enum(u1) {
                        /// 3.3 V
                        V33 = 0,

                        /// 1.8 V
                        V18 = 1,
                    } = .V33,

                    /// [5:5] PX_POWER POWER MODE Select
                    P3_PWR_MOD_SEL: enum(u1) {
                        /// 3.3 V
                        V33 = 0,

                        /// 1.8 V
                        V18 = 1,
                    } = .V33,

                    /// [6:6] PX_POWER POWER MODE Select
                    P4_PWR_MOD_SEL: enum(u1) {
                        /// 3.3 V
                        V33 = 0,

                        /// 1.8 V
                        V18 = 1,
                    } = .V33,

                    /// [7:11]
                    res1: u5 = 0,

                    /// [12:12] VCC_IO POWER MODE Select
                    VCC_IO_PWR_MOD_SEL: enum(u1) {
                        /// 3.3 V
                        V33 = 0,

                        /// 1.8 V
                        V18 = 1,
                    } = .V33,

                    /// [13:31]
                    res2: u19 = 0,
                }), @ptrFromInt(0x2000340));

                /// PIO Group Withstand Voltage Mode Select Control Register
                pub const pio_pow_ms_ctl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1]
                    res0: u2 = 0,

                    /// [2:2] VCC_PX Withstand Voltage Mode Select Control
                    VCC_P0_WS_VOL_MOD_SEL: enum(u1) {
                        ///
                        enable = 0,

                        ///
                        disable = 1,
                    } = .enable,

                    /// [3:3] VCC_PX Withstand Voltage Mode Select Control
                    VCC_P1_WS_VOL_MOD_SEL: enum(u1) {
                        ///
                        enable = 0,

                        ///
                        disable = 1,
                    } = .enable,

                    /// [4:4] VCC_PX Withstand Voltage Mode Select Control
                    VCC_P2_WS_VOL_MOD_SEL: enum(u1) {
                        ///
                        enable = 0,

                        ///
                        disable = 1,
                    } = .enable,

                    /// [5:5] VCC_PX Withstand Voltage Mode Select Control
                    VCC_P3_WS_VOL_MOD_SEL: enum(u1) {
                        ///
                        enable = 0,

                        ///
                        disable = 1,
                    } = .enable,

                    /// [6:6] VCC_PX Withstand Voltage Mode Select Control
                    VCC_P4_WS_VOL_MOD_SEL: enum(u1) {
                        ///
                        enable = 0,

                        ///
                        disable = 1,
                    } = .enable,

                    /// [7:11]
                    res1: u5 = 0,

                    /// [12:12] VCC_IO Withstand Voltage Mode Select Control
                    VCCIO_WS_VOL_MOD_SEL: enum(u1) {
                        ///
                        enable = 0,

                        ///
                        disable = 1,
                    } = .enable,

                    /// [13:31]
                    res2: u19 = 0,
                }), @ptrFromInt(0x2000344));

                /// PIO Group Power Value Register
                pub const pio_pow_val = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:1]
                    res0: u2 = 0,

                    /// [2:2] PX_Port Power Value
                    P0_PWR_VAL: u1 = 0,

                    /// [3:3] PX_Port Power Value
                    P1_PWR_VAL: u1 = 0,

                    /// [4:4] PX_Port Power Value
                    P2_PWR_VAL: u1 = 0,

                    /// [5:5] PX_Port Power Value
                    P3_PWR_VAL: u1 = 0,

                    /// [6:6] PX_Port Power Value
                    P4_PWR_VAL: u1 = 0,

                    /// [7:11]
                    res1: u5 = 0,

                    /// [12:12] VCC_IO Power Value
                    VCCIO_PWS_VAL: u1 = 0,

                    /// [13:31]
                    res2: u19 = 0,
                }), @ptrFromInt(0x2000348));

                /// PIO Group Power Voltage Select Control Register
                pub const pio_pow_vol_sel_ctl = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] VCC_PF Power Voltage Select Control
                    VCC_PF_PWR_VOL_SEL: enum(u1) {
                        /// 1.8V
                        V18 = 0,

                        /// 3.3V
                        V33 = 1,
                    } = .V18,

                    /// [1:31]
                    res0: u31 = 0,
                }), @ptrFromInt(0x2000350));
            };

            /// General Purpose ADC
            pub const GPADC = struct {
                /// GPADC Sample Rate Configure Register
                pub const GP_SR_CON = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009000));

                /// GPADC Control Register
                pub const GP_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009004));

                /// GPADC Compare and Select Enable Register
                pub const GP_CS_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009008));

                /// GPADC FIFO Interrupt Control Register
                pub const GP_FIFO_INTC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200900c));

                /// GPADC FIFO Interrupt Status Register
                pub const GP_FIFO_INTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009010));

                /// GPADC FIFO Data Register
                pub const GP_FIFO_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009014));

                /// GPADC Calibration Data Register
                pub const GP_CDATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009018));

                /// GPADC Data Low Interrupt Configure Register
                pub const GP_DATAL_INTC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009020));

                /// GPADC Data High Interrupt Configure Register
                pub const GP_DATAH_INTC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009024));

                /// GPADC Data Interrupt Configure Register
                pub const GP_DATA_INTC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009028));

                /// GPADC Data Low Interrupt Status Register
                pub const GP_DATAL_INTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009030));

                /// GPADC Data High Interrupt Status Register
                pub const GP_DATAH_INTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009034));

                /// GPADC Data Interrupt Status Register
                pub const GP_DATA_INTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009038));

                /// GPADC CH0 Compare Data Register
                pub const GP_CH0_CMP_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009040));

                /// GPADC CH1 Compare Data Register
                pub const GP_CH1_CMP_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009044));

                /// GPADC CH0 Data Register
                pub const GP_CH0_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009080));

                /// GPADC CH1 Data Register
                pub const GP_CH1_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009084));
            };

            /// Touch Panel ADC
            pub const TPADC = struct {
                /// TP Control Register 0
                pub const TP_CTRL0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009c00));

                /// TP Control Register 1
                pub const TP_CTRL1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009c04));

                /// TP Control Register 2
                pub const TP_CTRL2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009c08));

                /// TP Control Register 3
                pub const TP_CTRL3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009c0c));

                /// TP Interrupt FIFO Control Register
                pub const TP_INT_FIFO_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009c10));

                /// TP Interrupt FIFO Status Register
                pub const TP_INT_FIFO_STAT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009c14));

                /// TP Calibration Data Register
                pub const TP_CALI_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009c1c));

                /// TP Data Register
                pub const TP_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009c24));
            };

            /// Low Rate ADC
            pub const LRADC = struct {
                /// LRADC Control Register
                pub const LRADC_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009800));

                /// LRADC Interrupt Control Register
                pub const LRADC_INTC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009804));

                /// LRADC Interrupt Status Register
                pub const LRADC_INTS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2009808));

                /// LRADC Data Register
                pub const LRADC_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200980c));
            };

            /// Pulse Width Modulation
            pub const PWM = struct {
                /// PWM IRQ Enable Register
                pub const PIER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c00));

                /// PWM IRQ Status Register
                pub const PISR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c04));

                /// Capture IRQ Enable Register
                pub const CIER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c10));

                /// Capture IRQ Status Register
                pub const CISR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c14));

                /// PWM01 Clock Configuration Register
                pub const PCCR01 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c20));

                /// PWM23 Clock Configuration Register
                pub const PCCR23 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c24));

                /// PWM45 Clock Configuration Register
                pub const PCCR45 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c28));

                /// PWM67 Clock Configuration Register
                pub const PCCR67 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c2c));

                /// PWM Clock Gating Register
                pub const PCGR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c40));

                /// PWM01 Dead Zone Control Register
                pub const PDZCR01 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c60));

                /// PWM23 Dead Zone Control Register
                pub const PDZCR23 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c64));

                /// PWM45 Dead Zone Control Register
                pub const PDZCR45 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c68));

                /// PWM67 Dead Zone Control Register
                pub const PDZCR67 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c6c));

                /// PWM Enable Register
                pub const PER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c80));

                /// PWM Group0 Register
                pub const PGR0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c90));

                /// PWM Group1 Register
                pub const PGR1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c94));

                /// PWM Group2 Register
                pub const PGR2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c98));

                /// PWM Group3 Register
                pub const PGR3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000c9c));

                /// Capture Enable Register
                pub const CER = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000cc0));

                /// PWM Control Register
                pub const pcr0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d00));

                /// PWM Control Register
                pub const pcr1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d04));

                /// PWM Control Register
                pub const pcr2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d08));

                /// PWM Control Register
                pub const pcr3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d0c));

                /// PWM Control Register
                pub const pcr4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d10));

                /// PWM Control Register
                pub const pcr5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d14));

                /// PWM Control Register
                pub const pcr6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d18));

                /// PWM Control Register
                pub const pcr7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d1c));

                /// pcr group: PWM Control Register
                pub const pcr = .{ pcr0, pcr1, pcr2, pcr3, pcr4, pcr5, pcr6, pcr7 };

                /// PWM Period Register
                pub const ppr0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d04));

                /// PWM Period Register
                pub const ppr1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d08));

                /// PWM Period Register
                pub const ppr2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d0c));

                /// PWM Period Register
                pub const ppr3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d10));

                /// PWM Period Register
                pub const ppr4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d14));

                /// PWM Period Register
                pub const ppr5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d18));

                /// PWM Period Register
                pub const ppr6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d1c));

                /// PWM Period Register
                pub const ppr7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d20));

                /// ppr group: PWM Period Register
                pub const ppr = .{ ppr0, ppr1, ppr2, ppr3, ppr4, ppr5, ppr6, ppr7 };

                /// PWM Count Register
                pub const pcntr0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d08));

                /// PWM Count Register
                pub const pcntr1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d0c));

                /// PWM Count Register
                pub const pcntr2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d10));

                /// PWM Count Register
                pub const pcntr3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d14));

                /// PWM Count Register
                pub const pcntr4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d18));

                /// PWM Count Register
                pub const pcntr5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d1c));

                /// PWM Count Register
                pub const pcntr6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d20));

                /// PWM Count Register
                pub const pcntr7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d24));

                /// pcntr group: PWM Count Register
                pub const pcntr = .{ pcntr0, pcntr1, pcntr2, pcntr3, pcntr4, pcntr5, pcntr6, pcntr7 };

                /// PWM Pulse Count Register
                pub const ppcntr0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d0c));

                /// PWM Pulse Count Register
                pub const ppcntr1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d10));

                /// PWM Pulse Count Register
                pub const ppcntr2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d14));

                /// PWM Pulse Count Register
                pub const ppcntr3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d18));

                /// PWM Pulse Count Register
                pub const ppcntr4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d1c));

                /// PWM Pulse Count Register
                pub const ppcntr5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d20));

                /// PWM Pulse Count Register
                pub const ppcntr6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d24));

                /// PWM Pulse Count Register
                pub const ppcntr7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d28));

                /// ppcntr group: PWM Pulse Count Register
                pub const ppcntr = .{ ppcntr0, ppcntr1, ppcntr2, ppcntr3, ppcntr4, ppcntr5, ppcntr6, ppcntr7 };

                /// Capture Control Register
                pub const ccr0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d10));

                /// Capture Control Register
                pub const ccr1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d14));

                /// Capture Control Register
                pub const ccr2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d18));

                /// Capture Control Register
                pub const ccr3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d1c));

                /// Capture Control Register
                pub const ccr4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d20));

                /// Capture Control Register
                pub const ccr5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d24));

                /// Capture Control Register
                pub const ccr6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d28));

                /// Capture Control Register
                pub const ccr7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d2c));

                /// ccr group: Capture Control Register
                pub const ccr = .{ ccr0, ccr1, ccr2, ccr3, ccr4, ccr5, ccr6, ccr7 };

                /// Capture Rise Lock Register
                pub const crlr0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d14));

                /// Capture Rise Lock Register
                pub const crlr1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d18));

                /// Capture Rise Lock Register
                pub const crlr2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d1c));

                /// Capture Rise Lock Register
                pub const crlr3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d20));

                /// Capture Rise Lock Register
                pub const crlr4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d24));

                /// Capture Rise Lock Register
                pub const crlr5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d28));

                /// Capture Rise Lock Register
                pub const crlr6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d2c));

                /// Capture Rise Lock Register
                pub const crlr7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d30));

                /// crlr group: Capture Rise Lock Register
                pub const crlr = .{ crlr0, crlr1, crlr2, crlr3, crlr4, crlr5, crlr6, crlr7 };

                /// Capture Fall Lock Register
                pub const cflr0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d18));

                /// Capture Fall Lock Register
                pub const cflr1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d1c));

                /// Capture Fall Lock Register
                pub const cflr2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d20));

                /// Capture Fall Lock Register
                pub const cflr3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d24));

                /// Capture Fall Lock Register
                pub const cflr4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d28));

                /// Capture Fall Lock Register
                pub const cflr5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d2c));

                /// Capture Fall Lock Register
                pub const cflr6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d30));

                /// Capture Fall Lock Register
                pub const cflr7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2000d34));

                /// cflr group: Capture Fall Lock Register
                pub const cflr = .{ cflr0, cflr1, cflr2, cflr3, cflr4, cflr5, cflr6, cflr7 };
            };

            /// LEDC
            pub const LEDC = struct {
                /// LEDC Control Register
                pub const LEDC_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    LEDC_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [1:1]
                    LEDC_SOFT_RESET: u1 = 0,

                    /// [2:2]
                    LED_MSB_0: enum(u1) {
                        ///
                        LSB = 0,

                        ///
                        MSB = 1,
                    } = .LSB,

                    /// [3:3]
                    LED_MSB_1: enum(u1) {
                        ///
                        LSB = 0,

                        ///
                        MSB = 1,
                    } = .LSB,

                    /// [4:4]
                    LED_MSB_2: enum(u1) {
                        ///
                        LSB = 0,

                        ///
                        MSB = 1,
                    } = .LSB,

                    /// [5:5]
                    LED_MSB_3: enum(u1) {
                        ///
                        LSB = 0,

                        ///
                        MSB = 1,
                    } = .LSB,

                    /// [6:8]
                    LED_RGB_MODE: enum(u3) {
                        ///
                        GRB = 0b000,

                        ///
                        GBR = 0b001,

                        ///
                        RGB = 0b010,

                        ///
                        RBG = 0b011,

                        ///
                        BGR = 0b100,

                        ///
                        BRG = 0b101,
                    } = .GRB,

                    /// [9:9]
                    res0: u1 = 0,

                    /// [10:10]
                    RESET_LED_EN: u1 = 0,

                    /// [11:15]
                    res1: u5 = 0,

                    /// [16:28]
                    TOTAL_DATA_LENGTH: u13 = 0,

                    /// [29:31]
                    res2: u3 = 0,
                }), @ptrFromInt(0x2008000));

                /// LEDC T0 T1 Timing Control Register
                pub const LED_T01_TIMING_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:5]
                    T0L_TIME: u6 = 0,

                    /// [6:10]
                    T0H_TIME: u5 = 0,

                    /// [11:15]
                    res0: u5 = 0,

                    /// [16:20]
                    T1L_TIME: u5 = 0,

                    /// [21:26]
                    T1H_TIME: u6 = 0,

                    /// [27:31]
                    res1: u5 = 0,
                }), @ptrFromInt(0x2008004));

                /// LEDC Data Finish Counter Register
                pub const LEDC_DATA_FINISH_CNT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:12]
                    LED_DATA_FINISH_CNT: u13 = 0,

                    /// [13:15]
                    res0: u3 = 0,

                    /// [16:29]
                    LED_WAIT_DATA_TIME: u14 = 0,

                    /// [30:31]
                    res1: u2 = 0,
                }), @ptrFromInt(0x2008008));

                /// LEDC Reset Timing Control Register
                pub const LED_RESET_TIMING_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:9]
                    LED_NUM: u10 = 0,

                    /// [10:15]
                    res0: u6 = 0,

                    /// [16:28]
                    TR_TIME: u13 = 0,

                    /// [29:31]
                    res1: u3 = 0,
                }), @ptrFromInt(0x200800c));

                /// LEDC Wait Time0 Control Register
                pub const LEDC_WAIT_TIME0_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:7]
                    TOTAL_WAIT_TIME0: u8 = 0,

                    /// [8:8]
                    WAIT_TIM0_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [9:31]
                    res0: u23 = 0,
                }), @ptrFromInt(0x2008010));

                /// LEDC Data Register
                pub const LEDC_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008014));

                /// LEDC DMA Control Register
                pub const LEDC_DMA_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:4]
                    LEDC_FIFO_TRIG_LEVEL: u5 = 0,

                    /// [5:5]
                    LEDC_DMA_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [6:31]
                    res0: u26 = 0,
                }), @ptrFromInt(0x2008018));

                /// LEDC Interrupt Control Register
                pub const LEDC_INT_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    LED_TRANS_FINISH_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [1:1]
                    FIFO_CPUREQ_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [2:2]
                    res0: u1 = 0,

                    /// [3:3]
                    WAITDATA_TIMEOUT_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [4:4]
                    FIFO_OVERFLOW_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [5:5]
                    GLOBAL_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [6:31]
                    res1: u26 = 0,
                }), @ptrFromInt(0x200801c));

                /// LEDC Interrupt Status Register
                pub const LEDC_INT_STS = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0]
                    LEC_TRANS_FINISH_INT: enum(u1) {
                        ///
                        not_trans_complete = 0,

                        ///
                        trans_complete = 1,
                    } = .not_trans_complete,

                    /// [1:1]
                    FIFO_CPUREQ_INT: enum(u1) {
                        ///
                        not_request = 0,

                        ///
                        request = 1,
                    } = .not_request,

                    /// [2:2]
                    res0: u1 = 0,

                    /// [3:3]
                    WAITDATA_TIMEOUT_INT: enum(u1) {
                        ///
                        not_timeout = 0,

                        ///
                        timeout = 1,
                    } = .not_timeout,

                    /// [4:4]
                    FIFO_OVERFLOW_INT: enum(u1) {
                        ///
                        not_overflow = 0,

                        ///
                        overflow = 1,
                    } = .not_overflow,

                    /// [5:9]
                    res1: u5 = 0,

                    /// [10:15]
                    FIFO_WLW: u6 = 0,

                    /// [16:16]
                    FIFO_FULL: u1 = 0,

                    /// [17:17]
                    FIFO_EMPTY: u1 = 0,

                    /// [18:31]
                    res2: u14 = 0,
                }), @ptrFromInt(0x2008020));

                /// LEDC Wait Time1 Control Register
                pub const LEDC_WAIT_TIME1_CTRL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:30]
                    TOTAL_WAIT_TIME1: u31 = 0,

                    /// [31:31]
                    WAIT_TIM1_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,
                }), @ptrFromInt(0x2008028));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008030));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008034));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008038));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200803c));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008040));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008044));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008048));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200804c));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA8 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008050));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA9 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008054));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA10 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008058));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA11 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200805c));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA12 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008060));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA13 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008064));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA14 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008068));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA15 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200806c));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA16 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008070));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA17 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008074));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA18 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008078));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA19 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200807c));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA20 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008080));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA21 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008084));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA22 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008088));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA23 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200808c));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA24 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008090));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA25 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008094));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA26 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2008098));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA27 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200809c));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA28 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20080a0));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA29 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20080a4));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA30 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20080a8));

                /// LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA31 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x20080ac));

                /// LEDC_FIFO_DATA group: LEDC FIFO Data Register
                pub const LEDC_FIFO_DATA = .{ LEDC_FIFO_DATA0, LEDC_FIFO_DATA1, LEDC_FIFO_DATA2, LEDC_FIFO_DATA3, LEDC_FIFO_DATA4, LEDC_FIFO_DATA5, LEDC_FIFO_DATA6, LEDC_FIFO_DATA7, LEDC_FIFO_DATA8, LEDC_FIFO_DATA9, LEDC_FIFO_DATA10, LEDC_FIFO_DATA11, LEDC_FIFO_DATA12, LEDC_FIFO_DATA13, LEDC_FIFO_DATA14, LEDC_FIFO_DATA15, LEDC_FIFO_DATA16, LEDC_FIFO_DATA17, LEDC_FIFO_DATA18, LEDC_FIFO_DATA19, LEDC_FIFO_DATA20, LEDC_FIFO_DATA21, LEDC_FIFO_DATA22, LEDC_FIFO_DATA23, LEDC_FIFO_DATA24, LEDC_FIFO_DATA25, LEDC_FIFO_DATA26, LEDC_FIFO_DATA27, LEDC_FIFO_DATA28, LEDC_FIFO_DATA29, LEDC_FIFO_DATA30, LEDC_FIFO_DATA31 };
            };

            /// Ethernet Medium Access Controller
            pub const EMAC = struct {
                /// EMAC Basic Control Register0
                pub const EMAC_BASIC_CTL0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] EMAC Transfer Mode
                    DUPLEX: enum(u1) {
                        ///
                        Half_Duplex = 0,

                        ///
                        Full_Duplex = 1,
                    } = .Half_Duplex,

                    /// [1:1] EMAC Loopback Mode For Test
                    LOOPBACK: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [2:3] EMAC Working Speed
                    SPEED: enum(u2) {
                        ///
                        S1000 = 0b00,

                        ///
                        Reserved = 0b01,

                        ///
                        S10 = 0b10,

                        ///
                        S100 = 0b11,
                    } = .S1000,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x4500000));

                /// EMAC Basic Control Register1
                pub const EMAC_BASIC_CTL1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Soft Reset all Registers and Logic
                    SOFT_RST: enum(u1) {
                        ///
                        no_valid = 0,

                        ///
                        reset = 1,
                    } = .no_valid,

                    /// [1:1] RX TX DMA Priority
                    RX_TX_PRI: enum(u1) {
                        ///
                        Same = 0,

                        ///
                        RoT = 1,
                    } = .Same,

                    /// [2:23]
                    res0: u22 = 0,

                    /// [24:29] The burst length of RX and TX DMA transfer
                    BURST_LEN: u6 = 0,

                    /// [30:31]
                    res1: u2 = 0,
                }), @ptrFromInt(0x4500004));

                /// EMAC Interrupt Status Register
                pub const EMAC_INT_STA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Frame Transmission Interrupt Pending
                    TX_P: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [1:1] Transmission DMA Stopped Interrupt Pending
                    TX_DMA_STOPPED_P: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [2:2] TX Buffer UA Interrupt Pending
                    TX_BUF_UA_P: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [3:3] Transmitter Timeout Interrupt Pending
                    TX_TIMEOUT_P: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [4:4] TX FIFO Underflow Interrupt Pending
                    TX_UNDERFLOW_P: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [5:5] Total interrupt pending which the frame is transmitted to FIFO
                    TX_EARLY_P: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [6:7]
                    res0: u2 = 0,

                    /// [8:8] Frame RX Completed Interrupt Pending
                    RX_P: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [9:9] RX Buffer UA Interrupt Pending
                    RX_BUF_UA_P: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [10:10] When this bit asserted, the RX DMA FSM is stopped.
                    RX_DMA_STOPPED_P: u1 = 0,

                    /// [11:11] RX Timeout Interrupt Pending
                    RX_TIMEOUT_P: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [12:12] RX FIFO Overflow Error Interrupt Pending
                    RX_OVERFLOW_P: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [13:13] RX DMA Filled First Data Buffer of the Receive Frame Interrupt Pending
                    RX_EARLY_P: enum(u1) {
                        ///
                        no_pending = 0,

                        ///
                        pending = 1,
                    } = .no_pending,

                    /// [14:15]
                    res1: u2 = 0,

                    /// [16:16] RMII Link Status Changed Interrupt Pending
                    RGMII_LINK_STA_P: enum(u1) {
                        ///
                        No_Pending = 0,

                        ///
                        Pending = 1,
                    } = .No_Pending,

                    /// [17:31]
                    res2: u15 = 0,
                }), @ptrFromInt(0x4500008));

                /// EMAC Interrupt Enable Register
                pub const EMAC_INT_EN = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Transmit Interrupt
                    TX_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [1:1] Transmit DMA FSM Stopped Interrupt
                    TX_DMA_STOPPED_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [2:2] Transmit Buffer Available Interrupt
                    TX_BUF_UA_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [3:3] Transmit Timeout Interrupt
                    TX_TIMEOUT_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [4:4] Transmit Underflow Interrupt
                    TX_UNDERFLOW_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [5:5] Early Transmit Interrupt
                    TX_EARLY_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [6:7]
                    res0: u2 = 0,

                    /// [8:8] Receive Interrupt
                    RX_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [9:9] Receive Buffer Unavailable Interrupt
                    RX_BUF_UA_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [10:10] Receive DMA FSM Stopped Interrupt
                    RX_DMA_STOPPED_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [11:11] Receive Timeout Interrupt
                    RX_TIMEOUT_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [12:12] Receive Overflow Interrupt
                    RX_OVERFLOW_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [13:13] Early Receive Interrupt
                    RX_EARLY_INT_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,

                    /// [14:31]
                    res1: u18 = 0,
                }), @ptrFromInt(0x450000c));

                /// EMAC Transmit Control Register0
                pub const EMAC_TX_CTL0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:29]
                    res0: u30 = 0,

                    /// [30:30] Frame Transmit Length Control
                    TX_FRM_LEN_CTL: enum(u1) {
                        ///
                        B2048 = 0,

                        ///
                        B16384 = 1,
                    } = .B2048,

                    /// [31:31] Enable Transmitter
                    TX_EN: enum(u1) {
                        ///
                        Disable = 0,

                        ///
                        Enable = 1,
                    } = .Disable,
                }), @ptrFromInt(0x4500010));

                /// EMAC Transmit Control Register1
                pub const EMAC_TX_CTL1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Flush the data in the TX FIFO
                    FLUSH_TX_FIFO: enum(u1) {
                        ///
                        enable = 0,

                        ///
                        disable = 1,
                    } = .enable,

                    /// [1:1] Transmission Mode
                    TX_MD: enum(u1) {
                        ///
                        greater_than_th = 0,

                        ///
                        locate_full_frame = 1,
                    } = .greater_than_th,

                    /// [2:7]
                    res0: u6 = 0,

                    /// [8:10] Threshold value of TX DMA FIFO
                    TX_TH: enum(u3) {
                        ///
                        T64 = 0b000,

                        ///
                        T128 = 0b001,

                        ///
                        T192 = 0b010,

                        ///
                        T256 = 0b011,
                    } = .T64,

                    /// [11:29]
                    res1: u19 = 0,

                    /// [30:30] Transmit DMA Enable
                    TX_DMA_EN: enum(u1) {
                        ///
                        stop = 0,

                        ///
                        start = 1,
                    } = .stop,

                    /// [31:31] Transmit DMA FSM Start
                    TX_DMA_START: enum(u1) {
                        ///
                        no_valid = 0,

                        ///
                        start = 1,
                    } = .no_valid,
                }), @ptrFromInt(0x4500014));

                /// EMAC Transmit Flow Control Register
                pub const EMAC_TX_FLOW_CTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] TX Flow Control Enable
                    TX_FLOW_CTL_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [1:1]
                    ZQP_FRM_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:19]
                    PAUSE_TIME: u16 = 0,

                    /// [20:21]
                    TX_PAUSE_FRM_SLOT: u2 = 0,

                    /// [22:30]
                    res1: u9 = 0,

                    /// [31:31]
                    TX_FLOW_CTL_STA: u1 = 0,
                }), @ptrFromInt(0x450001c));

                /// EMAC Transmit Descriptor List Address Register
                pub const EMAC_TX_DMA_DESC_LIST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4500020));

                /// EMAC Receive Control Register0
                pub const EMAC_RX_CTL0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    res0: u16 = 0,

                    /// [16:16]
                    RX_FLOW_CTL_EN: u1 = 0,

                    /// [17:17]
                    RX_PAUSE_FRM_MD: enum(u1) {
                        ///
                        only_multicast = 0,

                        ///
                        also_unicast_mac0 = 1,
                    } = .only_multicast,

                    /// [18:26]
                    res1: u9 = 0,

                    /// [27:27] Check CRC Enable
                    CHECK_CRC: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        check = 1,
                    } = .disable,

                    /// [28:28]
                    STRIP_FCS: u1 = 0,

                    /// [29:29] Jumbo Frame Enable
                    JUMBO_FRM_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [30:30] Frame Receive Length Control
                    RX_FRM_LEN_CTL: enum(u1) {
                        ///
                        B2048 = 0,

                        ///
                        B16384 = 1,
                    } = .B2048,

                    /// [31:31] Enable Receiver
                    RX_EN: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,
                }), @ptrFromInt(0x4500024));

                /// EMAC Receive Control Register1
                pub const EMAC_RX_CTL1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Flush Receive Frames
                    FLUSH_RX_FRM: enum(u1) {
                        ///
                        enable = 0,

                        ///
                        disable = 1,
                    } = .enable,

                    /// [1:1] Receive Mode
                    RX_MD: enum(u1) {
                        ///
                        greater_than_th = 0,

                        ///
                        locate_full_frame = 1,
                    } = .greater_than_th,

                    /// [2:2]
                    RX_RUNT_FRM: u1 = 0,

                    /// [3:3]
                    RX_ERR_FRM: enum(u1) {
                        ///
                        drop = 0,

                        ///
                        forward = 1,
                    } = .drop,

                    /// [4:5] Threshold for RX DMA FIFO Start
                    RX_TH: enum(u2) {
                        ///
                        T64 = 0b00,

                        ///
                        T32 = 0b01,

                        ///
                        T96 = 0b10,

                        ///
                        T128 = 0b11,
                    } = .T64,

                    /// [6:19]
                    res0: u14 = 0,

                    /// [20:21] Threshold for Activating Flow Control
                    RX_FLOW_CTL_TH_ACT: enum(u2) {
                        ///
                        FM1K = 0b00,

                        ///
                        FM2K = 0b01,

                        ///
                        FM3K = 0b10,

                        ///
                        FM4K = 0b11,
                    } = .FM1K,

                    /// [22:23] Threshold for Deactivating Flow Control
                    RX_FLOW_CTL_TH_DEACT: enum(u2) {
                        ///
                        FM1K = 0b00,

                        ///
                        FM2K = 0b01,

                        ///
                        FM3K = 0b10,

                        ///
                        FM4K = 0b11,
                    } = .FM1K,

                    /// [24:24] Receive FIFO Flow Control Enable
                    RX_FIFO_FLOW_CTL: enum(u1) {
                        ///
                        disable = 0,

                        ///
                        enable = 1,
                    } = .disable,

                    /// [25:29]
                    res1: u5 = 0,

                    /// [30:30] Receive DMA Enable
                    RX_EMA_EN: enum(u1) {
                        ///
                        stop = 0,

                        ///
                        start = 1,
                    } = .stop,

                    /// [31:31]
                    RX_DMA_START: u1 = 0,
                }), @ptrFromInt(0x4500028));

                /// EMAC Receive Descriptor List Address Register
                pub const EMAC_RX_DMA_DESC_LIST = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4500034));

                /// EMAC Receive Frame Filter Register
                pub const EMAC_RX_FRM_FLT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] Receive All Frame
                    RX_ALL: enum(u1) {
                        ///
                        receive_when_passed = 0,

                        ///
                        receive_all_update = 1,
                    } = .receive_when_passed,

                    /// [1:1]
                    FLT_MD: enum(u1) {
                        ///
                        passed_when_matched = 0,

                        ///
                        receive_when_passed = 1,
                    } = .passed_when_matched,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:4]
                    DA_INV_FILTER: enum(u1) {
                        ///
                        normal = 0,

                        ///
                        inverse_cmp_da = 1,
                    } = .normal,

                    /// [5:5] Receive SA Invert Filter Set
                    SA_INV_FILTER: enum(u1) {
                        ///
                        matched = 0,

                        ///
                        unmatched = 1,
                    } = .matched,

                    /// [6:6] Receive SA Filter Enable
                    SA_FILTER_EN: enum(u1) {
                        ///
                        receive_update = 0,

                        ///
                        update_drop_unmatched = 1,
                    } = .receive_update,

                    /// [7:7]
                    res1: u1 = 0,

                    /// [8:8] Filter Unicast Frames Set
                    HASH_UNICAST: enum(u1) {
                        ///
                        DA_field = 0,

                        ///
                        hash_table = 1,
                    } = .DA_field,

                    /// [9:9] Filter Multicast Frames Set
                    HASH_MULTICAST: enum(u1) {
                        ///
                        DA_field = 0,

                        ///
                        hash_table = 1,
                    } = .DA_field,

                    /// [10:11]
                    res2: u2 = 0,

                    /// [12:13] Receive Control Frames Filter
                    CTL_FRM_FILTER: enum(u2) {
                        ///
                        Drop_all = 0b00,

                        ///
                        Receive_all = 0b10,

                        ///
                        Receive_all_when_filter = 0b11,
                    } = .Drop_all,

                    /// [14:15]
                    res3: u2 = 0,

                    /// [16:16] Receive All Multicast Frames Filter
                    RX_ALL_MULTICAST: enum(u1) {
                        ///
                        Filter = 0,

                        ///
                        Receive_all = 1,
                    } = .Filter,

                    /// [17:17] Disable Receive Broadcast Frames
                    DIS_BROADCAST: enum(u1) {
                        ///
                        Receive = 0,

                        ///
                        Drop = 1,
                    } = .Receive,

                    /// [18:30]
                    res4: u13 = 0,

                    /// [31:31] Disable Address Filter
                    DIS_ADDR_FILTER: enum(u1) {
                        ///
                        Enable = 0,

                        ///
                        Disable = 1,
                    } = .Enable,
                }), @ptrFromInt(0x4500038));

                /// EMAC Hash Table Register0
                pub const EMAC_RX_HASH0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4500040));

                /// EMAC Hash Table Register1
                pub const EMAC_RX_HASH1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4500044));

                /// EMAC Management Interface Command Register
                pub const EMAC_MII_CMD = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] MII Status
                    MII_BUSY: u1 = 0,

                    /// [1:1] MII Write and Read
                    MII_WR: enum(u1) {
                        ///
                        R = 0,

                        ///
                        W = 1,
                    } = .R,

                    /// [2:3]
                    res0: u2 = 0,

                    /// [4:8] PHY Register Address
                    PHY_REG_ADDR: u5 = 0,

                    /// [9:11]
                    res1: u3 = 0,

                    /// [12:16] PHY Address
                    PHY_ADDR: u5 = 0,

                    /// [17:19]
                    res2: u3 = 0,

                    /// [20:22] MDC Clock DIvider Ratio
                    MDC_DIV_RATIO_M: enum(u3) {
                        ///
                        R16 = 0b000,

                        ///
                        R32 = 0b001,

                        ///
                        R64 = 0b010,

                        ///
                        R128 = 0b011,
                    } = .R16,

                    /// [23:31]
                    res3: u9 = 0,
                }), @ptrFromInt(0x4500048));

                /// EMAC Management Interface Data Register
                pub const EMAC_MII_DATA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    MII_DATA: u16 = 0,

                    /// [16:31]
                    res0: u16 = 0,
                }), @ptrFromInt(0x450004c));

                /// EMAC MAC Address High Register
                pub const EMAC_ADDR_HIGH0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    MAC_ADDR_HIGH: u16 = 0,

                    /// [16:23]
                    res0: u8 = 0,

                    /// [24:29] MAC Address Byte Control Mask
                    MAC_ADDR_BYTE_CTL: u6 = 0,

                    /// [30:30] MAC Address Type
                    MAC_ADDR_TYPE: enum(u1) {
                        ///
                        dst = 0,

                        ///
                        src = 1,
                    } = .dst,

                    /// [31:31] MAC Address Valid
                    MAC_ADDR_CTL: enum(u1) {
                        ///
                        invalid = 0,

                        ///
                        valid = 1,
                    } = .invalid,
                }), @ptrFromInt(0x4500058));

                /// EMAC MAC Address High Register
                pub const EMAC_ADDR_HIGH1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    MAC_ADDR_HIGH: u16 = 0,

                    /// [16:23]
                    res0: u8 = 0,

                    /// [24:29] MAC Address Byte Control Mask
                    MAC_ADDR_BYTE_CTL: u6 = 0,

                    /// [30:30] MAC Address Type
                    MAC_ADDR_TYPE: enum(u1) {
                        ///
                        dst = 0,

                        ///
                        src = 1,
                    } = .dst,

                    /// [31:31] MAC Address Valid
                    MAC_ADDR_CTL: enum(u1) {
                        ///
                        invalid = 0,

                        ///
                        valid = 1,
                    } = .invalid,
                }), @ptrFromInt(0x450005c));

                /// EMAC MAC Address High Register
                pub const EMAC_ADDR_HIGH2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    MAC_ADDR_HIGH: u16 = 0,

                    /// [16:23]
                    res0: u8 = 0,

                    /// [24:29] MAC Address Byte Control Mask
                    MAC_ADDR_BYTE_CTL: u6 = 0,

                    /// [30:30] MAC Address Type
                    MAC_ADDR_TYPE: enum(u1) {
                        ///
                        dst = 0,

                        ///
                        src = 1,
                    } = .dst,

                    /// [31:31] MAC Address Valid
                    MAC_ADDR_CTL: enum(u1) {
                        ///
                        invalid = 0,

                        ///
                        valid = 1,
                    } = .invalid,
                }), @ptrFromInt(0x4500060));

                /// EMAC MAC Address High Register
                pub const EMAC_ADDR_HIGH3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    MAC_ADDR_HIGH: u16 = 0,

                    /// [16:23]
                    res0: u8 = 0,

                    /// [24:29] MAC Address Byte Control Mask
                    MAC_ADDR_BYTE_CTL: u6 = 0,

                    /// [30:30] MAC Address Type
                    MAC_ADDR_TYPE: enum(u1) {
                        ///
                        dst = 0,

                        ///
                        src = 1,
                    } = .dst,

                    /// [31:31] MAC Address Valid
                    MAC_ADDR_CTL: enum(u1) {
                        ///
                        invalid = 0,

                        ///
                        valid = 1,
                    } = .invalid,
                }), @ptrFromInt(0x4500064));

                /// EMAC MAC Address High Register
                pub const EMAC_ADDR_HIGH4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    MAC_ADDR_HIGH: u16 = 0,

                    /// [16:23]
                    res0: u8 = 0,

                    /// [24:29] MAC Address Byte Control Mask
                    MAC_ADDR_BYTE_CTL: u6 = 0,

                    /// [30:30] MAC Address Type
                    MAC_ADDR_TYPE: enum(u1) {
                        ///
                        dst = 0,

                        ///
                        src = 1,
                    } = .dst,

                    /// [31:31] MAC Address Valid
                    MAC_ADDR_CTL: enum(u1) {
                        ///
                        invalid = 0,

                        ///
                        valid = 1,
                    } = .invalid,
                }), @ptrFromInt(0x4500068));

                /// EMAC MAC Address High Register
                pub const EMAC_ADDR_HIGH5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    MAC_ADDR_HIGH: u16 = 0,

                    /// [16:23]
                    res0: u8 = 0,

                    /// [24:29] MAC Address Byte Control Mask
                    MAC_ADDR_BYTE_CTL: u6 = 0,

                    /// [30:30] MAC Address Type
                    MAC_ADDR_TYPE: enum(u1) {
                        ///
                        dst = 0,

                        ///
                        src = 1,
                    } = .dst,

                    /// [31:31] MAC Address Valid
                    MAC_ADDR_CTL: enum(u1) {
                        ///
                        invalid = 0,

                        ///
                        valid = 1,
                    } = .invalid,
                }), @ptrFromInt(0x450006c));

                /// EMAC MAC Address High Register
                pub const EMAC_ADDR_HIGH6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:15]
                    MAC_ADDR_HIGH: u16 = 0,

                    /// [16:23]
                    res0: u8 = 0,

                    /// [24:29] MAC Address Byte Control Mask
                    MAC_ADDR_BYTE_CTL: u6 = 0,

                    /// [30:30] MAC Address Type
                    MAC_ADDR_TYPE: enum(u1) {
                        ///
                        dst = 0,

                        ///
                        src = 1,
                    } = .dst,

                    /// [31:31] MAC Address Valid
                    MAC_ADDR_CTL: enum(u1) {
                        ///
                        invalid = 0,

                        ///
                        valid = 1,
                    } = .invalid,
                }), @ptrFromInt(0x4500070));

                /// EMAC_ADDR_HIGH group: EMAC MAC Address High Register
                pub const EMAC_ADDR_HIGH = .{ EMAC_ADDR_HIGH0, EMAC_ADDR_HIGH1, EMAC_ADDR_HIGH2, EMAC_ADDR_HIGH3, EMAC_ADDR_HIGH4, EMAC_ADDR_HIGH5, EMAC_ADDR_HIGH6 };

                /// EMAC MAC Address Low Register
                pub const EMAC_ADDR_LOW0 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4500054));

                /// EMAC MAC Address Low Register
                pub const EMAC_ADDR_LOW1 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4500058));

                /// EMAC MAC Address Low Register
                pub const EMAC_ADDR_LOW2 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x450005c));

                /// EMAC MAC Address Low Register
                pub const EMAC_ADDR_LOW3 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4500060));

                /// EMAC MAC Address Low Register
                pub const EMAC_ADDR_LOW4 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4500064));

                /// EMAC MAC Address Low Register
                pub const EMAC_ADDR_LOW5 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4500068));

                /// EMAC MAC Address Low Register
                pub const EMAC_ADDR_LOW6 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x450006c));

                /// EMAC MAC Address Low Register
                pub const EMAC_ADDR_LOW7 = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x4500070));

                /// EMAC_ADDR_LOW group: EMAC MAC Address Low Register
                pub const EMAC_ADDR_LOW = .{ EMAC_ADDR_LOW0, EMAC_ADDR_LOW1, EMAC_ADDR_LOW2, EMAC_ADDR_LOW3, EMAC_ADDR_LOW4, EMAC_ADDR_LOW5, EMAC_ADDR_LOW6, EMAC_ADDR_LOW7 };

                /// EMAC Transmit DMA Status Register
                pub const EMAC_TX_DMA_STA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:2] The State of Transmit DMA FSM
                    TX_DMA_STA: enum(u3) {
                        ///
                        stop = 0b000,

                        ///
                        run_fetch_desc = 0b001,

                        ///
                        run_wait_sta = 0b010,

                        ///
                        run_trans_data = 0b011,

                        ///
                        @"suspend" = 0b110,

                        ///
                        run_close_desc = 0b111,
                    } = .stop,

                    /// [3:31]
                    res0: u29 = 0,
                }), @ptrFromInt(0x45000b0));

                /// EMAC Current Transmit Descriptor Register
                pub const EMAC_TX_CUR_DESC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x45000b4));

                /// EMAC Current Transmit Buffer Address Register
                pub const EMAC_TX_CUR_BUF = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x45000b8));

                /// EMAC Receive DMA Status Register
                pub const EMAC_RX_DMA_STA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:2] The State of RX DMA FSM
                    RX_DMA_STA: enum(u3) {
                        ///
                        stop = 0b000,

                        ///
                        run_fetch_desc = 0b001,

                        ///
                        run_wait_frm = 0b011,

                        ///
                        @"suspend" = 0b100,

                        ///
                        run_close_desc = 0b101,

                        ///
                        run_trans_data = 0b111,
                    } = .stop,

                    /// [3:31]
                    res0: u29 = 0,
                }), @ptrFromInt(0x45000c0));

                /// EMAC Current Receive Descriptor Register
                pub const EMAC_RX_CUR_DESC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x45000c4));

                /// EMAC Current Receive Buffer Address Register
                pub const EMAC_RX_CUR_BUF = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x45000c8));

                /// EMAC RGMII Status Register
                pub const EMAC_RGMII_STA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:0] The link mode of the RGMII interface
                    RGMII_LINK_MD: enum(u1) {
                        ///
                        half_duplex = 0,

                        ///
                        full_duplex = 1,
                    } = .half_duplex,

                    /// [1:2] The link speed of the RGMII interface
                    RGMII_LINK_SPD: enum(u2) {
                        ///
                        S2_5 = 0b00,

                        ///
                        S25 = 0b01,

                        ///
                        S125 = 0b10,
                    } = .S2_5,

                    /// [3:3] The link status of the RGMII interface
                    RGMII_LINK: enum(u1) {
                        ///
                        down = 0,

                        ///
                        up = 1,
                    } = .down,

                    /// [4:31]
                    res0: u28 = 0,
                }), @ptrFromInt(0x45000d0));
            };

            /// Counsumer Infrared Receiver
            pub const CIR_RX = struct {
                /// CIR Control Register
                pub const CIR_CTL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7040000));

                /// CIR Receiver Pulse Configure Register
                pub const CIR_RXPCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7040010));

                /// CIR Receiver FIFO Register
                pub const CIR_RXFIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7040020));

                /// CIR Receiver Interrupt Control Register
                pub const CIR_RXINT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x704002c));

                /// CIR Receiver Status Register
                pub const CIR_RXSTA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7040030));

                /// CIR Receiver Configure Register
                pub const CIR_RXCFG = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x7040034));
            };

            /// Counsumer Infrared Transmitter
            pub const CIR_TX = struct {
                /// CIR Transmit Global Register
                pub const CIR_TGLR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003000));

                /// CIR Transmit Modulation Control Register
                pub const CIR_TMCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003004));

                /// CIR Transmit Control Register
                pub const CIR_TCR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003008));

                /// CIR Transmit Idle Duration Threshold High Bit Register
                pub const CIR_IDC_H = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200300c));

                /// CIR Transmit Idle Duration Threshold Low Bit Register
                pub const CIR_IDC_L = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003010));

                /// CIR Transmit Idle Counter High Bit Register
                pub const CIR_TICR_H = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003014));

                /// CIR Transmit Idle Counter Low Bit Register
                pub const CIR_TICR_L = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003018));

                /// CIR TX FIFO Empty Level Register
                pub const CIR_TEL = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003020));

                /// CIR Transmit Interrupt Control Register
                pub const CIR_TXINT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003024));

                /// CIR Transmit FIFO Available Counter Register
                pub const CIR_TAC = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003028));

                /// CIR Transmit Status Register
                pub const CIR_TXSTA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x200302c));

                /// CIR Transmit Threshold Register
                pub const CIR_TXT = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003030));

                /// CIR DMA Control Register
                pub const CIR_DMA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003034));

                /// CIR Transmit FIFO Data Register
                pub const CIR_TXFIFO = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x2003080));
            };

            /// Crypoto Engine
            pub const CE_NS = struct {
                /// Task Descriptor Address
                pub const CE_TDA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3040000));

                /// Interrupt Control Register
                pub const CE_ICR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3040008));

                /// Interrupt Status Register
                pub const CE_ISR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x304000c));

                /// Task Load Register
                pub const CE_TLR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3040010));

                /// Task Status Register
                pub const CE_TSR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3040014));

                /// Error Status Register
                pub const CE_ESR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3040018));

                /// DMA Current Source Address
                pub const CE_CSA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3040024));

                /// DMA Current Destination Address
                pub const CE_CDA = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x3040028));

                /// Throughput Register
                pub const CE_TPR = @as(*volatile mmio.Mmio(packed struct(u32) {
                    /// [0:31]
                    raw: u32 = 0,
                }), @ptrFromInt(0x304002c));
            };
        };
    };
};
